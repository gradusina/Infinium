using System;
using System.Linq;
using System.Data;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.IO;
using NPOI.HSSF.UserModel;
using NPOI.HPSF;
using NPOI.HSSF.Util;
using NPOI.HSSF.UserModel.Contrib;
using System.Collections;

namespace Infinium.Modules.WorkAssignments
{
    public class TafelSplitStruct
    {
        public int PosCount;
        public int SourceCount;
        public int FirstCount;
        public int SecondCount;
        public bool bOk;
        public bool bEqual;

        public TafelSplitStruct()
        {
            PosCount = 0;
            FirstCount = 0;
            SecondCount = 0;
            bOk = false;
            bEqual = false;
        }
    }

    public class TafelManager
    {
        DataTable MainOrdersDT;
        DataTable FrontOrdersDT;

        BindingSource MainOrdersBS;
        BindingSource FrontOrdersBS;
        public FrontsOrdersManager FrontsOrdersManager;
        public TafelManager(FrontsOrdersManager tFrontsOrdersManager)
        {
            FrontsOrdersManager = tFrontsOrdersManager;
            MainOrdersDT = new DataTable();
            FrontOrdersDT = new DataTable();
            MainOrdersDT.Columns.Add(new DataColumn("ClientName", Type.GetType("System.String")));
            MainOrdersDT.Columns.Add(new DataColumn("OrderNumber", Type.GetType("System.String")));
            MainOrdersDT.Columns.Add(new DataColumn("MainOrderID", Type.GetType("System.Int32")));
            MainOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            MainOrdersBS = new BindingSource();
            FrontOrdersBS = new BindingSource();

            MainOrdersBS.DataSource = MainOrdersDT;
        }

        public DataTable EditFrontOrdersDT
        {
            get { return FrontOrdersDT; }
        }

        public BindingSource MainOrdersList
        {
            get { return MainOrdersBS; }
        }

        public BindingSource FrontOrdersList
        {
            get { return FrontOrdersBS; }
        }

        public void FillTables()
        {
            FrontOrdersDT.Clear();
            FrontOrdersDT = FrontsOrdersManager.OrdersDT.Copy();
            FrontOrdersDT.Columns.Add(new DataColumn("GroupNumber", Type.GetType("System.Int32")));
            FrontOrdersBS.DataSource = FrontOrdersDT;

            DataTable DistMainOrdersDT = DistMainOrdersTable(FrontOrdersDT, true);
            DataTable DT = new DataTable();
            string MainOrdersID = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(DT);
                    foreach (DataRow item in DT.Rows)
                    {
                        DataRow NewRow = MainOrdersDT.NewRow();
                        NewRow["ClientName"] = item["ClientName"];
                        NewRow["OrderNumber"] = item["DocNumber"];
                        NewRow["MainOrderID"] = item["MainOrderID"];
                        NewRow["GroupType"] = 0;
                        MainOrdersDT.Rows.Add(NewRow);
                    }
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);
                    foreach (DataRow item in DT.Rows)
                    {
                        DataRow NewRow = MainOrdersDT.NewRow();
                        NewRow["ClientName"] = item["ClientName"];
                        NewRow["OrderNumber"] = item["OrderNumber"];
                        NewRow["MainOrderID"] = item["MainOrderID"];
                        NewRow["GroupType"] = 1;
                        MainOrdersDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private DataTable DistMainOrdersTable(DataTable SourceDT, bool OrderASC)
        {
            int MainOrderID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("MainOrderID", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "MainOrderID ASC";
                else
                    DV.Sort = "MainOrderID DESC";
                DT = DV.ToTable(true, new string[] { "MainOrderID", "GroupType" });
            }
            return DT;
        }

        public void FilterOrdersByMainOrder(int GroupType, int MainOrderID)
        {
            FrontOrdersBS.Filter = "GroupType=" + GroupType + " AND MainOrderID=" + MainOrderID;
        }

        public void MoveToPosition(int Position)
        {
            FrontOrdersBS.Position = Position;
        }

        public void EditCurrentFrontsCout(int NewCount, ref decimal Square)
        {
            int OldCount = Convert.ToInt32(((DataRowView)FrontOrdersBS.Current).Row["Count"]);
            Square = Convert.ToDecimal(((DataRowView)FrontOrdersBS.Current).Row["Square"]) / OldCount;
            ((DataRowView)FrontOrdersBS.Current).Row["Count"] = NewCount;
            ((DataRowView)FrontOrdersBS.Current).Row["Square"] = Square * NewCount;
        }

        public void AddNewRow(int Count, decimal Square)
        {
            DataRow NewRow = FrontOrdersDT.NewRow();
            NewRow.ItemArray = ((DataRowView)FrontOrdersBS.Current).Row.ItemArray;
            NewRow["Count"] = Count;
            NewRow["Square"] = Square * Count;
            FrontOrdersDT.Rows.Add(NewRow);
        }

        public int CurrentFrontsCount
        {
            get
            {
                if (FrontOrdersBS.Count == 0 || ((DataRowView)FrontOrdersBS.Current).Row["Count"] == DBNull.Value)
                    return 0;
                return Convert.ToInt32(((DataRowView)FrontOrdersBS.Current).Row["Count"]);
            }
        }
    }




    public class FrontsOrdersManager
    {
        private DataTable AllBatchFrontsDT;
        private DataTable AllPrintedFrontsDT;
        private DataTable BatchFrontsDT;
        private DataTable FrontsSummaryDT;
        private DataTable FrameColorsSummaryDT;
        private DataTable InsetTypesSummaryDT;
        private DataTable InsetColorsSummaryDT;
        private DataTable SizesSummaryDT;

        private DataTable FrontsDataTable = null;
        private DataTable FrameColorsDataTable = null;
        private DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        private DataTable InsetTypesDataTable = null;
        private DataTable InsetColorsDataTable = null;
        private DataTable TechnoProfilesDataTable = null;

        DataTable TechStoreDataTable = null;
        BindingSource BatchFrontsBS = null;
        BindingSource FrontsSummaryBS = null;
        BindingSource FrameColorsSummaryBS = null;
        BindingSource InsetTypesSummaryBS = null;
        BindingSource InsetColorsSummaryBS = null;
        BindingSource SizesSummaryBS = null;

        public BindingSource BatchFrontsList
        {
            get { return BatchFrontsBS; }
        }

        public BindingSource FrontsSummaryList
        {
            get { return FrontsSummaryBS; }
        }

        public BindingSource FrameColorsSummaryList
        {
            get { return FrameColorsSummaryBS; }
        }

        public BindingSource InsetTypesSummaryList
        {
            get { return InsetTypesSummaryBS; }
        }

        public BindingSource InsetColorsSummaryList
        {
            get { return InsetColorsSummaryBS; }
        }

        public BindingSource SizesSummaryList
        {
            get { return SizesSummaryBS; }
        }

        public FrontsOrdersManager()
        {

        }

        private void Create()
        {
            FrontsDataTable = new DataTable();
            FrameColorsDataTable = new DataTable();
            PatinaDataTable = new DataTable();
            InsetTypesDataTable = new DataTable();
            InsetColorsDataTable = new DataTable();

            FrontsSummaryDT = new DataTable();
            FrontsSummaryDT.Columns.Add(new DataColumn(("Front"), System.Type.GetType("System.String")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("FrontTypeID"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("PrintingStatus"), System.Type.GetType("System.Int32")));

            FrameColorsSummaryDT = new DataTable();
            FrameColorsSummaryDT.Columns.Add(new DataColumn(("FrameColor"), System.Type.GetType("System.String")));
            FrameColorsSummaryDT.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            FrameColorsSummaryDT.Columns.Add(new DataColumn(("FrontTypeID"), System.Type.GetType("System.Int32")));
            FrameColorsSummaryDT.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            FrameColorsSummaryDT.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            FrameColorsSummaryDT.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrameColorsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            SizesSummaryDT = new DataTable();
            SizesSummaryDT.Columns.Add(new DataColumn(("Size"), System.Type.GetType("System.String")));
            SizesSummaryDT.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            SizesSummaryDT.Columns.Add(new DataColumn(("FrontTypeID"), System.Type.GetType("System.Int32")));
            SizesSummaryDT.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            SizesSummaryDT.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            SizesSummaryDT.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            SizesSummaryDT.Columns.Add(new DataColumn(("InsetColorID"), System.Type.GetType("System.Int32")));
            SizesSummaryDT.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            SizesSummaryDT.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            SizesSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));
            SizesSummaryDT.Columns.Add(new DataColumn(("Height"), System.Type.GetType("System.Int32")));

            InsetTypesSummaryDT = new DataTable();
            InsetTypesSummaryDT.Columns.Add(new DataColumn(("InsetType"), System.Type.GetType("System.String")));
            InsetTypesSummaryDT.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDT.Columns.Add(new DataColumn(("FrontTypeID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDT.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDT.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDT.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDT.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            InsetTypesSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            InsetColorsSummaryDT = new DataTable();
            InsetColorsSummaryDT.Columns.Add(new DataColumn(("InsetColor"), System.Type.GetType("System.String")));
            InsetColorsSummaryDT.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDT.Columns.Add(new DataColumn(("FrontTypeID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDT.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDT.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDT.Columns.Add(new DataColumn(("InsetColorID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDT.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDT.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            InsetColorsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            AllBatchFrontsDT = new DataTable();
            AllPrintedFrontsDT = new DataTable();
            BatchFrontsDT = new DataTable();
            BatchFrontsBS = new BindingSource();
            FrontsSummaryBS = new BindingSource();
            FrameColorsSummaryBS = new BindingSource();
            InsetTypesSummaryBS = new BindingSource();
            InsetColorsSummaryBS = new BindingSource();
            SizesSummaryBS = new BindingSource();
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable = new DataTable();
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void GetInsetColorsDT()
        {
            InsetColorsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InsetColors.InsetColorID, InsetColors.GroupID, infiniu2_catalog.dbo.TechStore.TechStoreName AS InsetColorName FROM InsetColors" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON InsetColors.InsetColorID = infiniu2_catalog.dbo.TechStore.TechStoreID ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = -1;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "-";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = 0;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "на выбор";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }

            }

        }

        private void Fill()
        {
            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            SelectCommand = @"SELECT DISTINCT TechStoreID AS TechnoProfileID, TechStoreName AS TechnoProfileName FROM TechStore 
                WHERE TechStoreID IN (SELECT TechnoProfileID FROM FrontsConfig WHERE Enabled = 1 AND AccountingName IS NOT NULL AND InvNumber IS NOT NULL)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                TechnoProfilesDataTable = new DataTable();
                DA.Fill(TechnoProfilesDataTable);

                DataRow NewRow = TechnoProfilesDataTable.NewRow();
                NewRow["TechnoProfileID"] = -1;
                NewRow["TechnoProfileName"] = "-";
                TechnoProfilesDataTable.Rows.InsertAt(NewRow, 0);
            }

            GetColorsDT();
            GetInsetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetTypes",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }

            TechStoreDataTable = new DataTable();
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore",
            //    ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(TechStoreDataTable);
            //}
            TechStoreDataTable = TablesManager.TechStoreDataTable;
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 FrontsOrdersID, FrontsOrders.MainOrderID, FrontID, ColorID, PatinaID, 
InsetTypeID, InsetColorID, TechnoProfileID, TechnoColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, FrontsOrders.Square, FrontsOrders.FactoryID, IsNonStandard, FrontsOrders.Notes, ClientName FROM FrontsOrders INNER JOIN
                MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID INNER JOIN
                infiniu2_marketingreference.dbo.Clients AS Client ON MegaOrders.ClientID = Client.ClientID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(AllBatchFrontsDT);
                DA.Fill(BatchFrontsDT);
                AllBatchFrontsDT.Columns.Add(new DataColumn(("GroupType"), System.Type.GetType("System.Int32")));
            }
            for (int i = 0; i < FrontsSummaryDT.Rows.Count; i++)
                FrontsSummaryDT.Rows[i]["PrintingStatus"] = 0;
            for (int i = 0; i < FrameColorsSummaryDT.Rows.Count; i++)
                FrameColorsSummaryDT.Rows[i]["PrintingStatus"] = 0;
        }

        private void Binding()
        {
            BatchFrontsBS.DataSource = BatchFrontsDT;
            FrontsSummaryBS.DataSource = FrontsSummaryDT;
            FrameColorsSummaryBS.DataSource = FrameColorsSummaryDT;
            InsetTypesSummaryBS.DataSource = InsetTypesSummaryDT;
            InsetColorsSummaryBS.DataSource = InsetColorsSummaryDT;
            SizesSummaryBS.DataSource = SizesSummaryDT;
        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
        }

        public bool FilterFrontsByWorkAssignment(int WorkAssignmentID, int FactoryID, int FilterType)
        {
            string FilterString = string.Empty;
            
            string BatchFactoryFilter = string.Empty;
            string FactoryFilter = string.Empty;
            string SelectCommand = string.Empty;

            if (FactoryID != 0)
            {
                BatchFactoryFilter = " AND BatchDetails.FactoryID = " + FactoryID;
                FactoryFilter = " AND FrontsOrders.FactoryID = " + FactoryID;
            }
            DataTable DT = AllBatchFrontsDT.Clone();
            AllBatchFrontsDT.Clear();

            if (FilterType == 1)
                FilterString = " AND FrontsOrders.FrontID IN (1975,1976,1977,1978,15760, 3737, 16269,30364,30366,30367,28945,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,15108,27914)";
            if (FilterType == 2)
                FilterString = " AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.KansasPat) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Kansas) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Sofia) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Lorenzo) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Elegant) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Turin1) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Turin1_1) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Dakota) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.DakotaPat) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Turin3) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.LeonTPS) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Infiniti) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.InfinitiPat) + ")";
            if (FilterType == 3)
                FilterString = " AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel3) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel2) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel3Gl) + ")";
            if (FilterType == 4)
                FilterString = " AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel1) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel3) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel4) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Jersy110) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel5) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Porto) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Monte) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno1) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Shervud) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno2) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno4) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.pFox) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno5) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PR1) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PR2) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PR3) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PRU8) + ")";
            if (FilterType == 5)
                FilterString = " AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.TechnoN) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Antalia) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Nord95) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.epFox) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Fat) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Leon) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Limog) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Luk) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep066Marsel4) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep110Jersy) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep018Marsel1) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep043Shervud) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Urban) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Alby) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Bruno) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.epsh406Techno4) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.LukPVH) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Milano) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Praga) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Sigma) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Venecia) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Bergamo) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep041) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep071) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep206) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep216) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Boston) + ")";

            if (FilterType == 6)
                FilterString = " AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel1_19) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel1Gl_19) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel1R1) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel1R1Gl) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel1R2) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel1R2Gl) + ")";

            SelectCommand = @"SELECT FrontsOrdersID, FrontsOrders.MainOrderID, FrontID, ColorID, PatinaID, InsetTypeID, InsetColorID, TechnoProfileID, TechnoColorID, TechnoInsetTypeID, TechnoInsetColorID, 
Height, Width, Count, FrontConfigID, FrontsOrders.Square, FrontsOrders.FactoryID, IsNonStandard, FrontsOrders.Notes, ClientName FROM FrontsOrders INNER JOIN
                MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID INNER JOIN
                infiniu2_marketingreference.dbo.Clients AS Client ON MegaOrders.ClientID = Client.ClientID
                WHERE FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")" + BatchFactoryFilter + ")" + FactoryFilter + FilterString;
            if (FactoryID == 2)
                SelectCommand = @"SELECT FrontsOrdersID, FrontsOrders.MainOrderID, FrontID, ColorID, PatinaID, InsetTypeID, InsetColorID, TechnoProfileID, TechnoColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, FrontsOrders.Square, FrontsOrders.FactoryID, IsNonStandard, FrontsOrders.Notes, ClientName FROM FrontsOrders  INNER JOIN
                    MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                    MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID INNER JOIN
                    infiniu2_marketingreference.dbo.Clients AS Client ON MegaOrders.ClientID = Client.ClientID
                    WHERE FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + ")" + BatchFactoryFilter + ")" + FactoryFilter + FilterString;
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = AllBatchFrontsDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                AllBatchFrontsDT.Rows.Add(NewRow);
            }

            SelectCommand = @"SELECT FrontsOrdersID, FrontsOrders.MainOrderID, FrontID, ColorID, PatinaID, InsetTypeID, InsetColorID, TechnoProfileID, TechnoColorID, TechnoInsetTypeID, TechnoInsetColorID, 
Height, Width, Count, FrontConfigID, FrontsOrders.Square, FrontsOrders.FactoryID, IsNonStandard, FrontsOrders.Notes, ClientName FROM FrontsOrders INNER JOIN
                MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                infiniu2_zovreference.dbo.Clients AS Client ON MainOrders.ClientID = Client.ClientID
                WHERE FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")" + BatchFactoryFilter + ")" + FactoryFilter + FilterString;
            if (FactoryID == 2)
                SelectCommand = @"SELECT FrontsOrdersID, FrontsOrders.MainOrderID, FrontID, ColorID, PatinaID, InsetTypeID, InsetColorID, TechnoProfileID, TechnoColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, FrontsOrders.Square, FrontsOrders.FactoryID, IsNonStandard, FrontsOrders.Notes, ClientName FROM FrontsOrders INNER JOIN
                    MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                    infiniu2_zovreference.dbo.Clients AS Client ON MainOrders.ClientID = Client.ClientID
                    WHERE FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + ")" + BatchFactoryFilter + ")" + FactoryFilter + FilterString;
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = AllBatchFrontsDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                AllBatchFrontsDT.Rows.Add(NewRow);
            }
            //foreach (DataRow item in DT.Rows)
            //    AllBatchFrontsDT.Rows.Add(item.ItemArray);

            //AllBatchFrontsDT.DefaultView.Sort = "Front, FrameColor, InsetType";
            return AllBatchFrontsDT.Rows.Count > 0;
        }

        public bool FilterFrontsByBatch(bool ZOV, int BatchID, int FactoryID, int FilterType)
        {
            string FilterString = string.Empty;
            string OrdersConnectionString = string.Empty;
            if (ZOV)
                OrdersConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            else
                OrdersConnectionString = ConnectionStrings.MarketingOrdersConnectionString;

            string BatchFactoryFilter = string.Empty;
            string FactoryFilter = string.Empty;
            string SelectCommand = string.Empty;

            if (FactoryID != 0)
            {
                BatchFactoryFilter = " AND BatchDetails.FactoryID = " + FactoryID;
                FactoryFilter = " AND FrontsOrders.FactoryID = " + FactoryID;
            }

            BatchFrontsDT.Clear();

            if (FilterType == 1)
                FilterString = " AND FrontsOrders.FrontID IN (1975,1976,1977,1978,15760, 3737, 16269,30364,30366,30367,28945,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,15108,27914)";
            if (FilterType == 2)
                FilterString = " AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.KansasPat) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Kansas) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Sofia) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Lorenzo) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Elegant) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Turin1) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Turin1_1) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Dakota) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.DakotaPat) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Turin3) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.LeonTPS) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Infiniti) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.InfinitiPat) + ")";
            if (FilterType == 3)
                FilterString = " AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel3) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel2) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel3Gl) + ")";
            if (FilterType == 4)
                FilterString = " AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel1) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel3) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel4) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Jersy110) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel5) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Porto) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Monte) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno1) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Shervud) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno2) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno4) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.pFox) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno5) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PR1) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PR2) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PR3) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PRU8) + ")";
            if (FilterType == 5)
                FilterString = " AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.TechnoN) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Antalia) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Nord95) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.epFox) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Fat) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Leon) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Limog) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Luk) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep066Marsel4) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep110Jersy) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep018Marsel1) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep043Shervud) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Urban) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Alby) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Bruno) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.epsh406Techno4) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.LukPVH) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Milano) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Praga) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Sigma) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Venecia) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Bergamo) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep041) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep071) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep206) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.ep216) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Boston) + ")";
            if (FilterType == 6)
                FilterString = " AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel1_19) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel1Gl_19) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel1R1) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel1R1Gl) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel1R2) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Tafel1R2Gl) + ")";

            if (ZOV)
            {
                SelectCommand = @"SELECT FrontsOrders.*, ClientName FROM FrontsOrders INNER JOIN
                MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                infiniu2_zovreference.dbo.Clients AS Client ON MainOrders.ClientID = Client.ClientID
                WHERE FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID = " + BatchID + BatchFactoryFilter + ")" + FactoryFilter + FilterString;
            }
            else
            {
                SelectCommand = @"SELECT FrontsOrders.*, ClientName, FrontsOrders.Notes FROM FrontsOrders INNER JOIN
                MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID INNER JOIN
                infiniu2_marketingreference.dbo.Clients AS Client ON MegaOrders.ClientID = Client.ClientID
                WHERE FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID = " + BatchID + BatchFactoryFilter + ")" + FactoryFilter + FilterString;
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, OrdersConnectionString))
            {
                DA.Fill(BatchFrontsDT);
                //BatchFrontsDT.DefaultView.Sort = "Front, FrameColor, InsetType";
            }

            return BatchFrontsDT.Rows.Count > 0;
        }

        public void FilterFrameColors(int FrontID, int FrontTypeID)
        {
            FrameColorsSummaryBS.Filter = "FrontID=" + FrontID + " AND FrontTypeID=" + FrontTypeID;
            FrameColorsSummaryBS.MoveFirst();
        }

        public void FilterInsetTypes(int FrontID, int FrontTypeID, int ColorID, int PatinaID)
        {
            InsetTypesSummaryBS.Filter = "FrontID=" + FrontID + " AND FrontTypeID=" + FrontTypeID +
                " AND ColorID=" + ColorID + " AND PatinaID=" + PatinaID;
            InsetTypesSummaryBS.MoveFirst();
        }

        public void FilterInsetColors(int FrontID, int FrontTypeID, int ColorID, int PatinaID, int InsetTypeID)
        {
            InsetColorsSummaryBS.Filter = "FrontID=" + FrontID + " AND FrontTypeID=" +
                FrontTypeID + " AND InsetTypeID=" + InsetTypeID + " AND ColorID=" + ColorID + " AND PatinaID=" + PatinaID;
            InsetColorsSummaryBS.MoveFirst();
        }

        public void FilterSizes(int FrontID, int FrontTypeID, int ColorID, int PatinaID, int InsetTypeID, int InsetColorID)
        {
            SizesSummaryBS.Filter = "FrontID=" + FrontID + " AND FrontTypeID=" +
                FrontTypeID + " AND ColorID=" + ColorID + " AND PatinaID=" + PatinaID + " AND InsetTypeID=" + InsetTypeID +
                " AND InsetColorID=" + InsetColorID;
            SizesSummaryBS.MoveFirst();
        }

        private void GetGridMargins(int FrontID, ref int MarginHeight, ref int MarginWidth)
        {
            DataRow[] Rows = TechStoreDataTable.Select("TechStoreID = " + FrontID);
            if (Rows.Count() > 0)
            {
                if (Rows[0]["InsetHeightAdmission"] != DBNull.Value)
                    MarginHeight = Convert.ToInt32(Rows[0]["InsetHeightAdmission"]);
                if (Rows[0]["InsetWidthAdmission"] != DBNull.Value)
                    MarginWidth = Convert.ToInt32(Rows[0]["InsetWidthAdmission"]);
            }
        }

        //private void GetGridMargins(int FrontID, ref int MarginHeight, ref int MarginWidth)
        //{
        //    DataRow[] Rows = InsetMarginsDT.Select("FrontID = " + FrontID);
        //    if (Rows.Count() == 0)
        //        return;
        //    MarginHeight = Convert.ToInt32(Rows[0]["GridHeight"]);
        //    MarginWidth = Convert.ToInt32(Rows[0]["GridWidth"]);
        //}

        public string GetFrontName(int FrontID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }

        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
                ColorName = Rows[0]["ColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string PatinaName = string.Empty;
            try
            {
                DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
                PatinaName = Rows[0]["PatinaName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return PatinaName;
        }

        public string GetInsetTypeName(int InsetTypeID)
        {
            string InsetType = string.Empty;
            try
            {
                DataRow[] Rows = InsetTypesDataTable.Select("InsetTypeID = " + InsetTypeID);
                InsetType = Rows[0]["InsetTypeName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return InsetType;
        }

        public string GetInsetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = InsetColorsDataTable.Select("InsetColorID = " + ColorID);
                ColorName = Rows[0]["InsetColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        public bool FrontsSummary(ref decimal TotalSquare, ref int TotalCount, ref int TotalCurvedCount)
        {
            FrontsSummaryDT.Clear();
            decimal Square = 0;
            int Count = 0;
            DataTable Table = new DataTable();

            using (DataView DV = new DataView(AllBatchFrontsDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = AllBatchFrontsDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1");
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        Square += Convert.ToDecimal(row["Square"]);
                        TotalSquare += Convert.ToDecimal(row["Square"]);
                        Count += Convert.ToInt32(row["Count"]);
                        TotalCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = FrontsSummaryDT.NewRow();
                    NewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["FrontTypeID"] = 0;
                    NewRow["Square"] = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = Count;
                    FrontsSummaryDT.Rows.Add(NewRow);

                    Square = 0;
                    Count = 0;
                }
                DataRow[] CurvedRows = AllBatchFrontsDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1");
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        Count += Convert.ToInt32(row["Count"]);
                        TotalCurvedCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = FrontsSummaryDT.NewRow();
                    CurvedNewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"])) + " гн.";
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["FrontTypeID"] = 1;
                    CurvedNewRow["Square"] = 0;
                    CurvedNewRow["Count"] = Count;
                    FrontsSummaryDT.Rows.Add(CurvedNewRow);

                    Count = 0;
                }
            }

            Table.Dispose();
            FrontsSummaryDT.DefaultView.Sort = "Square DESC";
            FrontsSummaryBS.MoveFirst();

            return FrontsSummaryDT.Rows.Count > 0;
        }

        public bool FrameColorsSummary(ref decimal TotalSquare, ref int TotalCount, ref int TotalCurvedCount)
        {
            FrameColorsSummaryDT.Clear();
            decimal Square = 0;
            int Count = 0;
            DataTable Table = new DataTable();

            using (DataView DV = new DataView(AllBatchFrontsDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = AllBatchFrontsDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1 AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        Square += Convert.ToDecimal(row["Square"]);
                        TotalSquare += Convert.ToDecimal(row["Square"]);
                        Count += Convert.ToInt32(row["Count"]);
                        TotalCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = FrameColorsSummaryDT.NewRow();
                    if (Convert.ToInt32(Table.Rows[i]["PatinaID"]) == -1)
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"])) + " " + GetPatinaName(Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["FrontTypeID"] = 0;
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["Square"] = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = Count;
                    FrameColorsSummaryDT.Rows.Add(NewRow);

                    Square = 0;
                    Count = 0;
                }
                DataRow[] CurvedRows = AllBatchFrontsDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1 AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        Count += Convert.ToInt32(row["Count"]);
                        TotalCurvedCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = FrameColorsSummaryDT.NewRow();
                    if (Convert.ToInt32(Table.Rows[i]["PatinaID"]) == -1)
                        CurvedNewRow["FrameColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                    else
                        CurvedNewRow["FrameColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"])) + " " + GetPatinaName(Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["FrontTypeID"] = 1;
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["Square"] = 0;
                    CurvedNewRow["Count"] = Count;
                    FrameColorsSummaryDT.Rows.Add(CurvedNewRow);

                    Count = 0;
                }
            }

            Table.Dispose();
            FrameColorsSummaryDT.DefaultView.Sort = "Square DESC";
            FrameColorsSummaryBS.MoveFirst();

            return FrameColorsSummaryDT.Rows.Count > 0;
        }

        public bool InsetTypesSummary(ref decimal TotalSquare, ref int TotalCount, ref int TotalCurvedCount)
        {
            InsetTypesSummaryDT.Clear();
            int Count = 0;
            int MarginHeight = 0;
            int MarginWidth = 0;
            decimal Square = 0;
            decimal GridHeight = 0;
            decimal GridWidth = 0;
            DataTable Table = new DataTable();

            using (DataView DV = new DataView(AllBatchFrontsDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID", "InsetTypeID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = AllBatchFrontsDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND Width<>-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        GetGridMargins(Convert.ToInt32(row["FrontID"]), ref MarginHeight, ref MarginWidth);
                        GridHeight = Convert.ToInt32(Convert.ToInt32(row["Height"]) - MarginHeight);
                        GridWidth = Convert.ToInt32(Convert.ToInt32(row["Width"]) - MarginWidth);
                        if (GridHeight < 0 || GridWidth < 0)
                        {
                            GridHeight = 0;
                            GridWidth = 0;
                        }
                        Square += Decimal.Round(GridHeight * GridWidth * Convert.ToInt32(row["Count"]) / 1000000, 2, MidpointRounding.AwayFromZero);
                        TotalSquare += Decimal.Round(GridHeight * GridWidth * Convert.ToInt32(row["Count"]) / 1000000, 2, MidpointRounding.AwayFromZero);
                        Count += Convert.ToInt32(row["Count"]);
                        TotalCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = InsetTypesSummaryDT.NewRow();
                    NewRow["InsetType"] = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["FrontTypeID"] = 0;
                    NewRow["InsetTypeID"] = Table.Rows[i]["InsetTypeID"];
                    if (Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) == 4)
                        Square = 0;
                    NewRow["Square"] = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = Count;
                    InsetTypesSummaryDT.Rows.Add(NewRow);

                    Square = 0;
                    Count = 0;
                }
                DataRow[] CurvedRows = AllBatchFrontsDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND Width=-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        Count += Convert.ToInt32(row["Count"]);
                        TotalCurvedCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = InsetTypesSummaryDT.NewRow();
                    CurvedNewRow["InsetType"] = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["FrontTypeID"] = 1;
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["Square"] = 0;
                    CurvedNewRow["Count"] = Count;
                    InsetTypesSummaryDT.Rows.Add(CurvedNewRow);

                    Count = 0;
                }
            }

            Table.Dispose();
            InsetTypesSummaryDT.DefaultView.Sort = "Square DESC";
            InsetTypesSummaryBS.MoveFirst();

            return InsetTypesSummaryDT.Rows.Count > 0;
        }

        public bool InsetColorsSummary(ref decimal TotalSquare, ref int TotalCount, ref int TotalCurvedCount)
        {
            InsetColorsSummaryDT.Clear();
            int Count = 0;
            int MarginHeight = 0;
            int MarginWidth = 0;
            decimal Square = 0;
            decimal GridHeight = 0;
            decimal GridWidth = 0;
            DataTable Table = new DataTable();

            using (DataView DV = new DataView(AllBatchFrontsDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID", "InsetTypeID", "InsetColorID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = AllBatchFrontsDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND Width<>-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        GetGridMargins(Convert.ToInt32(row["FrontID"]), ref MarginHeight, ref MarginWidth);
                        GridHeight = Convert.ToInt32(Convert.ToInt32(row["Height"]) - MarginHeight);
                        GridWidth = Convert.ToInt32(Convert.ToInt32(row["Width"]) - MarginWidth);
                        if (GridHeight < 0 || GridWidth < 0)
                        {
                            GridHeight = 0;
                            GridWidth = 0;
                        }
                        Square += Decimal.Round(GridHeight * GridWidth * Convert.ToInt32(row["Count"]) / 1000000, 2, MidpointRounding.AwayFromZero);
                        TotalSquare += Decimal.Round(GridHeight * GridWidth * Convert.ToInt32(row["Count"]) / 1000000, 2, MidpointRounding.AwayFromZero);
                        Count += Convert.ToInt32(row["Count"]);
                        TotalCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = InsetColorsSummaryDT.NewRow();
                    NewRow["InsetColor"] = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["FrontTypeID"] = 0;
                    NewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    NewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    if (Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) == 4)
                        Square = 0;
                    NewRow["Square"] = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = Count;
                    InsetColorsSummaryDT.Rows.Add(NewRow);

                    Square = 0;
                    Count = 0;
                }
                DataRow[] CurvedRows = AllBatchFrontsDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND Width=-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        Count += Convert.ToInt32(row["Count"]);
                        TotalCurvedCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = InsetColorsSummaryDT.NewRow();
                    CurvedNewRow["InsetColor"] = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["FrontTypeID"] = 1;
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    CurvedNewRow["Square"] = 0;
                    CurvedNewRow["Count"] = Count;
                    InsetColorsSummaryDT.Rows.Add(CurvedNewRow);

                    Count = 0;
                }
            }

            Table.Dispose();
            InsetColorsSummaryDT.DefaultView.Sort = "Square DESC";
            InsetColorsSummaryBS.MoveFirst();

            return InsetColorsSummaryDT.Rows.Count > 0;
        }

        public bool SizesSummary(ref decimal TotalSquare, ref int TotalCount, ref int TotalCurvedCount)
        {
            SizesSummaryDT.Clear();
            decimal Square = 0;
            int Count = 0;

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(AllBatchFrontsDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = AllBatchFrontsDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1 AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND Height=" + Convert.ToInt32(Table.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(Table.Rows[i]["Width"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        Square += Convert.ToDecimal(row["Square"]);
                        TotalSquare += Convert.ToDecimal(row["Square"]);
                        Count += Convert.ToInt32(row["Count"]);
                        TotalCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = SizesSummaryDT.NewRow();
                    NewRow["Size"] = Convert.ToInt32(Table.Rows[i]["Height"]) + " x " + Convert.ToInt32(Table.Rows[i]["Width"]);
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["FrontTypeID"] = 0;
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    NewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    NewRow["Height"] = Convert.ToInt32(Table.Rows[i]["Height"]);
                    NewRow["Width"] = Convert.ToInt32(Table.Rows[i]["Width"]);
                    NewRow["Square"] = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = Count;
                    SizesSummaryDT.Rows.Add(NewRow);

                    Square = 0;
                    Count = 0;
                }
                DataRow[] CurvedRows = AllBatchFrontsDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1 AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND Height=" + Convert.ToInt32(Table.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(Table.Rows[i]["Width"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        Count += Convert.ToInt32(row["Count"]);
                        TotalCurvedCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = SizesSummaryDT.NewRow();
                    CurvedNewRow["Size"] = Convert.ToInt32(Table.Rows[i]["Height"]) + " x " + Convert.ToInt32(Table.Rows[i]["Width"]);
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["FrontTypeID"] = 1;
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["Height"] = Convert.ToInt32(Table.Rows[i]["Height"]);
                    CurvedNewRow["Width"] = Convert.ToInt32(Table.Rows[i]["Width"]);
                    CurvedNewRow["Square"] = 0;
                    CurvedNewRow["Count"] = Count;
                    SizesSummaryDT.Rows.Add(CurvedNewRow);

                    Count = 0;
                }
            }

            Table.Dispose();
            SizesSummaryDT.DefaultView.Sort = "Square DESC";
            SizesSummaryBS.MoveFirst();

            return SizesSummaryDT.Rows.Count > 0;
        }

        public DataGridViewComboBoxColumn FrontsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "FrontsColumn",
                    HeaderText = "Фасад",
                    DataPropertyName = "FrontID",
                    DataSource = new DataView(FrontsDataTable),
                    ValueMember = "FrontID",
                    DisplayMember = "FrontName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn FrameColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "FrameColorsColumn",
                    HeaderText = "Цвет\r\nпрофиля",
                    DataPropertyName = "ColorID",
                    DataSource = new DataView(FrameColorsDataTable),
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = new DataView(PatinaDataTable),
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn InsetTypesColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "InsetTypesColumn",
                    HeaderText = "Тип\r\nнаполнителя",
                    DataPropertyName = "InsetTypeID",
                    DataSource = new DataView(InsetTypesDataTable),
                    ValueMember = "InsetTypeID",
                    DisplayMember = "InsetTypeName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn InsetColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "InsetColorsColumn",
                    HeaderText = "Цвет\r\nнаполнителя",
                    DataPropertyName = "InsetColorID",
                    DataSource = new DataView(InsetColorsDataTable),
                    ValueMember = "InsetColorID",
                    DisplayMember = "InsetColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn TechnoProfilesColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "TechnoProfilesColumn",
                    HeaderText = "Тип\r\nпрофиля-2",
                    DataPropertyName = "TechnoProfileID",
                    DataSource = new DataView(TechnoProfilesDataTable),
                    ValueMember = "TechnoProfileID",
                    DisplayMember = "TechnoProfileName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }
        public DataGridViewComboBoxColumn TechnoFrameColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "TechnoFrameColorsColumn",
                    HeaderText = "Цвет профиля-2",
                    DataPropertyName = "TechnoColorID",
                    DataSource = new DataView(FrameColorsDataTable),
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn TechnoInsetTypesColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "TechnoInsetTypesColumn",
                    HeaderText = "Тип наполнителя-2",
                    DataPropertyName = "TechnoInsetTypeID",
                    DataSource = new DataView(InsetTypesDataTable),
                    ValueMember = "InsetTypeID",
                    DisplayMember = "InsetTypeName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn TechnoInsetColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "TechnoInsetColorsColumn",
                    HeaderText = "Цвет наполнителя-2",
                    DataPropertyName = "TechnoInsetColorID",
                    DataSource = new DataView(InsetColorsDataTable),
                    ValueMember = "InsetColorID",
                    DisplayMember = "InsetColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataTable DinstinctFrontsDT(int[] FrontsID)
        {
            DataTable Table = AllBatchFrontsDT.Clone();
            for (int i = 0; i < FrontsID.Count(); i++)
            {
                DataRow[] rows2 = AllBatchFrontsDT.Select("FrontID=" + FrontsID[i]);
                for (int j = 0; j < rows2.Count(); j++)
                    Table.Rows.Add(rows2[j].ItemArray);
            }
            using (DataView DV = new DataView(Table))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }
            return Table;
        }

        public DataTable OrdersDT
        {
            get { return AllBatchFrontsDT; }
        }

        public void GetPrintedFronts(int WorkAssignmentID)
        {
            string SelectCommand = @"SELECT * FROM AssignmentsInWork WHERE WorkAssignmentID=" + WorkAssignmentID;
            
            AllPrintedFrontsDT.Clear();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(AllPrintedFrontsDT);
            }
        }

        public void SetFrontPrintingStatus()
        {
            for (int i = 0; i < FrontsSummaryDT.Rows.Count; i++)
            {
                DataRow[] rows = AllPrintedFrontsDT.Select("FrontID=" + FrontsSummaryDT.Rows[i]["FrontID"]);
                if (rows.Count() > 0)
                    FrontsSummaryDT.Rows[i]["PrintingStatus"] = 2;
                else
                    FrontsSummaryDT.Rows[i]["PrintingStatus"] = 0;
            }
        }
    }


    public class DecorOrdersManager
    {
        private DataTable ColorsDataTable = null;
        private DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        private DataTable ProductsDataTable = null;
        private DataTable DecorDataTable = null;

        private DataTable AllBatchDecorDT = null;
        private DataTable BatchDecorDT = null;
        private DataTable DecorProductsSummaryDT = null;
        private DataTable DecorItemsSummaryDT = null;
        private DataTable DecorColorsSummaryDT = null;
        private DataTable DecorSizesSummaryDT = null;

        private BindingSource BatchDecorBS = null;
        private BindingSource DecorProductsSummaryBS = null;
        private BindingSource DecorItemsSummaryBS = null;
        private BindingSource DecorColorsSummaryBS = null;
        private BindingSource DecorSizesSummaryBS = null;

        public BindingSource BatchDecorList
        {
            get { return BatchDecorBS; }
        }

        public BindingSource DecorProductsSummaryList
        {
            get { return DecorProductsSummaryBS; }
        }

        public BindingSource DecorItemsSummaryList
        {
            get { return DecorItemsSummaryBS; }
        }

        public BindingSource DecorColorsSummaryList
        {
            get { return DecorColorsSummaryBS; }
        }

        public BindingSource DecorSizesSummaryList
        {
            get { return DecorSizesSummaryBS; }
        }

        public DataGridViewComboBoxColumn ProductColumn
        {
            get
            {
                DataGridViewComboBoxColumn ProductColumn = new DataGridViewComboBoxColumn()
                {
                    Name = "ProductColumn",
                    HeaderText = "Продукт",
                    DataPropertyName = "ProductID",

                    DataSource = new DataView(ProductsDataTable),
                    ValueMember = "ProductID",
                    DisplayMember = "ProductName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return ProductColumn;
            }
        }

        public DataGridViewComboBoxColumn ItemColumn
        {
            get
            {
                DataGridViewComboBoxColumn ItemColumn = new DataGridViewComboBoxColumn()
                {
                    Name = "ItemColumn",
                    HeaderText = "Название",
                    DataPropertyName = "DecorID",

                    DataSource = new DataView(DecorDataTable),
                    ValueMember = "DecorID",
                    DisplayMember = "Name",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return ItemColumn;
            }
        }

        public DataGridViewComboBoxColumn ColorColumn
        {
            get
            {
                DataGridViewComboBoxColumn ColorsColumn = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",

                    DataSource = new DataView(ColorsDataTable),
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return ColorsColumn;
            }
        }

        public DataGridViewComboBoxColumn PatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn PatinaColumn = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",

                    DataSource = new DataView(PatinaDataTable),
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return PatinaColumn;
            }
        }

        private void GetColorsDT()
        {
            ColorsDataTable = new DataTable();
            ColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDataTable.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDataTable.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDataTable.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        public string GetProductName(int ProductID)
        {
            string Name = string.Empty;
            DataRow[] Rows = ProductsDataTable.Select("ProductID = " + ProductID);
            if (Rows.Count() > 0)
                Name = Rows[0]["ProductName"].ToString();
            return Name;
        }

        public string GetDecorName(int DecorID)
        {
            string Name = string.Empty;
            DataRow[] Rows = DecorDataTable.Select("DecorID = " + DecorID);
            if (Rows.Count() > 0)
                Name = Rows[0]["Name"].ToString();
            return Name;
        }

        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = ColorsDataTable.Select("ColorID = " + ColorID);
                ColorName = Rows[0]["ColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string PatinaName = string.Empty;
            try
            {
                DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
                PatinaName = Rows[0]["PatinaName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return PatinaName;
        }

        //конструктор
        public DecorOrdersManager()
        {
            Initialize();
        }

        private void Create()
        {
            DecorProductsSummaryDT = new DataTable();
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("DecorProduct"), System.Type.GetType("System.String")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorItemsSummaryDT = new DataTable();
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorItem"), System.Type.GetType("System.String")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorColorsSummaryDT = new DataTable();
            DecorColorsSummaryDT.Columns.Add(new DataColumn(("Color"), System.Type.GetType("System.String")));
            DecorColorsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDT.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDT.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDT.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorColorsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorSizesSummaryDT = new DataTable();
            DecorSizesSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDT.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDT.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDT.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDT.Columns.Add(new DataColumn(("Size"), System.Type.GetType("System.String")));
            DecorSizesSummaryDT.Columns.Add(new DataColumn(("Length"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDT.Columns.Add(new DataColumn(("Height"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDT.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorSizesSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            ColorsDataTable = new DataTable();
            ProductsDataTable = new DataTable();
            DecorDataTable = new DataTable();
            PatinaDataTable = new DataTable();

            AllBatchDecorDT = new DataTable();
            BatchDecorDT = new DataTable();

            BatchDecorBS = new BindingSource();
            DecorProductsSummaryBS = new BindingSource();
            DecorItemsSummaryBS = new BindingSource();
            DecorColorsSummaryBS = new BindingSource();
            DecorSizesSummaryBS = new BindingSource();
        }

        private void Fill()
        {
            string SelectCommand = @"SELECT ProductID, ProductName FROM DecorProducts" +
                " WHERE (ProductID IN (SELECT ProductID FROM DecorConfig)) ORDER BY ProductName ASC";
            ProductsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(ProductsDataTable);
            }
            DecorDataTable = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorDataTable);
            }
            GetColorsDT();
            SelectCommand = @"SELECT * FROM Patina ORDER BY PatinaName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            SelectCommand = @"SELECT TOP 0 DecorOrders.DecorOrderID, DecorOrders.MainOrderID, DecorOrders.ProductID, DecorOrders.DecorID, 
DecorOrders.ColorID, DecorOrders.PatinaID, DecorOrders.Length, DecorOrders.Height, DecorOrders.Width, DecorOrders.Count, DecorOrders.DecorConfigID, DecorOrders.FactoryID, DecorOrders.Notes, DecorConfig.MeasureID
                FROM DecorOrders INNER JOIN 
                infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(AllBatchDecorDT);
                DA.Fill(BatchDecorDT);
            }
        }

        private void Binding()
        {
            BatchDecorBS.DataSource = BatchDecorDT;
            DecorProductsSummaryBS.DataSource = DecorProductsSummaryDT;
            DecorItemsSummaryBS.DataSource = DecorItemsSummaryDT;
            DecorColorsSummaryBS.DataSource = DecorColorsSummaryDT;
            DecorSizesSummaryBS.DataSource = DecorSizesSummaryDT;
        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
        }

        private void GridSettings(ref PercentageDataGrid MainOrdersDecorOrdersDataGrid)
        {
            MainOrdersDecorOrdersDataGrid.Columns["Height"].HeaderText = "Высота";
            MainOrdersDecorOrdersDataGrid.Columns["Length"].HeaderText = "Длина";
            MainOrdersDecorOrdersDataGrid.Columns["Width"].HeaderText = "Ширина";
            MainOrdersDecorOrdersDataGrid.Columns["Count"].HeaderText = "Кол-во";
            MainOrdersDecorOrdersDataGrid.Columns["Notes"].HeaderText = "Примечание";

            int DisplayIndex = 0;
            MainOrdersDecorOrdersDataGrid.Columns["ProductColumn"].DisplayIndex = DisplayIndex++;
            MainOrdersDecorOrdersDataGrid.Columns["ItemColumn"].DisplayIndex = DisplayIndex++;
            MainOrdersDecorOrdersDataGrid.Columns["ColorsColumn"].DisplayIndex = DisplayIndex++;
            MainOrdersDecorOrdersDataGrid.Columns["PatinaColumn"].DisplayIndex = DisplayIndex++;
            MainOrdersDecorOrdersDataGrid.Columns["Length"].DisplayIndex = DisplayIndex++;
            MainOrdersDecorOrdersDataGrid.Columns["Height"].DisplayIndex = DisplayIndex++;
            MainOrdersDecorOrdersDataGrid.Columns["Width"].DisplayIndex = DisplayIndex++;
            MainOrdersDecorOrdersDataGrid.Columns["Count"].DisplayIndex = DisplayIndex++;
            MainOrdersDecorOrdersDataGrid.Columns["Notes"].DisplayIndex = DisplayIndex++;

            MainOrdersDecorOrdersDataGrid.Columns["ProductColumn"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MainOrdersDecorOrdersDataGrid.Columns["ProductColumn"].MinimumWidth = 110;
            MainOrdersDecorOrdersDataGrid.Columns["ItemColumn"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MainOrdersDecorOrdersDataGrid.Columns["ItemColumn"].MinimumWidth = 110;
            MainOrdersDecorOrdersDataGrid.Columns["ColorsColumn"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MainOrdersDecorOrdersDataGrid.Columns["ColorsColumn"].MinimumWidth = 110;
            MainOrdersDecorOrdersDataGrid.Columns["PatinaColumn"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MainOrdersDecorOrdersDataGrid.Columns["PatinaColumn"].MinimumWidth = 110;
            MainOrdersDecorOrdersDataGrid.Columns["Height"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MainOrdersDecorOrdersDataGrid.Columns["Height"].Width = 85;
            MainOrdersDecorOrdersDataGrid.Columns["Length"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MainOrdersDecorOrdersDataGrid.Columns["Length"].Width = 85;
            MainOrdersDecorOrdersDataGrid.Columns["Width"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MainOrdersDecorOrdersDataGrid.Columns["Width"].Width = 85;
            MainOrdersDecorOrdersDataGrid.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MainOrdersDecorOrdersDataGrid.Columns["Count"].Width = 85;

            foreach (DataGridViewColumn Column in MainOrdersDecorOrdersDataGrid.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
        }

        public bool FilterDecorByBatch(bool ZOV, int BatchID, int FactoryID)
        {
            string OrdersConnectionString = string.Empty;
            if (ZOV)
                OrdersConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            else
                OrdersConnectionString = ConnectionStrings.MarketingOrdersConnectionString;

            string BatchFactoryFilter = string.Empty;
            string FactoryFilter = string.Empty;
            string SelectCommand = string.Empty;

            if (FactoryID != 0)
            {
                BatchFactoryFilter = " AND BatchDetails.FactoryID = " + FactoryID;
                FactoryFilter = " AND DecorOrders.FactoryID = " + FactoryID;
            }

            BatchDecorDT.Clear();

            SelectCommand = @"SELECT DecorOrders.DecorOrderID, DecorOrders.MainOrderID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID, DecorOrders.PatinaID, 
DecorOrders.Length, DecorOrders.Height, DecorOrders.Width, DecorOrders.Count, DecorOrders.DecorConfigID, DecorOrders.FactoryID, DecorOrders.Notes,  DecorConfig.MeasureID
                FROM DecorOrders INNER JOIN 
                infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID
                WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID = " + BatchID + BatchFactoryFilter + ")" + FactoryFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, OrdersConnectionString))
            {
                DA.Fill(BatchDecorDT);

                foreach (DataRow Row in BatchDecorDT.Rows)
                {
                    //if (Convert.ToInt32(Row["ColorID"]) == -1)
                    //    Row["ColorID"] = 0;
                }
                //BatchDecorDT.DefaultView.Sort = "ProductName, Name";
            }

            return BatchDecorDT.Rows.Count > 0;
        }

        public bool FilterDecorByWorkAssignment(int WorkAssignmentID, int FactoryID)
        {
            string OrdersConnectionString = string.Empty;

            string BatchFactoryFilter = string.Empty;
            string FactoryFilter = string.Empty;
            string SelectCommand = string.Empty;

            if (FactoryID != 0)
            {
                BatchFactoryFilter = " AND BatchDetails.FactoryID = " + FactoryID;
                FactoryFilter = " AND DecorOrders.FactoryID = " + FactoryID;
            }
            DataTable DT = AllBatchDecorDT.Clone();
            AllBatchDecorDT.Clear();

            SelectCommand = @"SELECT DecorOrders.DecorOrderID, DecorOrders.MainOrderID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID, DecorOrders.PatinaID, DecorOrders.Length, DecorOrders.Height, DecorOrders.Width, DecorOrders.Count, DecorOrders.DecorConfigID, DecorOrders.FactoryID, DecorOrders.Notes,  DecorConfig.MeasureID
                FROM DecorOrders INNER JOIN 
                infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID
                WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")" + BatchFactoryFilter + ")" + FactoryFilter;
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrders.DecorOrderID, DecorOrders.MainOrderID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID, DecorOrders.PatinaID, DecorOrders.Length, DecorOrders.Height, DecorOrders.Width, DecorOrders.Count, DecorOrders.DecorConfigID, DecorOrders.FactoryID, DecorOrders.Notes, DecorConfig.MeasureID
                    FROM DecorOrders INNER JOIN 
                    infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID
                    WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + ")" + BatchFactoryFilter + ")" + FactoryFilter;
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);

                foreach (DataRow Row in DT.Rows)
                {
                    //if (Convert.ToInt32(Row["ColorID"]) == -1)
                    //    Row["ColorID"] = 0;
                }
            }
            foreach (DataRow item in DT.Rows)
                AllBatchDecorDT.Rows.Add(item.ItemArray);

            SelectCommand = @"SELECT DecorOrders.DecorOrderID, DecorOrders.MainOrderID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID, DecorOrders.PatinaID, DecorOrders.Length, DecorOrders.Height, DecorOrders.Width, DecorOrders.Count, 
DecorOrders.DecorConfigID, DecorOrders.FactoryID, DecorOrders.Notes, DecorConfig.MeasureID
                FROM DecorOrders INNER JOIN 
                infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID
                WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")" + BatchFactoryFilter + ")" + FactoryFilter;
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrders.DecorOrderID, DecorOrders.MainOrderID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID, DecorOrders.PatinaID, DecorOrders.Length, DecorOrders.Height, DecorOrders.Width, DecorOrders.Count, 
DecorOrders.DecorConfigID, DecorOrders.FactoryID, DecorOrders.Notes, DecorConfig.MeasureID
                    FROM DecorOrders INNER JOIN 
                    infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID 
                    WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + ")" + BatchFactoryFilter + ")" + FactoryFilter;
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);

                foreach (DataRow Row in DT.Rows)
                {
                    //if (Convert.ToInt32(Row["ColorID"]) == -1)
                    //    Row["ColorID"] = 0;
                }
            }
            foreach (DataRow item in DT.Rows)
                AllBatchDecorDT.Rows.Add(item.ItemArray);

            //AllBatchDecorDT.DefaultView.Sort = "ProductName, Name";
            return AllBatchDecorDT.Rows.Count > 0;
        }

        public bool GetDecorProducts(ref decimal TotalPogon, ref int TotalCount)
        {
            decimal DecorProductCount = 0;
            int decimals = 2;
            string Measure = string.Empty;

            DecorProductsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(AllBatchDecorDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = AllBatchDecorDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        TotalCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        TotalCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                        {
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                            TotalPogon += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }
                        else
                        {
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                            TotalPogon += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }

                        Measure = "м.п.";
                    }
                }

                //NewRow["Product"] = GetProductName(Convert.ToInt32(Row["ProductID"])) + " " + GetDecorName(Convert.ToInt32(Row["DecorID"]));
                DataRow NewRow = DecorProductsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorProduct"] = GetProductName(Convert.ToInt32(Table.Rows[i]["ProductID"]));
                if (DecorProductCount < 3)
                    decimals = 1;
                NewRow["Count"] = Decimal.Round(DecorProductCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorProductsSummaryDT.Rows.Add(NewRow);

                Measure = "";
                DecorProductCount = 0;
            }
            DecorProductsSummaryDT.DefaultView.Sort = "Count DESC";
            DecorProductsSummaryBS.MoveFirst();

            return DecorProductsSummaryDT.Rows.Count > 0;
        }

        public bool GetDecorItems()
        {
            decimal DecorItemCount = 0;
            int decimals = 2;
            string Measure = string.Empty;

            DecorItemsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(AllBatchDecorDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = AllBatchDecorDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) + " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorItemsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorItem"] = GetDecorName(Convert.ToInt32(Table.Rows[i]["DecorID"]));
                if (DecorItemCount < 3)
                    decimals = 1;
                NewRow["Count"] = Decimal.Round(DecorItemCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorItemsSummaryDT.Rows.Add(NewRow);

                Measure = "";
                DecorItemCount = 0;
            }
            Table.Dispose();
            DecorItemsSummaryDT.DefaultView.Sort = "Count DESC";
            DecorItemsSummaryBS.MoveFirst();

            return DecorItemsSummaryDT.Rows.Count > 0;
        }

        public bool GetDecorColors()
        {
            decimal DecorColorCount = 0;
            int decimals = 2;
            string Measure = string.Empty;

            DecorColorsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(AllBatchDecorDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "ColorID", "PatinaID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = AllBatchDecorDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        if (row["Height"].ToString() == "-1")
                            DecorColorCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorColorCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorColorCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorColorCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorColorCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorColorCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        Measure = "м.п.";
                    }
                }

                string Color = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                if (Convert.ToInt32(Table.Rows[i]["PatinaID"]) != -1)
                    Color += " " + GetPatinaName(Convert.ToInt32(Table.Rows[i]["PatinaID"]));

                DataRow NewRow = DecorColorsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["Color"] = Color;
                if (DecorColorCount < 3)
                    decimals = 1;
                NewRow["Count"] = Decimal.Round(DecorColorCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorColorsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorColorCount = 0;
            }
            Table.Dispose();
            DecorColorsSummaryDT.DefaultView.Sort = "Count DESC";
            DecorColorsSummaryBS.MoveFirst();

            return DecorItemsSummaryDT.Rows.Count > 0;
        }

        public bool GetDecorSizes()
        {
            decimal DecorSizeCount = 0;
            int decimals = 2;
            int Height = 0;
            int Length = 0;
            int Width = 0;
            string Measure = string.Empty;
            string Sizes = string.Empty;

            DecorSizesSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(AllBatchDecorDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "ColorID", "PatinaID", "MeasureID", "Length", "Height", "Width" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = AllBatchDecorDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]) +
                    " AND Length=" + Convert.ToInt32(Table.Rows[i]["Length"]) +
                    " AND Height=" + Convert.ToInt32(Table.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(Table.Rows[i]["Width"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        if (row["Height"].ToString() == "-1")
                            DecorSizeCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorSizeCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorSizeCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorSizeCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorSizeCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorSizeCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorSizesSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                if (DecorSizeCount < 3)
                    decimals = 1;
                NewRow["Count"] = Decimal.Round(DecorSizeCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;

                Height = Convert.ToInt32(Table.Rows[i]["Height"]);
                Length = Convert.ToInt32(Table.Rows[i]["Length"]);
                Width = Convert.ToInt32(Table.Rows[i]["Width"]);

                if (Height > -1)
                    Sizes = Height.ToString();

                if (Sizes != string.Empty)
                {
                    if (Width > -1)
                        Sizes += " x " + Width.ToString();
                }
                else
                {
                    if (Length > -1)
                    {
                        Sizes = Length.ToString();
                        if (Width > -1)
                            Sizes += " x " + Width.ToString();
                    }
                    else
                    {
                        if (Width > -1)
                            Sizes = Width.ToString();
                    }
                }

                DecorSizesSummaryDT.Rows.Add(NewRow);
                NewRow["Size"] = Sizes;
                Sizes = string.Empty;
                Measure = string.Empty;
                DecorSizeCount = 0;
            }
            Table.Dispose();
            DecorSizesSummaryDT.DefaultView.Sort = "Count DESC";
            DecorSizesSummaryBS.MoveFirst();

            return DecorSizesSummaryDT.Rows.Count > 0;
        }

        public void FilterDecorItems(int ProductID, int MeasureID)
        {
            DecorItemsSummaryBS.Filter = "ProductID=" + ProductID + " AND MeasureID=" + MeasureID;
            DecorItemsSummaryBS.MoveFirst();
        }

        public void FilterDecorColors(int ProductID, int DecorID, int MeasureID)
        {
            DecorColorsSummaryBS.Filter = "ProductID=" + ProductID + " AND DecorID="
                + DecorID + " AND MeasureID=" + MeasureID;
            DecorColorsSummaryBS.MoveFirst();
        }

        public void FilterDecorSizes(int ProductID, int DecorID, int ColorID, int MeasureID)
        {
            DecorSizesSummaryBS.Filter = "ProductID=" + ProductID +
                " AND DecorID=" + DecorID + " AND ColorID=" + ColorID + " AND MeasureID=" + MeasureID;
            DecorSizesSummaryBS.MoveFirst();
        }
    }



    public class CreationAssignments
    {
        //ArrayList MarketBatchFrontsID;
        //ArrayList MarketMegaBatchFrontsID;
        //ArrayList ZOVBatchFrontsID;
        //ArrayList ZOVMegaBatchFrontsID;

        DataTable MarketBatchesInAssignmentDT = null;
        DataTable ZOVBatchesInAssignmentDT = null;
        DataTable MachinesDT = null;

        DataTable MarketBatchesDT = null;
        DataTable MarketMegaBatchesDT = null;
        DataTable ZOVBatchesDT = null;
        DataTable ZOVMegaBatchesDT = null;

        BindingSource MarketBatchesBS = null;
        BindingSource MarketMegaBatchesBS = null;
        BindingSource ZOVBatchesBS = null;
        BindingSource ZOVMegaBatchesBS = null;

        public BindingSource MarketBatchesList
        {
            get { return MarketBatchesBS; }
        }

        public BindingSource MarketMegaBatchesList
        {
            get { return MarketMegaBatchesBS; }
        }

        public BindingSource ZOVBatchesList
        {
            get { return ZOVBatchesBS; }
        }

        public BindingSource ZOVMegaBatchesList
        {
            get { return ZOVMegaBatchesBS; }
        }

        public CreationAssignments()
        {

        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
        }

        private void Create()
        {
            //MarketBatchFrontsID = new ArrayList();
            //MarketMegaBatchFrontsID = new ArrayList();
            //ZOVBatchFrontsID = new ArrayList();
            //ZOVMegaBatchFrontsID = new ArrayList();

            MarketBatchesInAssignmentDT = new DataTable();
            ZOVBatchesInAssignmentDT = new DataTable();

            MachinesDT = new DataTable();
            MachinesDT.Columns.Add(new DataColumn("ValueMember", Type.GetType("System.Int32")));
            MachinesDT.Columns.Add(new DataColumn("DisplayMember", Type.GetType("System.String")));

            MarketBatchesDT = new DataTable();
            MarketMegaBatchesDT = new DataTable();
            ZOVBatchesDT = new DataTable();
            ZOVMegaBatchesDT = new DataTable();

            MarketBatchesBS = new BindingSource();
            MarketMegaBatchesBS = new BindingSource();
            ZOVBatchesBS = new BindingSource();
            ZOVMegaBatchesBS = new BindingSource();
        }

        private void MachineNewRow(string ValueMember, string DisplayMember)
        {
            DataRow NewRow = MachinesDT.NewRow();
            NewRow["ValueMember"] = ValueMember;
            NewRow["DisplayMember"] = DisplayMember;
            MachinesDT.Rows.Add(NewRow);
        }

        private void Fill()
        {
            string SelectCommand = @"SELECT TOP 0 Batch.*, BatchDetails.FactoryID FROM Batch INNER JOIN BatchDetails ON Batch.BatchID = BatchDetails.BatchID
                INNER JOIN FrontsOrders ON BatchDetails.MainOrderID=FrontsOrders.MainOrderID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarketBatchesInAssignmentDT);
                DA.Fill(ZOVBatchesInAssignmentDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM Batch",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarketBatchesDT);
                DA.Fill(ZOVBatchesDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM MegaBatch",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarketMegaBatchesDT);
                DA.Fill(ZOVMegaBatchesDT);
            }
        }

        private void Binding()
        {
            MarketBatchesBS.DataSource = MarketBatchesDT;
            MarketMegaBatchesBS.DataSource = MarketMegaBatchesDT;
            ZOVBatchesBS.DataSource = ZOVBatchesDT;
            ZOVMegaBatchesBS.DataSource = ZOVMegaBatchesDT;
        }

        public void FilterBatchesByMegaBatch(bool ZOV, int MegaBatchID, int FactoryID)
        {
            string OrdersConnectionString = string.Empty;
            if (ZOV)
                OrdersConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            else
                OrdersConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            string BatchFactoryFilter = string.Empty;
            string SelectCommand = string.Empty;

            if (FactoryID != 0)
                BatchFactoryFilter = " WHERE BatchDetails.FactoryID = " + FactoryID;

            SelectCommand = @"SELECT * FROM Batch WHERE BatchID IN
                (SELECT BatchID FROM BatchDetails" + BatchFactoryFilter + ") AND MegaBatchID = " + MegaBatchID + "  ORDER BY BatchID DESC";

            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                    OrdersConnectionString))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (ZOV)
                        {
                            ZOVBatchesDT.Clear();
                            DA.Fill(ZOVBatchesDT);
                        }
                        else
                        {
                            MarketBatchesDT.Clear();
                            DA.Fill(MarketBatchesDT);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public void FilterMegaBatchesByFactory(bool ZOV, int FactoryID)
        {
            string OrdersConnectionString = string.Empty;
            if (ZOV)
                OrdersConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            else
                OrdersConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            string FactoryFilter = string.Empty;
            string SelectCommand = string.Empty;

            if (FactoryID != 0)
                FactoryFilter = " WHERE BatchDetails.FactoryID = " + FactoryID;

            SelectCommand = @"SELECT * FROM MegaBatch
                WHERE MegaBatchID IN (SELECT MegaBatchID FROM Batch WHERE BatchID IN
                (SELECT BatchID FROM BatchDetails" + FactoryFilter + ")) ORDER BY MegaBatchID DESC";

            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                    OrdersConnectionString))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (ZOV)
                        {
                            ZOVMegaBatchesDT.Clear();
                            DA.Fill(ZOVMegaBatchesDT);
                        }
                        else
                        {
                            MarketMegaBatchesDT.Clear();
                            DA.Fill(MarketMegaBatchesDT);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public bool IsMarketBatchInAssignment(int FactoryID, int BatchID)
        {
            DataRow[] rows = MarketBatchesInAssignmentDT.Select("BatchID=" + BatchID);
            if (rows.Count() == 0)
                return false;
            if (FactoryID == 1)
            {
                if (rows[0]["ProfilWorkAssignmentID"] != DBNull.Value)
                    return true;
                else
                    return false;
            }
            else
            {
                if (rows[0]["TPSWorkAssignmentID"] != DBNull.Value)
                    return true;
                else
                    return false;
            }
        }

        public bool IsZOVBatchInAssignment(int FactoryID, int BatchID)
        {
            DataRow[] rows = ZOVBatchesInAssignmentDT.Select("BatchID=" + BatchID);
            if (rows.Count() == 0)
                return false;
            if (FactoryID == 1)
            {
                if (rows[0]["ProfilWorkAssignmentID"] != DBNull.Value)
                    return true;
                else
                    return false;
            }
            else
            {
                if (rows[0]["TPSWorkAssignmentID"] != DBNull.Value)
                    return true;
                else
                    return false;
            }
        }

        public void GetMarketBatchesInAssignment(int FactoryID)
        {
            MarketBatchesInAssignmentDT.Clear();
            DataTable DT = MarketBatchesInAssignmentDT.Clone();
            string SelectCommand = @"SELECT DISTINCT Batch.*, BatchDetails.FactoryID FROM Batch INNER JOIN BatchDetails ON Batch.BatchID = BatchDetails.BatchID
                INNER JOIN FrontsOrders ON BatchDetails.MainOrderID=FrontsOrders.MainOrderID AND FrontsOrders.FactoryID=" + FactoryID +
                " WHERE BatchDetails.FactoryID=" + FactoryID;
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
                MarketBatchesInAssignmentDT.Rows.Add(item.ItemArray);
            SelectCommand = @"SELECT DISTINCT Batch.*, BatchDetails.FactoryID FROM Batch INNER JOIN BatchDetails ON Batch.BatchID = BatchDetails.BatchID
                INNER JOIN DecorOrders ON BatchDetails.MainOrderID=DecorOrders.MainOrderID AND DecorOrders.FactoryID=" + FactoryID +
                " WHERE BatchDetails.FactoryID=" + FactoryID;
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
                MarketBatchesInAssignmentDT.Rows.Add(item.ItemArray);
        }

        public void GetZOVBatchesInAssignment(int FactoryID)
        {
            ZOVBatchesInAssignmentDT.Clear();
            DataTable DT = ZOVBatchesInAssignmentDT.Clone();
            string SelectCommand = @"SELECT DISTINCT Batch.*, BatchDetails.FactoryID FROM Batch INNER JOIN BatchDetails ON Batch.BatchID = BatchDetails.BatchID
                INNER JOIN FrontsOrders ON BatchDetails.MainOrderID=FrontsOrders.MainOrderID AND FrontsOrders.FactoryID=" + FactoryID +
                " WHERE BatchDetails.FactoryID=" + FactoryID;
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
                ZOVBatchesInAssignmentDT.Rows.Add(item.ItemArray);
            SelectCommand = @"SELECT DISTINCT Batch.*, BatchDetails.FactoryID FROM Batch INNER JOIN BatchDetails ON Batch.BatchID = BatchDetails.BatchID
                INNER JOIN DecorOrders ON BatchDetails.MainOrderID=DecorOrders.MainOrderID AND DecorOrders.FactoryID=" + FactoryID +
                " WHERE BatchDetails.FactoryID=" + FactoryID;
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
                ZOVBatchesInAssignmentDT.Rows.Add(item.ItemArray);
        }

        public void IsMarketMegaBatchInAssignment(int MegaBatchID, int FactoryID, ref int Status)
        {
            int BatchAmount = 0;
            int BatchInAssignmentAmount = 0;
            DataRow[] rows = MarketBatchesInAssignmentDT.Select("MegaBatchID=" + MegaBatchID + " AND FactoryID=" + FactoryID);
            if (rows.Count() > 0)
            {
                BatchAmount = rows.Count();
                if (FactoryID == 1)
                {
                    DataRow[] rows1 = MarketBatchesInAssignmentDT.Select("ProfilWorkAssignmentID IS NOT NULL AND MegaBatchID=" + MegaBatchID + " AND FactoryID=" + FactoryID);
                    BatchInAssignmentAmount = rows1.Count();
                }
                if (FactoryID == 2)
                {
                    DataRow[] rows1 = MarketBatchesInAssignmentDT.Select("TPSWorkAssignmentID IS NOT NULL AND MegaBatchID=" + MegaBatchID + " AND FactoryID=" + FactoryID);
                    BatchInAssignmentAmount = rows1.Count();
                }
                if (BatchInAssignmentAmount == 0)
                    Status = 0;
                else
                {
                    if (BatchAmount == BatchInAssignmentAmount)
                        Status = 2;
                    else
                        Status = 1;
                }
            }
        }

        public void IsZOVMegaBatchInAssignment(int MegaBatchID, int FactoryID, ref int Status)
        {
            int BatchAmount = 0;
            int BatchInAssignmentAmount = 0;
            DataRow[] rows = ZOVBatchesInAssignmentDT.Select("MegaBatchID=" + MegaBatchID + " AND FactoryID=" + FactoryID);
            if (rows.Count() > 0)
            {
                BatchAmount = rows.Count();
                if (FactoryID == 1)
                {
                    DataRow[] rows1 = ZOVBatchesInAssignmentDT.Select("ProfilWorkAssignmentID IS NOT NULL AND MegaBatchID=" + MegaBatchID + " AND FactoryID=" + FactoryID);
                    BatchInAssignmentAmount = rows1.Count();
                }
                if (FactoryID == 2)
                {
                    DataRow[] rows1 = ZOVBatchesInAssignmentDT.Select("TPSWorkAssignmentID IS NOT NULL AND MegaBatchID=" + MegaBatchID + " AND FactoryID=" + FactoryID);
                    BatchInAssignmentAmount = rows1.Count();
                }
                if (BatchInAssignmentAmount == 0)
                    Status = 0;
                else
                {
                    if (BatchAmount == BatchInAssignmentAmount)
                        Status = 2;
                    else
                        Status = 1;
                }
            }
        }
    }





    public class ControlAssignments
    {
        DataTable MachinesDT = null;
        DataTable BatchesDT = null;
        DataTable MegaBatchesDT = null;

        DataTable UsersDT = null;
        DataTable WorkAssignmentsDT = null;

        BindingSource BatchesBS = null;
        BindingSource MegaBatchesBS = null;
        BindingSource WorkAssignmentsBS = null;

        public BindingSource BatchesList
        {
            get { return BatchesBS; }
        }

        public BindingSource MegaBatchesList
        {
            get { return MegaBatchesBS; }
        }

        public BindingSource WorkAssignmentsList
        {
            get { return WorkAssignmentsBS; }
        }

        public ControlAssignments()
        {

        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
        }

        private void Create()
        {
            MachinesDT = new DataTable();
            MachinesDT.Columns.Add(new DataColumn("ValueMember", Type.GetType("System.Int32")));
            MachinesDT.Columns.Add(new DataColumn("DisplayMember", Type.GetType("System.String")));

            BatchesDT = new DataTable();
            MegaBatchesDT = new DataTable();
            UsersDT = new DataTable();
            WorkAssignmentsDT = new DataTable();

            BatchesBS = new BindingSource();
            MegaBatchesBS = new BindingSource();
            WorkAssignmentsBS = new BindingSource();
        }

        private void MachineNewRow(string ValueMember, string DisplayMember)
        {
            DataRow NewRow = MachinesDT.NewRow();
            NewRow["ValueMember"] = ValueMember;
            NewRow["DisplayMember"] = DisplayMember;
            MachinesDT.Rows.Add(NewRow);
        }

        private void Fill()
        {
            MachineNewRow("0", "-");
            MachineNewRow("1", "Elme");
            MachineNewRow("2", "Balistrini");
            MachineNewRow("3", "Rapid");
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM Batch",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(BatchesDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM MegaBatch",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MegaBatchesDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT UserID, Name, ShortName FROM Users",
                ConnectionStrings.UsersConnectionString))
            {
                DA.Fill(UsersDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM WorkAssignments ORDER BY WorkAssignmentID DESC",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(WorkAssignmentsDT);
            }
            MegaBatchesDT.Columns.Add(new DataColumn("Group", Type.GetType("System.String")));
            MegaBatchesDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            BatchesDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
        }

        private void Binding()
        {
            BatchesBS.DataSource = BatchesDT;
            MegaBatchesBS.DataSource = MegaBatchesDT;
            WorkAssignmentsBS.DataSource = WorkAssignmentsDT;
        }

        public DataGridViewComboBoxColumn MachineColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "MachineColumn",
                    HeaderText = "Станок",
                    DataPropertyName = "Machine",
                    DataSource = new DataView(MachinesDT),
                    ValueMember = "ValueMember",
                    DisplayMember = "DisplayMember",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic,
                    Width = 135,
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.None
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn TPS45UserColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "TPS45UserColumn",
                    HeaderText = "Угол 45 ТПС\r\nраспечатал",
                    DataPropertyName = "TPS45UserID",
                    DataSource = new DataView(UsersDT),
                    ValueMember = "UserID",
                    DisplayMember = "ShortName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic,
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells,
                    MinimumWidth = 55
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn GenevaUserColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "GenevaUserColumn",
                    HeaderText = "   Женева\r\nраспечатал",
                    DataPropertyName = "GenevaUserID",
                    DataSource = new DataView(UsersDT),
                    ValueMember = "UserID",
                    DisplayMember = "ShortName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic,
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells,
                    MinimumWidth = 55
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn TafelUserColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "TafelUserColumn",
                    HeaderText = "  Тафель\r\nраспечатал",
                    DataPropertyName = "TafelUserID",
                    DataSource = new DataView(UsersDT),
                    ValueMember = "UserID",
                    DisplayMember = "ShortName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic,
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells,
                    MinimumWidth = 55
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn Profil90UserColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "Profil90UserColumn",
                    HeaderText = "   Угол 90\r\nраспечатал",
                    DataPropertyName = "Profil90UserID",
                    DataSource = new DataView(UsersDT),
                    ValueMember = "UserID",
                    DisplayMember = "ShortName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic,
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells,
                    MinimumWidth = 55
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn Profil45UserColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "Profil45UserColumn",
                    HeaderText = "   Угол 45\r\nраспечатал",
                    DataPropertyName = "Profil45UserID",
                    DataSource = new DataView(UsersDT),
                    ValueMember = "UserID",
                    DisplayMember = "ShortName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic,
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells,
                    MinimumWidth = 55
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn DominoUserColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "DominoUserColumn",
                    HeaderText = "   Домино\r\nраспечатал",
                    DataPropertyName = "DominoUserID",
                    DataSource = new DataView(UsersDT),
                    ValueMember = "UserID",
                    DisplayMember = "ShortName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic,
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells,
                    MinimumWidth = 55
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn RALUserColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "RALUserColumn",
                    HeaderText = "   RAL\r\nраспечатал",
                    DataPropertyName = "RALUserID",
                    DataSource = new DataView(UsersDT),
                    ValueMember = "UserID",
                    DisplayMember = "ShortName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic,
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells,
                    MinimumWidth = 55
                };
                return Column;
            }
        }

        public void RefreshMegaBatches(int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            string WorkAssignment = "ProfilWorkAssignmentID=";
            DataTable DT = new DataTable();
            if (FactoryID == 2)
                WorkAssignment = "TPSWorkAssignmentID=";
            SelectCommand = @"SELECT * FROM MegaBatch WHERE MegaBatchID IN (SELECT MegaBatchID FROM Batch WHERE " + WorkAssignment + WorkAssignmentID + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            MegaBatchesDT.Clear();
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = MegaBatchesDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["Group"] = "З";
                NewRow["GroupType"] = 0;
                MegaBatchesDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = MegaBatchesDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["Group"] = "М";
                NewRow["GroupType"] = 1;
                MegaBatchesDT.Rows.Add(NewRow);
            }
        }

        public void RefreshBatches(int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            string WorkAssignment = "ProfilWorkAssignmentID=";
            DataTable DT = new DataTable();
            if (FactoryID == 2)
                WorkAssignment = "TPSWorkAssignmentID=";
            SelectCommand = @"SELECT * FROM Batch WHERE " + WorkAssignment + WorkAssignmentID ;
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            BatchesDT.Clear();
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = BatchesDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                BatchesDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = BatchesDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                BatchesDT.Rows.Add(NewRow);
            }
        }

        public void FilterBatchesByMegaBatch(int GroupType, int MegaBatchID)
        {
            BatchesBS.Filter = "GroupType=" + GroupType + " AND MegaBatchID=" + MegaBatchID;
        }

        public void SetName(int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            string WorkAssignment = "ProfilWorkAssignmentID=";
            //DataTable TempDT = new DataTable();

            if (FactoryID == 2)
                WorkAssignment = "TPSWorkAssignmentID=";
            SelectCommand = @"SELECT * FROM Batch WHERE " + WorkAssignment + WorkAssignmentID;
            string name = string.Empty;
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    //using (DataView DV = new DataView(DT))
                    //{
                    //    TempDT = DV.ToTable(true, new string[] { "MegaBatchID" });
                    //}
                    //foreach (DataRow item in TempDT.Rows)
                    //{
                    //    name += "М(" + item["MegaBatchID"].ToString() + "-";
                    //    DataRow[] rows = DT.Select("MegaBatchID=" + item["MegaBatchID"]);
                    //    foreach (DataRow item1 in rows)
                    //        name += item1["BatchID"].ToString() + ",";
                    //    if (name.Length > 0)
                    //        name = name.Substring(0, name.Length - 1);
                    //    name += ")+";
                    //}
                    foreach (DataRow item in DT.Rows)
                        name += "М(" + item["MegaBatchID"].ToString() + "," + item["BatchID"].ToString() + ")+";
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    foreach (DataRow item in DT.Rows)
                        name += "З(" + item["MegaBatchID"].ToString() + "," + item["BatchID"].ToString() + ")+";
                }
            }
            if (name.Length > 0)
                name = name.Substring(0, name.Length - 1);
            DataRow[] Rows = WorkAssignmentsDT.Select("WorkAssignmentID = " + WorkAssignmentID);
            if (Rows.Count() > 0)
                Rows[0]["Name"] = name;
            //TempDT.Dispose();
        }

        public void CreateWorkAssignment(string Name, int FactoryID)
        {
            DataRow NewRow = WorkAssignmentsDT.NewRow();
            NewRow["CreationDateTime"] = Security.GetCurrentDate();
            NewRow["Name"] = Name;
            NewRow["FactoryID"] = FactoryID;
            WorkAssignmentsDT.Rows.Add(NewRow);
        }

        //public void SetPrintDateTime(int WorkAssignmentID)
        //{
        //    DataRow[] Rows = WorkAssignmentsDT.Select("WorkAssignmentID = " + WorkAssignmentID);
        //    if (Rows.Count() > 0)
        //        Rows[0]["PrintDateTime"] = Security.GetCurrentDate();
        //}

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="WorkAssignmentID"></param>
        /// <param name="PrintingStatus">0 - not printed, 1 - partially printed, 2 - all printed</param>
        public void SetPrintDateTime(int Type, int WorkAssignmentID)
        {
            DataRow[] Rows = WorkAssignmentsDT.Select("WorkAssignmentID = " + WorkAssignmentID);
            if (Rows.Count() > 0)
            {
                if (Type == 1)
                {
                    Rows[0]["TPS45DateTime"] = Security.GetCurrentDate();
                    Rows[0]["TPS45UserID"] = Security.CurrentUserID;
                }
                if (Type == 2)
                {
                    Rows[0]["GenevaDateTime"] = Security.GetCurrentDate();
                    Rows[0]["GenevaUserID"] = Security.CurrentUserID;
                }
                if (Type == 3)
                {
                    Rows[0]["TafelDateTime"] = Security.GetCurrentDate();
                    Rows[0]["TafelUserID"] = Security.CurrentUserID;
                }
                if (Type == 4)
                {
                    Rows[0]["Profil90DateTime"] = Security.GetCurrentDate();
                    Rows[0]["Profil90UserID"] = Security.CurrentUserID;
                }
                if (Type == 5)
                {
                    Rows[0]["Profil45DateTime"] = Security.GetCurrentDate();
                    Rows[0]["Profil45UserID"] = Security.CurrentUserID;
                }
                if (Type == 6)
                {
                    Rows[0]["DominoDateTime"] = Security.GetCurrentDate();
                    Rows[0]["DominoUserID"] = Security.CurrentUserID;
                }
                if (Type == 7)
                {
                    Rows[0]["RALDateTime"] = Security.GetCurrentDate();
                    Rows[0]["RALUserID"] = Security.CurrentUserID;
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="WorkAssignmentID"></param>
        /// <param name="PrintingStatus">0 - not printed, 1 - partially printed, 2 - all printed</param>
        public void SetPrintingStatus(int WorkAssignmentID, int FactoryID)
        {
            int PrintingStatus = 0;
            DataRow[] Rows = WorkAssignmentsDT.Select("WorkAssignmentID = " + WorkAssignmentID);
            if (Rows.Count() > 0)
            {
                //if (FactoryID == 2)
                //{
                //    PrintingStatus = IsTPS45Printed(WorkAssignmentID);
                //    Rows[0]["TPS45PrintingStatus"] = PrintingStatus;
                //    PrintingStatus = IsGenevaPrinted(WorkAssignmentID);
                //    Rows[0]["GenevaPrintingStatus"] = PrintingStatus;
                //    PrintingStatus = IsTafelPrinted(WorkAssignmentID);
                //    Rows[0]["TafelPrintingStatus"] = PrintingStatus;
                //}
                if (FactoryID == 1)
                {
                    PrintingStatus = IsProfile90Printed(WorkAssignmentID);
                    Rows[0]["Profil90PrintingStatus"] = PrintingStatus;
                    PrintingStatus = IsProfile45Printed(WorkAssignmentID);
                    Rows[0]["Profil45PrintingStatus"] = PrintingStatus;
                    PrintingStatus = IsDominoPrinted(WorkAssignmentID);
                    Rows[0]["DominoPrintingStatus"] = PrintingStatus;
                }
            }
        }

        public bool IsBatchChanged(int GroupType, int BatchID)
        {
            DataRow[] rows = WorkAssignmentsDT.Select("GroupType = " + GroupType + " AND BatchID = " + BatchID);
            if (rows.Count() > 0 && Convert.ToBoolean(rows[0]["Changed"]))
                return true;
            return false;
        }

        public void RemoveBatchFromAssignment(bool ZOV, int BatchID, int WorkAssignmentID, int FactoryID)
        {
            string OrdersConnectionString = string.Empty;
            if (ZOV)
                OrdersConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            else
                OrdersConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Batch WHERE BatchID =" + BatchID, OrdersConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0)
                        {
                            for (int i = 0; i < DT.Rows.Count; i++)
                            {
                                if (FactoryID == 1)
                                    DT.Rows[i]["ProfilWorkAssignmentID"] = DBNull.Value;
                                if (FactoryID == 2)
                                    DT.Rows[i]["TPSWorkAssignmentID"] = DBNull.Value;
                            }
                            DA.Update(DT);
                        }
                    }
                }
            }
        }

        public void RemoveWorkAssignment(int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = @"SELECT * FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID;
            if (FactoryID == 2)
                SelectCommand = @"SELECT * FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID;

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0)
                        {
                            for (int i = 0; i < DT.Rows.Count; i++)
                            {
                                if (FactoryID == 1)
                                    DT.Rows[i]["ProfilWorkAssignmentID"] = DBNull.Value;
                                if (FactoryID == 2)
                                    DT.Rows[i]["TPSWorkAssignmentID"] = DBNull.Value;
                            }
                            DA.Update(DT);
                        }
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0)
                        {
                            for (int i = 0; i < DT.Rows.Count; i++)
                            {
                                if (FactoryID == 1)
                                    DT.Rows[i]["ProfilWorkAssignmentID"] = DBNull.Value;
                                if (FactoryID == 2)
                                    DT.Rows[i]["TPSWorkAssignmentID"] = DBNull.Value;
                            }
                            DA.Update(DT);
                        }
                    }
                }
            }
            SelectCommand = @"SELECT * FROM WorkAssignments WHERE WorkAssignmentID=" + WorkAssignmentID;
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0)
                        {
                            foreach (DataRow item in DT.Rows)
                                item.Delete();
                            DA.Update(DT);
                        }
                    }
                }
            }
        }

        public void SaveBatches(bool ZOV, int[] Batches, int WorkAssignmentID, int FactoryID)
        {
            string OrdersConnectionString = string.Empty;
            if (ZOV)
                OrdersConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            else
                OrdersConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Batch WHERE BatchID IN (" + string.Join(",", Batches) + ")", OrdersConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0)
                        {
                            for (int i = 0; i < DT.Rows.Count; i++)
                            {
                                if (FactoryID == 1)
                                    DT.Rows[i]["ProfilWorkAssignmentID"] = WorkAssignmentID;
                                if (FactoryID == 2)
                                    DT.Rows[i]["TPSWorkAssignmentID"] = WorkAssignmentID;
                            }
                            DA.Update(DT);
                        }
                    }
                }
            }
        }

        public void SaveWorkAssignments()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM WorkAssignments",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    DA.Update(WorkAssignmentsDT);
                }
            }
        }

        public int UpdateWorkAssignments(int FactoryID)
        {
            int MaxWorkAssignmentID = 0;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM WorkAssignments WHERE FactoryID = " + FactoryID + " ORDER BY WorkAssignmentID DESC",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                WorkAssignmentsDT.Clear();
                DA.Fill(WorkAssignmentsDT);
            }
            if (WorkAssignmentsDT.Rows.Count > 0 && WorkAssignmentsDT.Rows[0]["WorkAssignmentID"] != DBNull.Value)
                MaxWorkAssignmentID = Convert.ToInt32(WorkAssignmentsDT.Rows[0]["WorkAssignmentID"]);
            return MaxWorkAssignmentID;
        }

        public void CalculateSquare(int WorkAssignmentID, int FactoryID)
        {
            decimal Square = 0;
            string SelectCommand = @"SELECT SUM(Square) As Square FROM FrontsOrders
                WHERE FactoryID=" + FactoryID + @" AND MainOrderID IN
                (SELECT MainOrderID FROM BatchDetails WHERE FactoryID=" + FactoryID + " AND BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT SUM(Square) As Square FROM FrontsOrders
                    WHERE FactoryID=" + FactoryID + @" AND MainOrderID IN
                    (SELECT MainOrderID FROM BatchDetails WHERE FactoryID=" + FactoryID + " AND BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";
            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0 && DT.Rows[0]["Square"] != DBNull.Value)
                    {
                        Square += Decimal.Round(Convert.ToDecimal(DT.Rows[0]["Square"]), 2, MidpointRounding.AwayFromZero);
                    }
                }
            }
            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0 && DT.Rows[0]["Square"] != DBNull.Value)
                    {
                        Square += Decimal.Round(Convert.ToDecimal(DT.Rows[0]["Square"]), 2, MidpointRounding.AwayFromZero);
                    }
                }
            }
            DataRow[] Rows = WorkAssignmentsDT.Select("WorkAssignmentID = " + WorkAssignmentID);
            if (Rows.Count() > 0)
                Rows[0]["Square"] = Square;
        }

        public void MoveToWorkAssignment(int WorkAssignmentID)
        {
            WorkAssignmentsBS.Position = WorkAssignmentsBS.Find("WorkAssignmentID", WorkAssignmentID);
        }

        public void SetInProduction(int WorkAssignmentID, int FactoryID)
        {
            DateTime CurrentDate = Security.GetCurrentDate();
            string SelectCommand = @"SELECT MainOrderID, MegaOrderID, ProfilProductionDate, ProfilProductionUserID, ProfilProductionStatusID FROM MainOrders
                    WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";

            if (FactoryID == 2)
                SelectCommand = @"SELECT MainOrderID, MegaOrderID, TPSProductionDate, TPSProductionUserID, TPSProductionStatusID FROM MainOrders
                    WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0)
                        {
                            int[] MegaOrders = new int[DT.Rows.Count];
                            for (int i = 0; i < DT.Rows.Count; i++)
                            {
                                MegaOrders[i] = Convert.ToInt32(DT.Rows[i]["MegaOrderID"]);
                                if (FactoryID == 1)
                                {
                                    DT.Rows[i]["ProfilProductionStatusID"] = 2;
                                    DT.Rows[i]["ProfilProductionDate"] = CurrentDate;
                                    DT.Rows[i]["ProfilProductionUserID"] = Security.CurrentUserID;
                                }

                                if (FactoryID == 2)
                                {
                                    DT.Rows[i]["TPSProductionStatusID"] = 2;
                                    DT.Rows[i]["TPSProductionDate"] = CurrentDate;
                                    DT.Rows[i]["TPSProductionUserID"] = Security.CurrentUserID;
                                }
                            }
                            DA.Update(DT);
                            MegaOrders = MegaOrders.Distinct<int>().ToArray<int>();
                            for (int i = 0; i < MegaOrders.Count(); i++)
                            {
                                CheckOrdersStatus.SetMegaOrderStatus(MegaOrders[i]);
                            }
                        }
                    }
                }
            }
            SelectCommand = @"SELECT MainOrderID, MegaOrderID, ProfilProductionDate, ProfilProductionUserID, ProfilProductionStatusID FROM NewMainOrders
                    WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";

            if (FactoryID == 2)
                SelectCommand = @"SELECT MainOrderID, MegaOrderID, TPSProductionDate, TPSProductionUserID, TPSProductionStatusID FROM NewMainOrders
                    WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0)
                        {
                            int[] MegaOrders = new int[DT.Rows.Count];
                            for (int i = 0; i < DT.Rows.Count; i++)
                            {
                                MegaOrders[i] = Convert.ToInt32(DT.Rows[i]["MegaOrderID"]);
                                if (FactoryID == 1)
                                {
                                    DT.Rows[i]["ProfilProductionStatusID"] = 2;
                                    DT.Rows[i]["ProfilProductionDate"] = CurrentDate;
                                    DT.Rows[i]["ProfilProductionUserID"] = Security.CurrentUserID;
                                }

                                if (FactoryID == 2)
                                {
                                    DT.Rows[i]["TPSProductionStatusID"] = 2;
                                    DT.Rows[i]["TPSProductionDate"] = CurrentDate;
                                    DT.Rows[i]["TPSProductionUserID"] = Security.CurrentUserID;
                                }
                            }
                            DA.Update(DT);
                            MegaOrders = MegaOrders.Distinct<int>().ToArray<int>();
                            for (int i = 0; i < MegaOrders.Count(); i++)
                            {
                                CheckOrdersStatus.SetMegaOrderStatus(MegaOrders[i]);
                            }
                        }
                    }
                }
            }
            SelectCommand = @"SELECT MainOrderID, MegaOrderID, ProfilProductionDate, ProfilProductionUserID, ProfilProductionStatusID FROM MainOrders
                    WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";

            if (FactoryID == 2)
                SelectCommand = @"SELECT MainOrderID, MegaOrderID, TPSProductionDate, TPSProductionUserID, TPSProductionStatusID FROM MainOrders
                    WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0)
                        {
                            for (int i = 0; i < DT.Rows.Count; i++)
                            {
                                if (FactoryID == 1)
                                {
                                    DT.Rows[i]["ProfilProductionStatusID"] = 2;
                                    DT.Rows[i]["ProfilProductionDate"] = CurrentDate;
                                    DT.Rows[i]["ProfilProductionUserID"] = Security.CurrentUserID;
                                }

                                if (FactoryID == 2)
                                {
                                    DT.Rows[i]["TPSProductionStatusID"] = 2;
                                    DT.Rows[i]["TPSProductionDate"] = CurrentDate;
                                    DT.Rows[i]["TPSProductionUserID"] = Security.CurrentUserID;
                                }
                            }
                            DA.Update(DT);
                        }
                    }
                }
            }
        }

        public void PrintAssignment(int WorkAssignmentID, DataTable FrontsDT)
        {
            DateTime CurrentDate = Security.GetCurrentDate();
            string SelectCommand = @"SELECT * FROM AssignmentsInWork WHERE WorkAssignmentID=" + WorkAssignmentID;

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);
                        for (int i = 0; i < FrontsDT.Rows.Count; i++)
                        {
                            DataRow NewRow = DT.NewRow();
                            NewRow["WorkAssignmentID"] = WorkAssignmentID;
                            NewRow["PrintDateTime"] = CurrentDate;
                            NewRow["UserID"] = Security.CurrentUserID;
                            NewRow["FrontID"] = FrontsDT.Rows[i]["FrontID"];
                            DT.Rows.Add(NewRow);
                        }
                        DA.Update(DT);
                    }
                }
            }
        }

        public int IsProfile45Printed(int WorkAssignmentID)
        {
            int Count = 0;
            int PrintingStatus = 0;
            int[] FrontsID = new int[27];
            FrontsID[0] = Convert.ToInt32(Fronts.Antalia);
            FrontsID[1] = Convert.ToInt32(Fronts.Venecia);
            FrontsID[2] = Convert.ToInt32(Fronts.Leon);
            FrontsID[3] = Convert.ToInt32(Fronts.Limog);
            FrontsID[4] = Convert.ToInt32(Fronts.Luk);
            FrontsID[5] = Convert.ToInt32(Fronts.LukPVH);
            FrontsID[6] = Convert.ToInt32(Fronts.Milano);
            FrontsID[7] = Convert.ToInt32(Fronts.Praga);
            FrontsID[8] = Convert.ToInt32(Fronts.Sigma);
            FrontsID[9] = Convert.ToInt32(Fronts.Fat);
            FrontsID[10] = Convert.ToInt32(Fronts.ep216);
            FrontsID[11] = Convert.ToInt32(Fronts.TechnoN);
            FrontsID[12] = Convert.ToInt32(Fronts.ep206);
            FrontsID[13] = Convert.ToInt32(Fronts.ep066Marsel4);
            FrontsID[14] = Convert.ToInt32(Fronts.ep018Marsel1);
            FrontsID[15] = Convert.ToInt32(Fronts.ep043Shervud);
            FrontsID[16] = Convert.ToInt32(Fronts.epsh406Techno4);
            FrontsID[17] = Convert.ToInt32(Fronts.Bergamo);
            FrontsID[18] = Convert.ToInt32(Fronts.Boston);
            FrontsID[19] = Convert.ToInt32(Fronts.Nord95);
            FrontsID[20] = Convert.ToInt32(Fronts.epFox);
            FrontsID[21] = Convert.ToInt32(Fronts.ep110Jersy);
            FrontsID[22] = Convert.ToInt32(Fronts.ep041);
            FrontsID[23] = Convert.ToInt32(Fronts.ep071);
            FrontsID[24] = Convert.ToInt32(Fronts.Urban);
            FrontsID[25] = Convert.ToInt32(Fronts.Bruno);
            FrontsID[26] = Convert.ToInt32(Fronts.Alby);
            string SelectCommand = @"SELECT * FROM AssignmentsInWork WHERE WorkAssignmentID=" + WorkAssignmentID;
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable TempDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT1);
            }

            SelectCommand = @"SELECT DISTINCT FrontID FROM FrontsOrders
                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" + string.Join(",", FrontsID.OfType<int>().ToArray()) + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT2);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(TempDT);
            }
            foreach (DataRow item in TempDT.Rows)
                DT2.Rows.Add(item.ItemArray);
            using (DataView DV = new DataView(DT2.Copy()))
            {
                DT2.Clear();
                DT2 = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < DT2.Rows.Count; i++)
            {
                DataRow[] rows = DT1.Select("FrontID=" + DT2.Rows[i]["FrontID"]);
                if (rows.Count() > 0)
                    Count++;
            }
            if (Count == 0)
                PrintingStatus = 0;
            if (Count < DT2.Rows.Count)
                PrintingStatus = 1;
            if (Count == DT2.Rows.Count)
                PrintingStatus = 2;
            if (DT2.Rows.Count == 0)
                PrintingStatus = -1;
            return PrintingStatus;
        }

        public int IsProfile90Printed(int WorkAssignmentID)
        {
            int Count = 0;
            int PrintingStatus = 0;
            int[] FrontsID = new int[16];
            FrontsID[0] = Convert.ToInt32(Fronts.Marsel1);
            FrontsID[1] = Convert.ToInt32(Fronts.Marsel3);
            FrontsID[2] = Convert.ToInt32(Fronts.Techno1);
            FrontsID[3] = Convert.ToInt32(Fronts.Techno2);
            FrontsID[4] = Convert.ToInt32(Fronts.Techno4);
            //FrontsID[5] = Convert.ToInt32(Fronts.Techno4Mega);
            FrontsID[5] = Convert.ToInt32(Fronts.Techno5);
            FrontsID[6] = Convert.ToInt32(Fronts.PR1);
            FrontsID[7] = Convert.ToInt32(Fronts.PR3);
            FrontsID[8] = Convert.ToInt32(Fronts.PRU8);
            FrontsID[9] = Convert.ToInt32(Fronts.Marsel4);
            FrontsID[10] = Convert.ToInt32(Fronts.Shervud);
            FrontsID[11] = Convert.ToInt32(Fronts.Marsel5);
            FrontsID[12] = Convert.ToInt32(Fronts.pFox);
            FrontsID[13] = Convert.ToInt32(Fronts.Jersy110);
            FrontsID[14] = Convert.ToInt32(Fronts.Porto);
            FrontsID[15] = Convert.ToInt32(Fronts.Monte);
            string SelectCommand = @"SELECT * FROM AssignmentsInWork WHERE WorkAssignmentID=" + WorkAssignmentID;
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable TempDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT1);
            }

            SelectCommand = @"SELECT DISTINCT FrontID FROM FrontsOrders
                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" + string.Join(",", FrontsID.OfType<int>().ToArray()) + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT2);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(TempDT);
            }
            foreach (DataRow item in TempDT.Rows)
                DT2.Rows.Add(item.ItemArray);
            using (DataView DV = new DataView(DT2.Copy()))
            {
                DT2.Clear();
                DT2 = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < DT2.Rows.Count; i++)
            {
                DataRow[] rows = DT1.Select("FrontID=" + DT2.Rows[i]["FrontID"]);
                if (rows.Count() > 0)
                    Count++;
            }
            if (Count == 0)
                PrintingStatus = 0;
            if (Count < DT2.Rows.Count)
                PrintingStatus = 1;
            if (Count == DT2.Rows.Count)
                PrintingStatus = 2;
            if (DT2.Rows.Count == 0)
                PrintingStatus = -1;
            return PrintingStatus;
        }

        public int IsDominoPrinted(int WorkAssignmentID)
        {
            int PrintingStatus = 0;
//            int[] FrontsID = new int[1];
//            FrontsID[0] = Convert.ToInt32(Fronts.Techno4Domino);
//            string SelectCommand = @"SELECT * FROM AssignmentsInWork WHERE WorkAssignmentID=" + WorkAssignmentID;
//            DataTable DT1 = new DataTable();
//            DataTable DT2 = new DataTable();
//            DataTable TempDT = new DataTable();
//            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
//            {
//                DA.Fill(DT1);
//            }

//            SelectCommand = @"SELECT DISTINCT FrontID FROM FrontsOrders
//                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
//                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
//                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
//                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
//                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" + string.Join(",", FrontsID.OfType<int>().ToArray()) + ")";

//            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
//                ConnectionStrings.MarketingOrdersConnectionString))
//            {
//                DA.Fill(DT2);
//            }

//            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
//                ConnectionStrings.ZOVOrdersConnectionString))
//            {
//                DA.Fill(TempDT);
//            }
//            foreach (DataRow item in TempDT.Rows)
//                DT2.Rows.Add(item.ItemArray);
//            using (DataView DV = new DataView(DT2.Copy()))
//            {
//                DT2.Clear();
//                DT2 = DV.ToTable(true, new string[] { "FrontID" });
//            }

//            for (int i = 0; i < DT2.Rows.Count; i++)
//            {
//                DataRow[] rows = DT1.Select("FrontID=" + DT2.Rows[i]["FrontID"]);
//                if (rows.Count() > 0)
//                    Count++;
//            }
//            if (Count == 0)
//                PrintingStatus = 0;
//            if (Count < DT2.Rows.Count)
//                PrintingStatus = 1;
//            if (Count == DT2.Rows.Count)
//                PrintingStatus = 2;
//            if (DT2.Rows.Count == 0)
//                PrintingStatus = -1;
            return PrintingStatus;
        }

        public int IsTPS45Printed(int WorkAssignmentID)
        {
            int Count = 0;
            int PrintingStatus = 0;
            int[] FrontsID = new int[13];
            FrontsID[0] = Convert.ToInt32(Fronts.KansasPat);
            FrontsID[1] = Convert.ToInt32(Fronts.Turin1);
            FrontsID[2] = Convert.ToInt32(Fronts.Turin3);
            FrontsID[3] = Convert.ToInt32(Fronts.LeonTPS);
            FrontsID[4] = Convert.ToInt32(Fronts.Sofia);
            FrontsID[5] = Convert.ToInt32(Fronts.InfinitiPat);
            FrontsID[6] = Convert.ToInt32(Fronts.Lorenzo);
            FrontsID[7] = Convert.ToInt32(Fronts.Dakota);
            FrontsID[8] = Convert.ToInt32(Fronts.DakotaPat);
            FrontsID[9] = Convert.ToInt32(Fronts.Turin1_1);
            FrontsID[10] = Convert.ToInt32(Fronts.Kansas);
            FrontsID[11] = Convert.ToInt32(Fronts.Infiniti);
            FrontsID[12] = Convert.ToInt32(Fronts.Elegant);
            string SelectCommand = @"SELECT * FROM AssignmentsInWork WHERE WorkAssignmentID=" + WorkAssignmentID;
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable TempDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT1);
            }

            SelectCommand = @"SELECT DISTINCT FrontID FROM FrontsOrders
                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" + string.Join(",", FrontsID.OfType<int>().ToArray()) + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT2);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(TempDT);
            }
            foreach (DataRow item in TempDT.Rows)
                DT2.Rows.Add(item.ItemArray);
            using (DataView DV = new DataView(DT2.Copy()))
            {
                DT2.Clear();
                DT2 = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < DT2.Rows.Count; i++)
            {
                DataRow[] rows = DT1.Select("FrontID=" + DT2.Rows[i]["FrontID"]);
                if (rows.Count() > 0)
                    Count++;
            }
            if (Count == 0)
                PrintingStatus = 0;
            if (Count < DT2.Rows.Count)
                PrintingStatus = 1;
            if (Count == DT2.Rows.Count)
                PrintingStatus = 2;
            if (DT2.Rows.Count == 0)
                PrintingStatus = -1;
            return PrintingStatus;
        }

        public int IsGenevaPrinted(int WorkAssignmentID)
        {
            int Count = 0;
            int PrintingStatus = 0;

            string SelectCommand = @"SELECT * FROM AssignmentsInWork WHERE WorkAssignmentID=" + WorkAssignmentID;
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable TempDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT1);
            }

            SelectCommand = @"SELECT DISTINCT FrontID FROM FrontsOrders
                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (1975,1976,1977,1978,15760, 3737, 16269,30364,30366,30367,28945,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,15108,27914)";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT2);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(TempDT);
            }
            foreach (DataRow item in TempDT.Rows)
                DT2.Rows.Add(item.ItemArray);
            using (DataView DV = new DataView(DT2.Copy()))
            {
                DT2.Clear();
                DT2 = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < DT2.Rows.Count; i++)
            {
                DataRow[] rows = DT1.Select("FrontID=" + DT2.Rows[i]["FrontID"]);
                if (rows.Count() > 0)
                    Count++;
            }
            if (Count == 0)
                PrintingStatus = 0;
            if (Count < DT2.Rows.Count)
                PrintingStatus = 1;
            if (Count == DT2.Rows.Count)
                PrintingStatus = 2;
            if (DT2.Rows.Count == 0)
                PrintingStatus = -1;
            return PrintingStatus;
        }

        public int IsTafelPrinted(int WorkAssignmentID)
        {
            int Count = 0;
            int PrintingStatus = 0;
            int[] FrontsID = new int[3];
            FrontsID[0] = Convert.ToInt32(Fronts.Tafel3);
            FrontsID[1] = Convert.ToInt32(Fronts.Tafel2);
            FrontsID[2] = Convert.ToInt32(Fronts.Tafel3Gl);
            string SelectCommand = @"SELECT * FROM AssignmentsInWork WHERE WorkAssignmentID=" + WorkAssignmentID;
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable TempDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT1);
            }

            SelectCommand = @"SELECT DISTINCT FrontID FROM FrontsOrders
                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" + string.Join(",", FrontsID.OfType<int>().ToArray()) + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT2);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(TempDT);
            }
            foreach (DataRow item in TempDT.Rows)
                DT2.Rows.Add(item.ItemArray);
            using (DataView DV = new DataView(DT2.Copy()))
            {
                DT2.Clear();
                DT2 = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < DT2.Rows.Count; i++)
            {
                DataRow[] rows = DT1.Select("FrontID=" + DT2.Rows[i]["FrontID"]);
                if (rows.Count() > 0)
                    Count++;
            }
            if (Count == 0)
                PrintingStatus = 0;
            if (Count < DT2.Rows.Count)
                PrintingStatus = 1;
            if (Count == DT2.Rows.Count)
                PrintingStatus = 2;
            if (DT2.Rows.Count == 0)
                PrintingStatus = -1;
            return PrintingStatus;
        }

        public bool IsM1(int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = @"SELECT ClientID FROM MegaOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MainOrders
                    WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")))";

            if (FactoryID == 2)
                SelectCommand = @"SELECT ClientID FROM MegaOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MainOrders
                    WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + ")))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    if (DA.Fill(DT) > 0)
                    {
                        if (DT.Rows[0]["ClientID"] != DBNull.Value && Convert.ToInt32(DT.Rows[0]["ClientID"]) == 101)
                            return true;
                    }
                }
            }
            return false;
        }
    }





    public enum Fronts
    {
        Jersy110 = 29998,
        ep110Jersy = 29996,

        ep066Marsel4 = 28919,
        ep018Marsel1 = 28918,
        ep043Shervud = 28920,
        Urban = 30008,
        Alby = 30038,
        Bruno = 30037,
        epsh406Techno4 = 28917,

        Dakota = 28921,
        DakotaPat = 28922,
        Bergamo = 28963,

        ep041 = 29719,
        ep071 = 29941,
        ep206 = 4311,
        ep216 = 15534,

        Boston = 28968,
        Marsel5 = 28965,

        Porto = 30214,
        Monte = 30009,

        Antalia = 2355,
        Nord95 = 29844,
        epFox = 29845,
        Venecia = 2353,
        Leon = 2348,
        Limog = 3641,
        Luk = 2344,
        LukPVH = 3635,
        Milano = 3636,
        Praga = 2352,
        Sigma = 3637,
        Fat = 2346,
        TechnoN = 3638,

        Shervud = 28791,

        Techno1 = 3625,
        Techno2 = 3626,
        Techno4 = 3627,
        pFox = 29846,
        Techno5 = 3628,
        Marsel1 = 3629,
        Marsel3 = 3630,
        Marsel4 = 15003,
        PR1 = 3631,
        PR2 = 3632,
        PR3 = 3623,
        PRU8 = 3624,
        Infiniti = 15032,
        InfinitiPat = 3634,

        Tafel1_19 = 16579,
        Tafel1Gl_19 = 16580,
        Tafel1_16 = 29277,
        Tafel1Gl_16 = 29278,
        Tafel1R1 = 16581,
        Tafel1R1Gl = 16582,
        Tafel1R2 = 16583,
        Tafel1R2Gl = 16584,

        Lorenzo = 15450,
        Elegant = 30005,
        Kansas = 3760,
        KansasPat = 3577,
        Sofia = 3415,
        Tafel2 = 3662,
        Tafel3 = 3663,
        Tafel3Gl = 3664,
        Turin1 = 3419,
        Turin1_1 = 4388,
        LeonTPS = 27920,
        Turin3 = 3633
    }

    public enum Machines
    {
        No_machine = 0,
        Balistrini = 1,
        ELME = 2,
        Rapid = 3
    }

    public enum FrontMargins
    {
        TechnoNWidth = 280,
        BergamoWidth = 150,
        ep041Width = 200,
        ep071Width = 170,
        ep206Width = 130,
        ep216Width = 130,
        BostonWidth = 100,
        AntaliaWidth = 120,
        Nord95Width = 110,
        epFoxWidth = 110,
        VeneciaWidth = 150,
        LeonWidth = 120,
        LimogWidth = 128,
        epsh406Techno4Width = 82,
        ep066Marsel4Width = 118,
        ep110JersyWidth = 118,
        ep043ShervudWidth = 138,
        UrbanWidth = 136,
        AlbyWidth = 110,
        BrunoWidth = 190,
        ep018Marsel1Width = 138,
        LukWidth = 120,
        MilanoWidth = 120,
        PragaWidth = 120,
        SigmaWidth = 120,
        FatWidth = 156,
        
        TechnoNMargin = 99,
        BergamoMargin = 138,
        ep041Margin = 178,
        ep071Margin = 158,
        ep206Margin = 102,
        ep216Margin = 108,
        BergamoNarrowMargin = 98,
        BostonMargin = 28,
        AntaliaMargin = 110,
        Nord95Margin = 32,
        epFoxMargin = 88,
        VeneciaMargin = 140,
        LeonMargin = 110,
        LimogMargin = 125,
        epsh406Techno4Margin = 82,
        ep066Marsel4Margin = 118,
        ep110JersyMargin = 118,
        ep043ShervudMargin = 138,
        UrbanMargin = 114,
        AlbyMargin = 89,
        BrunoMargin = 169,
        ep018Marsel1Margin = 138,
        LukMargin = 110,
        MilanoMargin = 110,
        PragaMargin = 110,
        SigmaMargin = 48,
        FatMargin = 146,

        Marsel1Height = 175,

        Marsel5Height = 180,
        PortoHeight = 159,
        MonteHeight = 119,
        Marsel3Height = 209,
        Marsel4Height = 139,
        Marsel4Height1 = 146,
        Jersy110Height = 139,
        Jersy110Height1 = 146,
        ShervudHeight = 110,
        pFoxHeight = 100,
        Techno1Height = 153,
        Techno2Height = 123,
        Techno4Height = 171,
        Techno4NarrowHeight = 101,
        Techno5Height = 209,

        Marsel1Width = 108,
        Marsel5Width = 148,
        PortoWidth = 130,
        MonteWidth = 88,
        Marsel3Width = 148,
        Marsel4Width = 108,
        Jersy110Width = 108,
        ShervudWidth = 100,
        pFoxWidth = 100,
        Techno1Width = 151,
        Techno2Width = 121,
        Techno4Width = 171,
        Techno4NarrowWidth = 101,
        Techno5Width = 201,

        Marsel1InsetHeight = 138,
        Marsel5InsetHeight = 158,
        PortoInsetHeight = 140,
        MonteInsetHeight = 98,
        Marsel3InsetHeight = 178,
        Marsel3InsetImpostHeight = 133,
        //изменил здесь, было Marsel4InsetHeight = 120
        Marsel4BoxInsetHeight = 118,
        Marsel4InsetHeight = 118,
        Marsel4InsetImpostHeight = 87,
        Jersy110BoxInsetHeight = 118,
        Jersy110InsetHeight = 118,
        ShervudInsetHeight = 88,
        pFoxInsetHeight = 88,
        Techno1InsetHeight = 133,
        Techno2InsetHeight = 110,
        PR3InsetHeight = 106,
        Techno4InsetHeight = 152,
        Techno4NarrowInsetHeight = 84,
        Techno5InsetHeight = 183,
        LuxInsetHeight = 176,
        MegaInsetHeight = 176,

        Marsel1InsetWidth = 138,
        Marsel5InsetWidth = 158,
        PortoInsetWidth = 140,
        MonteInsetWidth = 98,
        Marsel3InsetWidth = 178,
        Marsel3InsetImpostWidth = 178,
        Marsel4InsetWidth = 118,
        Marsel4InsetImpostWidth = 118,
        Jersy110InsetWidth = 118,
        ShervudInsetWidth = 138,
        pFoxInsetWidth = 88,
        Techno1InsetWidth = 133,
        Techno2InsetWidth = 103,
        Techno4InsetWidth = 152,
        Techno4NarrowInsetWidth = 84,
        Techno5InsetWidth = 183,
        LuxInsetWidth = 176,
        MegaInsetWidth = 176,

        LorenzoSimpleInsetHeight = 125,
        ElegantSimpleInsetHeight = 133,
        KansasSimpleInsetHeight = 127,
        SofiaSimpleInsetHeight = 127,
        DakotaSimpleInsetHeight = 113,
        Turin1SimpleInsetHeight = 127,
        Turin3SimpleInsetHeight = 127,
        LeonSimpleInsetHeight = 109,
        InfinitiSimpleInsetHeight = 134,

        LorenzoBoxInsetHeight = 99,
        ElegantBoxInsetHeight = 99,
        KansasBoxInsetHeight = 89,
        SofiaBoxInsetHeight = 99,
        DakotaBoxInsetHeight = 99,
        Turin1BoxInsetHeight = 127,
        Turin3BoxInsetHeight = 127,
        LeonBoxInsetHeight = 109,
        InfinitiBoxInsetHeight = 98,

        KansasVitrinaInsetHeight = 127,
        SofiaVitrinaInsetHeight = 127,
        DakotaVitrinaInsetHeight = 113,
        Turin1VitrinaInsetHeight = 127,
        Turin3VitrinaInsetHeight = 127,
        LeonVitrinaInsetHeight = 109,
        InfinitiVitrinaInsetHeight = 133,

        LorenzoGridInsetHeight = 125,
        ElegantGridInsetHeight = 133,
        KansasGridInsetHeight = 127,
        SofiaGridInsetHeight = 127,
        DakotaGridInsetHeight = 113,
        Turin1GridInsetHeight = 127,
        Turin3GridInsetHeight = 127,
        LeonGridInsetHeight = 109,
        InfinitiGridInsetHeight = 133,

        LorenzoSimpleInsetWidth = 125,
        ElegantSimpleInsetWidth = 133,
        KansasSimpleInsetWidth = 127,
        SofiaSimpleInsetWidth = 127,
        DakotaSimpleInsetWidth = 113,
        Turin1SimpleInsetWidth = 127,
        Turin3SimpleInsetWidth = 127,
        LeonSimpleInsetWidth = 109,
        InfinitiSimpleInsetWidth = 134,

        LorenzoBoxInsetWidth = 99,
        ElegantBoxInsetWidth = 99,
        KansasBoxInsetWidth = 89,
        SofiaBoxInsetWidth = 99,
        DakotaBoxInsetWidth = 99,
        Turin1BoxInsetWidth = 127,
        Turin3BoxInsetWidth = 127,
        LeonBoxInsetWidth = 109,
        InfinitiBoxInsetWidth = 99,

        KansasVitrinaInsetWidth = 127,
        SofiaVitrinaInsetWidth = 127,
        DakotaVitrinaInsetWidth = 113,
        Turin1VitrinaInsetWidth = 127,
        Turin3VitrinaInsetWidth = 127,
        LeonVitrinaInsetWidth = 109,
        InfinitiVitrinaInsetWidth = 133,

        LorenzoGridInsetWidth = 125,
        ElegantGridInsetWidth = 133,
        KansasGridInsetWidth = 127,
        SofiaGridInsetWidth = 127,
        DakotaGridInsetWidth = 113,
        Turin1GridInsetWidth = 127,
        Turin3GridInsetWidth = 127,
        LeonGridInsetWidth = 109,
        InfinitiGridInsetWidth = 133
    }

    public enum FrontMinSizes
    {
        //  А ещё минимальные размеры:

        //Marsel1MinHeight = 180,

        //  Marsel1MinWidth = 180,

        //  Marsel1InsetMinHeight = 22,

        //  Marsel1InsetMinWidth = 22,
        Marsel1MinHeight = 175,
        Marsel5MinHeight = 180,
        PortoMinHeight = 160,
        MonteMinHeight = 120,
        Marsel3MinHeight = 139,
        Marsel4MinHeight = 140,
        Jersy110MinHeight = 140,
        ShervudMinHeight = 152,
        pFoxMinHeight = 110,
        Techno1MinHeight = 153,
        Techno2MinHeight = 123,
        Techno4MinHeight = 171,
        Techno5MinHeight = 209,

        Marsel1MinWidth = 45,
        Marsel5MinWidth = 32,
        PortoMinWidth = 36,
        MonteMinWidth = 38,
        Marsel3MinWidth = 45,
        Marsel4MinWidth = 38,
        Jersy110MinWidth = 38,
        ShervudMinWidth = 10,
        pFoxMinWidth = 10,
        Techno1MinWidth = 10,
        Techno2MinWidth = 10,
        Techno4MinWidth = 10,
        Techno5MinWidth = 10,
        PR3MinWidth = 25,

        Marsel1InsetMinHeight = 38,
        Marsel5InsetMinHeight = 22,
        PortoInsetMinHeight = 20,
        MonteInsetMinHeight = 22,
        Marsel3InsetMinHeight = 29,
        PR1InsetMinHeight = 15,
        Marsel4InsetMinHeight = 29,
        Jersy110InsetMinHeight = 29,
        ShervudInsetMinHeight = 15,
        pFoxInsetMinHeight = 22,
        Techno1InsetMinHeight = 20,
        Techno2InsetMinHeight = 15,
        Techno4InsetMinHeight = 15,
        Techno5InsetMinHeight = 26,

        Marsel1InsetMinWidth = 15,
        Marsel5InsetMinWidth = 22,
        PortoInsetMinWidth = 26,
        MonteInsetMinWidth = 28,
        Marsel3InsetMinWidth = 15,
        PR1InsetMinWidth = 29,
        Marsel4InsetMinWidth = 26,
        Jersy110InsetMinWidth = 26,
        ShervudInsetMinWidth = 22,
        pFoxInsetMinWidth = 22,
        Techno1InsetMinWidth = 28,
        Techno2InsetMinWidth = 28,
        Techno4InsetMinWidth = 28,
        Techno5InsetMinWidth = 28
    }

    public class ProfilAngle45Assignments : IAllFrontParameterName
    {
        FileManager FM = new FileManager();
        DateTime CurrentDate;

        public DataTable FrontsDataTable = null;
        public DataTable FrameColorsDataTable = null;
        public DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        public DataTable InsetTypesDataTable = null;
        public DataTable InsetColorsDataTable = null;
        public DataTable TechnoInsetTypesDataTable = null;
        public DataTable TechnoInsetColorsDataTable = null;
        //DataTable ColorsDT;
        //DataTable FrontsDT;

        DataTable RapidDT;
        DataTable InsetDT;
        DataTable AssemblyDT;
        DataTable SummOrdersDT;
        DataTable FrontsOrdersDT;

        DataTable ProfileNamesDT;
        
        DataTable TechnoNVitrinaDT;
        DataTable TechnoNSimpleDT;
        DataTable TechnoNGridsDT;
        DataTable TechnoNOrdersDT;
        
        DataTable AntaliaVitrinaDT;
        DataTable AntaliaGridsDT;
        DataTable AntaliaSimpleDT;
        DataTable AntaliaOrdersDT;

        DataTable Nord95VitrinaDT;
        DataTable Nord95GridsDT;
        DataTable Nord95SimpleDT;
        DataTable Nord95OrdersDT;

        DataTable epFoxVitrinaDT;
        DataTable epFoxGridsDT;
        DataTable epFoxSimpleDT;
        DataTable epFoxOrdersDT;

        DataTable VeneciaVitrinaDT;
        DataTable VeneciaGridsDT;
        DataTable VeneciaSimpleDT;
        DataTable VeneciaOrdersDT;

        DataTable BergamoVitrinaDT;
        DataTable BergamoGridsDT;
        DataTable BergamoSimpleDT;
        DataTable BergamoOrdersDT;

        DataTable ep041VitrinaDT;
        DataTable ep041GridsDT;
        DataTable ep041SimpleDT;
        DataTable ep041OrdersDT;

        DataTable ep071VitrinaDT;
        DataTable ep071GridsDT;
        DataTable ep071SimpleDT;
        DataTable ep071OrdersDT;

        DataTable ep216VitrinaDT;
        DataTable ep216GridsDT;
        DataTable ep216SimpleDT;
        DataTable ep216OrdersDT;

        DataTable ep206VitrinaDT;
        DataTable ep206GridsDT;
        DataTable ep206SimpleDT;
        DataTable ep206OrdersDT;

        DataTable BostonVitrinaDT;
        DataTable BostonGridsDT;
        DataTable BostonSimpleDT;
        DataTable BostonOrdersDT;

        DataTable LeonVitrinaDT;
        DataTable LeonGridsDT;
        DataTable LeonSimpleDT;
        DataTable LeonOrdersDT;

        DataTable LimogVitrinaDT;
        DataTable LimogGridsDT;
        DataTable LimogSimpleDT;
        DataTable LimogOrdersDT;

        DataTable ep066Marsel4VitrinaDT;
        DataTable ep066Marsel4GridsDT;
        DataTable ep066Marsel4SimpleDT;
        DataTable ep066Marsel4OrdersDT;

        DataTable ep110JersyVitrinaDT;
        DataTable ep110JersyGridsDT;
        DataTable ep110JersySimpleDT;
        DataTable ep110JersyOrdersDT;

        DataTable ep018Marsel1VitrinaDT;
        DataTable ep018Marsel1GridsDT;
        DataTable ep018Marsel1SimpleDT;
        DataTable ep018Marsel1OrdersDT;

        DataTable ep043ShervudVitrinaDT;
        DataTable ep043ShervudGridsDT;
        DataTable ep043ShervudSimpleDT;
        DataTable ep043ShervudOrdersDT;

        DataTable UrbanVitrinaDT;
        DataTable UrbanGridsDT;
        DataTable UrbanSimpleDT;
        DataTable UrbanOrdersDT;

        DataTable AlbyVitrinaDT;
        DataTable AlbyGridsDT;
        DataTable AlbySimpleDT;
        DataTable AlbyOrdersDT;

        DataTable BrunoVitrinaDT;
        DataTable BrunoGridsDT;
        DataTable BrunoSimpleDT;
        DataTable BrunoOrdersDT;

        DataTable epsh406Techno4VitrinaDT;
        DataTable epsh406Techno4GridsDT;
        DataTable epsh406Techno4SimpleDT;
        DataTable epsh406Techno4OrdersDT;

        DataTable LukVitrinaDT;
        DataTable LukGridsDT;
        DataTable LukSimpleDT;
        DataTable LukOrdersDT;

        DataTable LukPVHVitrinaDT;
        DataTable LukPVHGridsDT;
        DataTable LukPVHSimpleDT;
        DataTable LukPVHOrdersDT;

        DataTable MilanoVitrinaDT;
        DataTable MilanoGridsDT;
        DataTable MilanoSimpleDT;
        DataTable MilanoOrdersDT;

        DataTable PragaVitrinaDT;
        DataTable PragaGridsDT;
        DataTable PragaSimpleDT;
        DataTable PragaOrdersDT;

        DataTable SigmaVitrinaDT;
        DataTable SigmaGridsDT;
        DataTable SigmaGlassDT;
        DataTable SigmaSimpleDT;
        DataTable SigmaOrdersDT;

        DataTable FatVitrinaDT;
        DataTable FatGridsDT;
        DataTable FatSimpleDT;
        DataTable FatOrdersDT;
        
        ArrayList FrontsID;

        public ProfilAngle45Assignments()
        {

        }

        public void Initialize()
        {
            Create();
            Fill();
        }

        private void Create()
        {
            ProfileNamesDT = new DataTable();
            
            TechnoNVitrinaDT = new DataTable();
            TechnoNGridsDT = new DataTable();
            TechnoNSimpleDT = new DataTable();
            TechnoNOrdersDT = new DataTable();
            
            AntaliaVitrinaDT = new DataTable();
            AntaliaGridsDT = new DataTable();
            AntaliaSimpleDT = new DataTable();
            AntaliaOrdersDT = new DataTable();

            Nord95VitrinaDT = new DataTable();
            Nord95GridsDT = new DataTable();
            Nord95SimpleDT = new DataTable();
            Nord95OrdersDT = new DataTable();

            epFoxVitrinaDT = new DataTable();
            epFoxGridsDT = new DataTable();
            epFoxSimpleDT = new DataTable();
            epFoxOrdersDT = new DataTable();

            VeneciaVitrinaDT = new DataTable();
            VeneciaGridsDT = new DataTable();
            VeneciaSimpleDT = new DataTable();
            VeneciaOrdersDT = new DataTable();

            BergamoVitrinaDT = new DataTable();
            BergamoGridsDT = new DataTable();
            BergamoSimpleDT = new DataTable();
            BergamoOrdersDT = new DataTable();

            ep041VitrinaDT = new DataTable();
            ep071VitrinaDT = new DataTable();
            ep206VitrinaDT = new DataTable();
            ep216VitrinaDT = new DataTable();

            ep041GridsDT = new DataTable();
            ep071GridsDT = new DataTable();
            ep206GridsDT = new DataTable();
            ep216GridsDT = new DataTable();

            ep041SimpleDT = new DataTable();
            ep071SimpleDT = new DataTable();
            ep206SimpleDT = new DataTable();
            ep216SimpleDT = new DataTable();

            ep041OrdersDT = new DataTable();
            ep071OrdersDT = new DataTable();
            ep206OrdersDT = new DataTable();
            ep216OrdersDT = new DataTable();

            BostonVitrinaDT = new DataTable();
            BostonGridsDT = new DataTable();
            BostonSimpleDT = new DataTable();
            BostonOrdersDT = new DataTable();

            LeonVitrinaDT = new DataTable();
            LeonGridsDT = new DataTable();
            LeonSimpleDT = new DataTable();
            LeonOrdersDT = new DataTable();

            LimogVitrinaDT = new DataTable();
            LimogGridsDT = new DataTable();
            LimogSimpleDT = new DataTable();
            LimogOrdersDT = new DataTable();

            ep066Marsel4VitrinaDT = new DataTable();
            ep066Marsel4GridsDT = new DataTable();
            ep066Marsel4SimpleDT = new DataTable();
            ep066Marsel4OrdersDT = new DataTable();

            ep110JersyVitrinaDT = new DataTable();
            ep110JersyGridsDT = new DataTable();
            ep110JersySimpleDT = new DataTable();
            ep110JersyOrdersDT = new DataTable();

            ep018Marsel1VitrinaDT = new DataTable();
            ep018Marsel1GridsDT = new DataTable();
            ep018Marsel1SimpleDT = new DataTable();
            ep018Marsel1OrdersDT = new DataTable();

            ep043ShervudVitrinaDT = new DataTable();
            ep043ShervudGridsDT = new DataTable();
            ep043ShervudSimpleDT = new DataTable();
            ep043ShervudOrdersDT = new DataTable();

            UrbanVitrinaDT = new DataTable();
            UrbanGridsDT = new DataTable();
            UrbanSimpleDT = new DataTable();
            UrbanOrdersDT = new DataTable();

            AlbyVitrinaDT = new DataTable();
            AlbyGridsDT = new DataTable();
            AlbySimpleDT = new DataTable();
            AlbyOrdersDT = new DataTable();

            BrunoVitrinaDT = new DataTable();
            BrunoGridsDT = new DataTable();
            BrunoSimpleDT = new DataTable();
            BrunoOrdersDT = new DataTable();

            epsh406Techno4VitrinaDT = new DataTable();
            epsh406Techno4GridsDT = new DataTable();
            epsh406Techno4SimpleDT = new DataTable();
            epsh406Techno4OrdersDT = new DataTable();

            LukVitrinaDT = new DataTable();
            LukGridsDT = new DataTable();
            LukSimpleDT = new DataTable();
            LukOrdersDT = new DataTable();

            LukPVHVitrinaDT = new DataTable();
            LukPVHGridsDT = new DataTable();
            LukPVHSimpleDT = new DataTable();
            LukPVHOrdersDT = new DataTable();

            MilanoVitrinaDT = new DataTable();
            MilanoGridsDT = new DataTable();
            MilanoSimpleDT = new DataTable();
            MilanoOrdersDT = new DataTable();

            PragaVitrinaDT = new DataTable();
            PragaGridsDT = new DataTable();
            PragaSimpleDT = new DataTable();
            PragaOrdersDT = new DataTable();

            SigmaVitrinaDT = new DataTable();
            SigmaGlassDT = new DataTable();
            SigmaGridsDT = new DataTable();
            SigmaSimpleDT = new DataTable();
            SigmaOrdersDT = new DataTable();

            FatVitrinaDT = new DataTable();
            FatGridsDT = new DataTable();
            FatSimpleDT = new DataTable();
            FatOrdersDT = new DataTable();

            RapidDT = new DataTable();
            RapidDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            RapidDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            RapidDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            RapidDT.Columns.Add(new DataColumn("BoxCount", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("VitrinaCount", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("ProfileType", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("FrontType", Type.GetType("System.Int32")));

            InsetDT = new DataTable();
            InsetDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            InsetDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("GlassCount", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("MegaCount", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("FrontID", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("InsetColorID", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("TechnoInsetColorID", Type.GetType("System.Int32")));

            AssemblyDT = new DataTable();
            AssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            AssemblyDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            FrontsOrdersDT = new DataTable();
            FrontsOrdersDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            FrontsOrdersDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            FrontsOrdersDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            FrontsOrdersDT.Columns.Add(new DataColumn("TechnoColor", Type.GetType("System.String")));
            FrontsOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            FrontsOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            FrontsOrdersDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            FrontsOrdersDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));

            SummOrdersDT = new DataTable();

            FrontsID = new ArrayList();
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable = new DataTable();
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = FrameColorsDataTable.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = FrameColorsDataTable.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            FrameColorsDataTable.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void GetInsetColorsDT()
        {
            InsetColorsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InsetColors.InsetColorID, InsetColors.GroupID, infiniu2_catalog.dbo.TechStore.TechStoreName AS InsetColorName FROM InsetColors" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON InsetColors.InsetColorID = infiniu2_catalog.dbo.TechStore.TechStoreID ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = -1;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "-";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = 0;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "на выбор";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }

            }

        }

        private void Fill()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID, infiniu2_catalog.dbo.FrontsConfig.FrontID FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.ProfileID",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(ProfileNamesDT);
            }
            string SelectCommand = @"SELECT DISTINCT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1) ORDER BY TechStoreName";
            FrontsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            PatinaDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            GetColorsDT();
            GetInsetColorsDT();
            InsetTypesDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetTypes",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }
            TechnoInsetTypesDataTable = InsetTypesDataTable.Copy();
            TechnoInsetColorsDataTable = InsetColorsDataTable.Copy();

            SelectCommand = @"SELECT TOP 0 FrontsOrders.FrontsOrdersID, FrontsOrders.MainOrderID, FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.InsetTypeID,
                FrontsOrders.ColorID, FrontsOrders.TechnoColorID, FrontsOrders.InsetColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.Count, FrontsOrders.FrontConfigID, infiniu2_catalog.dbo.FrontsConfig.ProfileID, FrontsOrders.Notes FROM FrontsOrders
                INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(LeonOrdersDT);
                LeonOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
                
                TechnoNVitrinaDT = LeonOrdersDT.Clone();
                TechnoNGridsDT = LeonOrdersDT.Clone();
                TechnoNSimpleDT = LeonOrdersDT.Clone();
                TechnoNOrdersDT = LeonOrdersDT.Clone();
                
                AntaliaVitrinaDT = LeonOrdersDT.Clone();
                AntaliaGridsDT = LeonOrdersDT.Clone();
                AntaliaSimpleDT = LeonOrdersDT.Clone();
                AntaliaOrdersDT = LeonOrdersDT.Clone();

                Nord95VitrinaDT = LeonOrdersDT.Clone();
                Nord95GridsDT = LeonOrdersDT.Clone();
                Nord95SimpleDT = LeonOrdersDT.Clone();
                Nord95OrdersDT = LeonOrdersDT.Clone();

                epFoxVitrinaDT = LeonOrdersDT.Clone();
                epFoxGridsDT = LeonOrdersDT.Clone();
                epFoxSimpleDT = LeonOrdersDT.Clone();
                epFoxOrdersDT = LeonOrdersDT.Clone();

                VeneciaVitrinaDT = LeonOrdersDT.Clone();
                VeneciaGridsDT = LeonOrdersDT.Clone();
                VeneciaSimpleDT = LeonOrdersDT.Clone();
                VeneciaOrdersDT = LeonOrdersDT.Clone();

                BergamoVitrinaDT = LeonOrdersDT.Clone();
                BergamoGridsDT = LeonOrdersDT.Clone();
                BergamoSimpleDT = LeonOrdersDT.Clone();
                BergamoOrdersDT = LeonOrdersDT.Clone();

                ep041VitrinaDT = LeonOrdersDT.Clone();
                ep071VitrinaDT = LeonOrdersDT.Clone();
                ep206VitrinaDT = LeonOrdersDT.Clone();
                ep216VitrinaDT = LeonOrdersDT.Clone();

                ep041GridsDT = LeonOrdersDT.Clone();
                ep071GridsDT = LeonOrdersDT.Clone();
                ep206GridsDT = LeonOrdersDT.Clone();
                ep216GridsDT = LeonOrdersDT.Clone();

                ep041SimpleDT = LeonOrdersDT.Clone();
                ep071SimpleDT = LeonOrdersDT.Clone();
                ep206SimpleDT = LeonOrdersDT.Clone();
                ep216SimpleDT = LeonOrdersDT.Clone();

                ep041OrdersDT = LeonOrdersDT.Clone();
                ep071OrdersDT = LeonOrdersDT.Clone();
                ep206OrdersDT = LeonOrdersDT.Clone();
                ep216OrdersDT = LeonOrdersDT.Clone();

                BostonVitrinaDT = LeonOrdersDT.Clone();
                BostonGridsDT = LeonOrdersDT.Clone();
                BostonSimpleDT = LeonOrdersDT.Clone();
                BostonOrdersDT = LeonOrdersDT.Clone();

                LeonVitrinaDT = LeonOrdersDT.Clone();
                LeonGridsDT = LeonOrdersDT.Clone();
                LeonSimpleDT = LeonOrdersDT.Clone();

                LimogVitrinaDT = LeonOrdersDT.Clone();
                LimogGridsDT = LeonOrdersDT.Clone();
                LimogSimpleDT = LeonOrdersDT.Clone();
                LimogOrdersDT = LeonOrdersDT.Clone();

                ep066Marsel4VitrinaDT = LeonOrdersDT.Clone();
                ep066Marsel4GridsDT = LeonOrdersDT.Clone();
                ep066Marsel4SimpleDT = LeonOrdersDT.Clone();
                ep066Marsel4OrdersDT = LeonOrdersDT.Clone();

                ep110JersyVitrinaDT = LeonOrdersDT.Clone();
                ep110JersyGridsDT = LeonOrdersDT.Clone();
                ep110JersySimpleDT = LeonOrdersDT.Clone();
                ep110JersyOrdersDT = LeonOrdersDT.Clone();

                ep018Marsel1VitrinaDT = LeonOrdersDT.Clone();
                ep018Marsel1GridsDT = LeonOrdersDT.Clone();
                ep018Marsel1SimpleDT = LeonOrdersDT.Clone();
                ep018Marsel1OrdersDT = LeonOrdersDT.Clone();

                ep043ShervudVitrinaDT = LeonOrdersDT.Clone();
                ep043ShervudGridsDT = LeonOrdersDT.Clone();
                ep043ShervudSimpleDT = LeonOrdersDT.Clone();
                ep043ShervudOrdersDT = LeonOrdersDT.Clone();

                UrbanVitrinaDT = LeonOrdersDT.Clone();
                UrbanGridsDT = LeonOrdersDT.Clone();
                UrbanSimpleDT = LeonOrdersDT.Clone();
                UrbanOrdersDT = LeonOrdersDT.Clone();

                AlbyVitrinaDT = LeonOrdersDT.Clone();
                AlbyGridsDT = LeonOrdersDT.Clone();
                AlbySimpleDT = LeonOrdersDT.Clone();
                AlbyOrdersDT = LeonOrdersDT.Clone();

                BrunoVitrinaDT = LeonOrdersDT.Clone();
                BrunoGridsDT = LeonOrdersDT.Clone();
                BrunoSimpleDT = LeonOrdersDT.Clone();
                BrunoOrdersDT = LeonOrdersDT.Clone();

                epsh406Techno4VitrinaDT = LeonOrdersDT.Clone();
                epsh406Techno4GridsDT = LeonOrdersDT.Clone();
                epsh406Techno4SimpleDT = LeonOrdersDT.Clone();
                epsh406Techno4OrdersDT = LeonOrdersDT.Clone();

                LukVitrinaDT = LeonOrdersDT.Clone();
                LukGridsDT = LeonOrdersDT.Clone();
                LukSimpleDT = LeonOrdersDT.Clone();
                LukOrdersDT = LeonOrdersDT.Clone();

                LukPVHVitrinaDT = LeonOrdersDT.Clone();
                LukPVHGridsDT = LeonOrdersDT.Clone();
                LukPVHSimpleDT = LeonOrdersDT.Clone();
                LukPVHOrdersDT = LeonOrdersDT.Clone();

                MilanoVitrinaDT = LeonOrdersDT.Clone();
                MilanoGridsDT = LeonOrdersDT.Clone();
                MilanoSimpleDT = LeonOrdersDT.Clone();
                MilanoOrdersDT = LeonOrdersDT.Clone();

                PragaVitrinaDT = LeonOrdersDT.Clone();
                PragaGridsDT = LeonOrdersDT.Clone();
                PragaSimpleDT = LeonOrdersDT.Clone();
                PragaOrdersDT = LeonOrdersDT.Clone();

                SigmaVitrinaDT = LeonOrdersDT.Clone();
                SigmaGlassDT = LeonOrdersDT.Clone();
                SigmaGridsDT = LeonOrdersDT.Clone();
                SigmaSimpleDT = LeonOrdersDT.Clone();
                SigmaOrdersDT = LeonOrdersDT.Clone();

                FatVitrinaDT = LeonOrdersDT.Clone();
                FatGridsDT = LeonOrdersDT.Clone();
                FatSimpleDT = LeonOrdersDT.Clone();
                FatOrdersDT = LeonOrdersDT.Clone();
            }
        }

        public string GetMarketClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_marketingorders.dbo.MegaOrders" +
                    " WHERE MegaOrderID=(SELECT TOP 1 MegaOrderID FROM infiniu2_marketingorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + "))",
                    ConnectionStrings.MarketingReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        public string GetZOVClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_zovorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + ")",
                    ConnectionStrings.ZOVReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        private string GetOrderName(int MainOrderID, int GroupType)
        {
            string name = string.Empty;
            string ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            if (GroupType == 1)
                ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            SelectCommand = @"SELECT MegaBatchID, BatchID FROM Batch WHERE BatchID IN (SELECT BatchID FROM BatchDetails WHERE MainOrderID = " + MainOrderID + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                if (DA.Fill(DT) > 0 && DT.Rows[0]["MegaBatchID"] != DBNull.Value && DT.Rows[0]["BatchID"] != DBNull.Value)
                    name = DT.Rows[0]["MegaBatchID"].ToString() + ", " + DT.Rows[0]["BatchID"] + ", " + MainOrderID;
            }
            return name;
        }

        private void TotalSum(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    decimal SticksCount = 0;
                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= HeightMargin)
                        Height = HeightMargin;

                    SticksCount = (Height + 4) * Count * 2;
                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "'");
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["SticksCount"] = SticksCount;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                        rows[0]["SticksCount"] = Convert.ToDecimal(rows[0]["SticksCount"]) + SticksCount;
                }

                SizesASC = "Width ASC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    decimal SticksCount = 0;
                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    SticksCount = (Height + 4) * Count * 2;
                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "'");
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["SticksCount"] = SticksCount;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                        rows[0]["SticksCount"] = Convert.ToDecimal(rows[0]["SticksCount"]) + SticksCount;
                }
            }
        }

        private void TotalSumTechno4(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, int HeightNarrowMargin)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    decimal SticksCount = 0;
                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    SticksCount = (Height + 4) * Count * 2;
                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "'");
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["SticksCount"] = SticksCount;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                        rows[0]["SticksCount"] = Convert.ToDecimal(rows[0]["SticksCount"]) + SticksCount;
                }

                SizesASC = "Width ASC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    decimal SticksCount = 0;
                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height < HeightMargin)
                        Height = Height - HeightNarrowMargin;
                    else
                        Height = Height - WidthMargin;
                    if (Height <= WidthMin)
                        Height = WidthMin;

                    SticksCount = (Height + 4) * Count * 2;
                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "'");
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["SticksCount"] = SticksCount;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                        rows[0]["SticksCount"] = Convert.ToDecimal(rows[0]["SticksCount"]) + SticksCount;
                }
            }
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }

        public string GetFront2Name(int TechnoProfileID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + TechnoProfileID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }

        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
                ColorName = Rows[0]["ColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string FrontType = string.Empty;
            try
            {
                DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
                FrontType = Rows[0]["PatinaName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return FrontType;
        }

        public string GetInsetTypeName(int InsetTypeID)
        {
            string InsetType = string.Empty;
            try
            {
                DataRow[] Rows = InsetTypesDataTable.Select("InsetTypeID = " + InsetTypeID);
                InsetType = Rows[0]["InsetTypeName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return InsetType;
        }

        public string GetInsetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = InsetColorsDataTable.Select("InsetColorID = " + ColorID);
                ColorName = Rows[0]["InsetColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        private string ProfileName(int ID)
        {
            string name = string.Empty;
            DataRow[] rows = ProfileNamesDT.Select("FrontConfigID=" + ID);
            if (rows.Count() > 0)
                name = rows[0]["TechStoreName"].ToString();
            return name;
        }

        private void GetProfileNames(ref DataTable DestinationDT, int WorkAssignmentID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID, infiniu2_catalog.dbo.FrontsConfig.FrontID FROM infiniu2_catalog.dbo.TechStore
                INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.ProfileID AND infiniu2_catalog.dbo.FrontsConfig.FrontConfigID IN (SELECT FrontConfigID FROM FrontsOrders
                WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" +
                Convert.ToInt32(Fronts.TechnoN) + "," + 
                Convert.ToInt32(Fronts.Antalia) + "," + Convert.ToInt32(Fronts.epFox) + "," + Convert.ToInt32(Fronts.Nord95) + "," + Convert.ToInt32(Fronts.Fat) + "," + Convert.ToInt32(Fronts.Leon) + "," +
                Convert.ToInt32(Fronts.Limog) + "," +
                Convert.ToInt32(Fronts.ep066Marsel4) + "," + Convert.ToInt32(Fronts.ep110Jersy) + "," + 
                Convert.ToInt32(Fronts.ep018Marsel1) + "," + Convert.ToInt32(Fronts.ep043Shervud) + "," + 
                Convert.ToInt32(Fronts.Urban) + "," + Convert.ToInt32(Fronts.Alby) + "," + Convert.ToInt32(Fronts.Bruno) + "," + 
                Convert.ToInt32(Fronts.epsh406Techno4) + "," +
                Convert.ToInt32(Fronts.Luk) + "," + Convert.ToInt32(Fronts.LukPVH) + "," +
                Convert.ToInt32(Fronts.Milano) + "," +
                Convert.ToInt32(Fronts.Praga) + "," + Convert.ToInt32(Fronts.Sigma) + "," + Convert.ToInt32(Fronts.Venecia) + "," + Convert.ToInt32(Fronts.Bergamo) + "," +
                Convert.ToInt32(Fronts.ep041) + "," + Convert.ToInt32(Fronts.ep071) + "," + Convert.ToInt32(Fronts.ep206) + "," + Convert.ToInt32(Fronts.ep216) + "," + Convert.ToInt32(Fronts.Boston) + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetVitrinaFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID=1");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetGridFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID IN (685,686,687,688,29470,29471)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetLuxMegaPlankaFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID IN (860,862,4310)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetGlassFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID IN (2)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetSimpleFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID NOT IN (1,2,685,686,687,688,29470,29471)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetFrontsOrders(ref DataTable DestinationDT, int WorkAssignmentID, Fronts Front)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT FrontsOrders.FrontsOrdersID, FrontsOrders.MainOrderID, FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.InsetTypeID,
                FrontsOrders.ColorID, FrontsOrders.TechnoColorID, FrontsOrders.InsetColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.Count, FrontsOrders.FrontConfigID, infiniu2_catalog.dbo.FrontsConfig.ProfileID, FrontsOrders.Notes FROM FrontsOrders
                INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID
                WHERE FrontsOrders.FrontID=" + Convert.ToInt32(Front) +
                " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private DataTable DistFrameColorsTable(DataTable SourceDT, bool OrderASC)
        {
            int ColorID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["ColorID"].ToString(), out ColorID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["ColorID"] = ColorID;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "ColorID ASC";
                else
                    DV.Sort = "ColorID DESC";
                DT = DV.ToTable(true, new string[] { "ColorID" });
            }
            return DT;
        }

        private DataTable DistInsetColorsTable(DataTable SourceDT, bool OrderASC)
        {
            int InsetColorID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("InsetColorID", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                //if (Convert.ToInt32(Row["InsetTypeID"]) != 2 && Convert.ToInt32(Row["InsetTypeID"]) != 5 && Convert.ToInt32(Row["InsetTypeID"]) != 6
                //    && Convert.ToInt32(Row["InsetTypeID"]) != 9 && Convert.ToInt32(Row["InsetTypeID"]) != 10 && Convert.ToInt32(Row["InsetTypeID"]) != 11)
                //    continue;

                if (int.TryParse(Row["InsetColorID"].ToString(), out InsetColorID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["InsetColorID"] = InsetColorID;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "InsetColorID ASC";
                else
                    DV.Sort = "InsetColorID DESC";
                DT = DV.ToTable(true, new string[] { "InsetColorID" });
            }
            return DT;
        }

        private DataTable DistMainOrdersTable(DataTable SourceDT, bool OrderASC)
        {
            int MainOrderID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("MainOrderID", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "MainOrderID ASC";
                else
                    DV.Sort = "MainOrderID DESC";
                DT = DV.ToTable(true, new string[] { "MainOrderID", "GroupType" });
            }
            return DT;
        }

        private void AssemblySingly(int ColorID, DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, TechnoColorID, InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "Height", "Width" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                string Color = string.Empty;
                string InsetColor = string.Empty;
                //витрины
                DataRow[] rows = SourceDT.Select("ColorID=" + ColorID + " AND TechnoColorID=" + Convert.ToInt32(DT2.Rows[j]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                Color = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                InsetColor = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + Color;
                //int GroupID = Convert.ToInt32(ItemInsetTypesDataTable.Select("InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]))[0]["GroupID"]);
                //if (GroupID == 7 || GroupID == 8)
                //    InsetColor = "фил " + GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + Color;
                //if (GroupID == 16 || GroupID == 17)
                //    InsetColor = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " 45 " + Color;
                //if (GroupID == 18 || GroupID == 19)
                //    InsetColor = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " 90 " + Color;
                //if (GroupID == 12)
                //    InsetColor = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + Color;
                if (Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) == 1)
                    InsetColor = "Витрина";

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]));
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) != -1 && Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));
                NewRow["InsetColor"] = InsetColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }
        
        private void CollectMainOrders(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT = new DataTable();

            using (DataView DV = new DataView(SourceDT, string.Empty, "FrontID, ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT = DV.ToTable(true, new string[] { "FrontID", "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int i = 0; i < DT.Rows.Count; i++)
            {
                decimal Square = 0;
                int Count = 0;

                DataRow[] rows = SourceDT.Select("FrontID=" + Convert.ToInt32(DT.Rows[i]["FrontID"]) + " AND ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoColorID"]) +
                    " AND ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetColorID"]) +
                    " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]));
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) != -1 && Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));
                NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                if (Convert.ToInt32(rows[0]["InsetTypeID"]) == 1)
                    NewRow["InsetColor"] = "Витрина";
                //if (Convert.ToInt32(rows[0]["InsetTypeID"]) == 2)
                //    NewRow["InsetColor"] = "Стекло";
                NewRow["TechnoColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
            DestinationDT.DefaultView.Sort = "Name, FrameColor, InsetColor, TechnoColor, Height, Width";
        }

        private void CollectOrders(DataTable DistinctSizesDT, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, string FrontName)
        {
            int InsetTypeID = 0;
            string ColName = string.Empty;
            string FrameColor = string.Empty;
            string InsetColor = string.Empty;

            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();

            for (int y = 0; y < DistinctSizesDT.Rows.Count; y++)
            {
                using (DataView DV = new DataView(SourceDT))
                {
                    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                }
                for (int i = 0; i < DT1.Rows.Count; i++)
                {
                    using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), string.Empty, DataViewRowState.CurrentRows))
                    {
                        DT2 = DV.ToTable(true, new string[] { "InsetTypeID" });
                    }
                    for (int j = 0; j < DT2.Rows.Count; j++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]), string.Empty, DataViewRowState.CurrentRows))
                        {
                            DT3 = DV.ToTable(true, new string[] { "InsetColorID" });
                            for (int x = 0; x < DT3.Rows.Count; x++)
                            {
                                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                                    " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) + " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]));

                                if (rows.Count() > 0)
                                {
                                    InsetTypeID = Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]);
                                    FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                                    int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + InsetTypeID)[0]["GroupID"]);
                                    switch (GroupID)
                                    {
                                        case -1:
                                            InsetColor = "Витрина";
                                            break;
                                        case 3:
                                            InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 4:
                                            InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 7:
                                            InsetColor = "фил " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 8:
                                            InsetColor = "фил " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 16:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 17:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 18:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 19:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 12:
                                            InsetColor = "люкс " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 13:
                                            InsetColor = "мега " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        default:
                                            InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                    }

                                    ColName = FrameColor + "(" + InsetColor + ")_" + FrontType;
                                    if (!DestinationDT.Columns.Contains(ColName))
                                        DestinationDT.Columns.Add(new DataColumn(ColName, Type.GetType("System.String")));

                                    DestinationDT.Rows[0][ColName] = FrontName;

                                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                                        " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) + " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[y]["Width"]));
                                    if (Srows.Count() > 0)
                                    {
                                        int Count = 0;
                                        foreach (DataRow item in Srows)
                                            Count += Convert.ToInt32(item["Count"]);

                                        DataRow[] Drows = DestinationDT.Select("Sizes='" + DistinctSizesDT.Rows[y]["Height"].ToString() + " X " + DistinctSizesDT.Rows[y]["Width"].ToString() + "'");
                                        if (Drows.Count() == 0)
                                        {
                                            DataRow NewRow = DestinationDT.NewRow();
                                            NewRow["Sizes"] = DistinctSizesDT.Rows[y]["Height"].ToString() + " X " + DistinctSizesDT.Rows[y]["Width"].ToString();
                                            NewRow["Height"] = DistinctSizesDT.Rows[y]["Height"];
                                            NewRow["Width"] = DistinctSizesDT.Rows[y]["Width"];
                                            NewRow[ColName] = Count;
                                            DestinationDT.Rows.Add(NewRow);
                                        }
                                        else
                                        {
                                            Drows[0][ColName] = Count;
                                        }
                                    }
                                }
                                else
                                    continue;

                            }
                        }
                    }
                }
            }
        }

        private DataTable DistSizesTable(DataTable SourceDT, bool OrderASC)
        {
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                DataRow NewRow = DT.NewRow();
                NewRow["Height"] = Row["Height"];
                NewRow["Width"] = Row["Width"];
                DT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "Height ASC, Width ASC";
                else
                    DV.Sort = "Height DESC, Width DESC";
                DT = DV.ToTable(true, new string[] { "Height", "Width" });
            }
            return DT;
        }

        private DataTable DistHeightAndWidth(DataTable SourceDT, bool OrderASC)
        {
            int Height = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["Height"].ToString(), out Height))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["Height"] = Height;
                    DT.Rows.Add(NewRow);
                }
                if (int.TryParse(Row["Width"].ToString(), out Height))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["Height"] = Height;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "Height ASC";
                else
                    DV.Sort = "Height DESC";
                DT = DV.ToTable(true, new string[] { "Height" });
            }
            return DT;
        }

        public DataTable OrderedFrameColors(DataTable SourceDT)
        {
            DataTable OrderedDT = SourceDT.Copy();
            OrderedDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));

            for (int i = 0; i < OrderedDT.Rows.Count; i++)
                OrderedDT.Rows[i]["ColorName"] = GetColorName(Convert.ToInt32(OrderedDT.Rows[i]["ColorID"]));

            using (DataView DV = new DataView(OrderedDT.Copy()))
            {
                DV.Sort = "ColorName";
                OrderedDT.Clear();
                OrderedDT = DV.ToTable();
            }

            return OrderedDT;
        }

        private void RapidSimpleSingly(DataTable SourceDT, ref DataTable DestinationDT, int WidthMargin, int FrontType, string Front, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = DistHeightAndWidth(SourceDT, OrderASC);

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            DT1 = OrderedFrameColors(DT1);

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {

                        int Count = 0;
                        int BoxCount = 0;
                        int VitrinaCount = 0;
                        int Height = Convert.ToInt32(DT2.Rows[j]["Height"]);
                        //string Front = ProfileName(Convert.ToInt32(SourceDT.Rows[0]["FrontID"]));
                        string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                        string Notes = string.Empty;
                        foreach (DataRow item in Srows)
                        {
                            if (Convert.ToInt32(item["InsetTypeID"]) != 1 && (Convert.ToInt32(item["Height"]) - 10 < WidthMargin || Convert.ToInt32(item["Width"]) - 10 < WidthMargin))
                                BoxCount += Convert.ToInt32(item["Count"]);
                            if (Convert.ToInt32(item["InsetTypeID"]) == 1)
                                VitrinaCount += Convert.ToInt32(item["Count"]);
                            Count += Convert.ToInt32(item["Count"]);
                        }

                        //if (Height <= WidthMargin)
                        //    Height = WidthMargin;

                        DataRow[] rows = DestinationDT.Select("Front='" + Front + "' AND Color='" + Color + "' AND Height=" + Height);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = Front;
                            NewRow["Color"] = Color;
                            NewRow["Height"] = Height;
                            NewRow["Count"] = Count * 2;
                            NewRow["BoxCount"] = BoxCount * 2;
                            NewRow["VitrinaCount"] = VitrinaCount * 2;
                            NewRow["ProfileType"] = Convert.ToInt32(SourceDT.Rows[0]["FrontID"]);
                            NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            NewRow["FrontType"] = FrontType;
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                            rows[0]["BoxCount"] = Convert.ToInt32(rows[0]["BoxCount"]) + BoxCount * 2;
                            rows[0]["VitrinaCount"] = Convert.ToInt32(rows[0]["VitrinaCount"]) + VitrinaCount * 2;
                        }
                    }
                    Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {
                        int Count = 0;
                        int BoxCount = 0;
                        int VitrinaCount = 0;
                        int Height = Convert.ToInt32(DT2.Rows[j]["Height"]);
                        //string Front = ProfileName(Convert.ToInt32(SourceDT.Rows[0]["FrontID"]));
                        string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                        string Notes = string.Empty;
                        foreach (DataRow item in Srows)
                        {
                            if (Convert.ToInt32(item["InsetTypeID"]) != 1 && (Convert.ToInt32(item["Height"]) - 10 < WidthMargin || Convert.ToInt32(item["Width"]) - 10 < WidthMargin))
                                BoxCount += Convert.ToInt32(item["Count"]);
                            if (Convert.ToInt32(item["InsetTypeID"]) == 1)
                                VitrinaCount += Convert.ToInt32(item["Count"]);
                            Count += Convert.ToInt32(item["Count"]);
                        }

                        //if (Height <= WidthMargin)
                        //    Height = WidthMargin;

                        DataRow[] rows = DestinationDT.Select("Front='" + Front + "' AND Color='" + Color + "' AND Height=" + Height);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = Front;
                            NewRow["Color"] = Color;
                            NewRow["Height"] = Height;
                            NewRow["Count"] = Count * 2;
                            NewRow["BoxCount"] = BoxCount * 2;
                            NewRow["VitrinaCount"] = VitrinaCount * 2;
                            NewRow["ProfileType"] = Convert.ToInt32(SourceDT.Rows[0]["FrontID"]);
                            NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            NewRow["FrontType"] = FrontType;
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                            rows[0]["BoxCount"] = Convert.ToInt32(rows[0]["BoxCount"]) + BoxCount * 2;
                            rows[0]["VitrinaCount"] = Convert.ToInt32(rows[0]["VitrinaCount"]) + VitrinaCount * 2;
                        }
                    }
                }
            }
        }

        private void RapidSimpleSingly(DataTable SourceDT, ref DataTable DestinationDT, int WidthMargin, int FrontType, int ProfileType, string Front, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = DistHeightAndWidth(SourceDT, OrderASC);

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            DT1 = OrderedFrameColors(DT1);

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {

                        int Count = 0;
                        int BoxCount = 0;
                        int VitrinaCount = 0;
                        int Height = Convert.ToInt32(DT2.Rows[j]["Height"]);
                        //string Front = ProfileName(Convert.ToInt32(SourceDT.Rows[0]["FrontID"]));
                        string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                        string Notes = string.Empty;
                        foreach (DataRow item in Srows)
                        {
                            if (Convert.ToInt32(item["InsetTypeID"]) != 1 && (Convert.ToInt32(item["Height"]) - 10 < WidthMargin || Convert.ToInt32(item["Width"]) - 10 < WidthMargin))
                                BoxCount += Convert.ToInt32(item["Count"]);
                            if (Convert.ToInt32(item["InsetTypeID"]) == 1)
                                VitrinaCount += Convert.ToInt32(item["Count"]);
                            Count += Convert.ToInt32(item["Count"]);
                        }

                        //if (Height <= WidthMargin)
                        //    Height = WidthMargin;

                        DataRow[] rows = DestinationDT.Select("Front='" + Front + "' AND Color='" + Color + "' AND Height=" + Height);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = Front;
                            NewRow["Color"] = Color;
                            NewRow["Height"] = Height;
                            NewRow["Count"] = Count * 2;
                            NewRow["BoxCount"] = BoxCount * 2;
                            NewRow["VitrinaCount"] = VitrinaCount * 2;
                            NewRow["ProfileType"] = ProfileType;
                            NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            NewRow["FrontType"] = FrontType;
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                            rows[0]["BoxCount"] = Convert.ToInt32(rows[0]["BoxCount"]) + BoxCount * 2;
                            rows[0]["VitrinaCount"] = Convert.ToInt32(rows[0]["VitrinaCount"]) + VitrinaCount * 2;
                        }
                    }
                    Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {
                        int Count = 0;
                        int BoxCount = 0;
                        int VitrinaCount = 0;
                        int Height = Convert.ToInt32(DT2.Rows[j]["Height"]);
                        //string Front = ProfileName(Convert.ToInt32(SourceDT.Rows[0]["FrontID"]));
                        string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                        string Notes = string.Empty;
                        foreach (DataRow item in Srows)
                        {
                            if (Convert.ToInt32(item["InsetTypeID"]) != 1 && (Convert.ToInt32(item["Height"]) - 10 < WidthMargin || Convert.ToInt32(item["Width"]) - 10 < WidthMargin))
                                BoxCount += Convert.ToInt32(item["Count"]);
                            if (Convert.ToInt32(item["InsetTypeID"]) == 1)
                                VitrinaCount += Convert.ToInt32(item["Count"]);
                            Count += Convert.ToInt32(item["Count"]);
                        }

                        //if (Height <= WidthMargin)
                        //    Height = WidthMargin;

                        DataRow[] rows = DestinationDT.Select("Front='" + Front + "' AND Color='" + Color + "' AND Height=" + Height);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = Front;
                            NewRow["Color"] = Color;
                            NewRow["Height"] = Height;
                            NewRow["Count"] = Count * 2;
                            NewRow["BoxCount"] = BoxCount * 2;
                            NewRow["VitrinaCount"] = VitrinaCount * 2;
                            NewRow["ProfileType"] = ProfileType;
                            NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            NewRow["FrontType"] = FrontType;
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                            rows[0]["BoxCount"] = Convert.ToInt32(rows[0]["BoxCount"]) + BoxCount * 2;
                            rows[0]["VitrinaCount"] = Convert.ToInt32(rows[0]["VitrinaCount"]) + VitrinaCount * 2;
                        }
                    }
                }
            }
        }

        private void RapidGridsSingly(DataTable SourceDT, ref DataTable DestinationDT, int WidthMargin, int FrontType, string Front, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = DistHeightAndWidth(SourceDT, OrderASC);

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            DT1 = OrderedFrameColors(DT1);

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {

                        int Count = 0;
                        int Height = Convert.ToInt32(DT2.Rows[j]["Height"]);
                        //string Front = ProfileName(Convert.ToInt32(SourceDT.Rows[0]["FrontID"]));
                        string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                        string Notes = string.Empty;
                        foreach (DataRow item in Srows)
                        {
                            Count += Convert.ToInt32(item["Count"]);
                        }

                        //if (Height <= WidthMargin)
                        //    Height = WidthMargin;

                        DataRow[] rows = DestinationDT.Select("Front='" + Front + "' AND Color='" + Color + "' AND Height=" + Height);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = Front;
                            NewRow["Color"] = Color;
                            NewRow["Height"] = Height;
                            NewRow["Count"] = Count * 2;
                            NewRow["VitrinaCount"] = 0;
                            NewRow["ProfileType"] = Convert.ToInt32(SourceDT.Rows[0]["FrontID"]);
                            NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            NewRow["FrontType"] = FrontType;
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                            rows[0]["VitrinaCount"] = 0;
                        }
                    }
                    Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {
                        int Count = 0;
                        int Height = Convert.ToInt32(DT2.Rows[j]["Height"]);
                        //string Front = ProfileName(Convert.ToInt32(SourceDT.Rows[0]["FrontID"]));
                        string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                        string Notes = string.Empty;
                        foreach (DataRow item in Srows)
                        {
                            Count += Convert.ToInt32(item["Count"]);
                        }

                        //if (Height <= WidthMargin)
                        //    Height = WidthMargin;

                        DataRow[] rows = DestinationDT.Select("Front='" + Front + "' AND Color='" + Color + "' AND Height=" + Height);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = Front;
                            NewRow["Color"] = Color;
                            NewRow["Height"] = Height;
                            NewRow["Count"] = Count * 2;
                            NewRow["VitrinaCount"] = 0;
                            NewRow["ProfileType"] = Convert.ToInt32(SourceDT.Rows[0]["FrontID"]);
                            NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            NewRow["FrontType"] = FrontType;
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                            rows[0]["VitrinaCount"] = 0;
                        }
                    }
                }
            }
        }

        private void RapidVitrinaSingly(DataTable SourceDT, ref DataTable DestinationDT, int WidthMargin, int FrontType, string Front, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = DistHeightAndWidth(SourceDT, OrderASC);

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            DT1 = OrderedFrameColors(DT1);

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {

                        int Count = 0;
                        int VitrinaCount = 0;
                        int Height = Convert.ToInt32(DT2.Rows[j]["Height"]);
                        //string Front = ProfileName(Convert.ToInt32(SourceDT.Rows[0]["FrontID"]));
                        string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                        string Notes = string.Empty;
                        foreach (DataRow item in Srows)
                        {
                            if (Convert.ToInt32(item["InsetTypeID"]) == 1)
                                VitrinaCount += Convert.ToInt32(item["Count"]);
                            Count += Convert.ToInt32(item["Count"]);
                        }

                        //if (Height <= WidthMargin)
                        //    Height = WidthMargin;

                        DataRow[] rows = DestinationDT.Select("Front='" + Front + "' AND Color='" + Color + "' AND Height=" + Height);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = Front;
                            NewRow["Color"] = Color;
                            NewRow["Height"] = Height;
                            NewRow["Count"] = Count * 2;
                            NewRow["VitrinaCount"] = VitrinaCount * 2;
                            NewRow["ProfileType"] = Convert.ToInt32(SourceDT.Rows[0]["FrontID"]);
                            NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            NewRow["FrontType"] = FrontType;
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                            rows[0]["VitrinaCount"] = Convert.ToInt32(rows[0]["VitrinaCount"]) + VitrinaCount * 2;
                        }
                    }
                    Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {
                        int Count = 0;
                        int VitrinaCount = 0;
                        int Height = Convert.ToInt32(DT2.Rows[j]["Height"]);
                        //string Front = ProfileName(Convert.ToInt32(SourceDT.Rows[0]["FrontID"]));
                        string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                        string Notes = string.Empty;
                        foreach (DataRow item in Srows)
                        {
                            if (Convert.ToInt32(item["InsetTypeID"]) == 1)
                                VitrinaCount += Convert.ToInt32(item["Count"]);
                            Count += Convert.ToInt32(item["Count"]);
                        }

                        //if (Height <= WidthMargin)
                        //    Height = WidthMargin;

                        DataRow[] rows = DestinationDT.Select("Front='" + Front + "' AND Color='" + Color + "' AND Height=" + Height);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = Front;
                            NewRow["Color"] = Color;
                            NewRow["Height"] = Height;
                            NewRow["Count"] = Count * 2;
                            NewRow["VitrinaCount"] = VitrinaCount * 2;
                            NewRow["ProfileType"] = Convert.ToInt32(SourceDT.Rows[0]["FrontID"]);
                            NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            NewRow["FrontType"] = FrontType;
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                            rows[0]["VitrinaCount"] = Convert.ToInt32(rows[0]["VitrinaCount"]) + VitrinaCount * 2;
                        }
                    }
                }
            }
        }

        private void CombineRapidSimple(ref DataTable DestinationDT, bool IsBox)
        {
            string filter = @"InsetTypeID NOT IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531) AND InsetTypeID NOT IN (860) AND InsetTypeID NOT IN (685,686,687,688,29470,29471)";
            
            DataTable DT = AntaliaOrdersDT.Clone();
            DataRow[] rows = AntaliaOrdersDT.Select(filter);
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            string Front = GetFrontName(Convert.ToInt32(Fronts.Antalia));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.AntaliaWidth), 1, Front, false);
            
            if (!IsBox)
            {
                DT.Clear();
                rows = TechnoNOrdersDT.Select(filter +
                    " AND Height>" + (Convert.ToInt32(FrontMargins.TechnoNWidth)) + " AND Width>" + (Convert.ToInt32(FrontMargins.TechnoNWidth)));
                foreach (DataRow item in rows)
                    DT.Rows.Add(item.ItemArray);
                Front = GetFrontName(Convert.ToInt32(Fronts.TechnoN));
                RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.TechnoNWidth), 1, Front, false);
            }
            
            DT.Clear();
            rows = Nord95OrdersDT.Select(filter);
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Nord95));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.Nord95Width), 1, Front, false);

            DT.Clear();
            rows = epFoxOrdersDT.Select(filter);
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.epFox));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.epFoxWidth), 1, Front, false);

            DT.Clear();
            rows = BergamoOrdersDT.Select(filter + " AND (Height>150 OR Width>150)");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Bergamo));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoWidth), 1, Front, false);

            DT.Clear();
            rows = BergamoOrdersDT.Select(filter + " AND (Height<=150 OR Width<=150)");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = "ПШ-050 22х55 Бергамо";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoWidth), 1, 29548, Front, false);


            DT.Clear();
            rows = ep041OrdersDT.Select(filter);
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep041));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep041Width), 1, Front, false);

            DT.Clear();
            rows = ep071OrdersDT.Select(filter);
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep071));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep071Width), 1, Front, false);

            DT.Clear();
            rows = ep206OrdersDT.Select(filter);
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep206));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep206Width), 1, Front, false);

            DT.Clear();
            rows = ep216OrdersDT.Select(filter);
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep216));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep216Width), 1, Front, false);


            DT.Clear();
            rows = BostonOrdersDT.Select(filter);
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Boston));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BostonWidth), 1, Front, false);

            DataTable TempDT = new DataTable();
            TempDT.Clear();
            using (DataView DV = new DataView(VeneciaOrdersDT))
            {
                TempDT = DV.ToTable(true, new string[] { "ProfileID" });
            }
            for (int i = 0; i < TempDT.Rows.Count; i++)
            {
                int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                DT.Clear();
                rows = VeneciaOrdersDT.Select(filter + " AND ProfileID=" + ProfileID);
                if (rows.Count() > 0)
                {
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    Front = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]));
                    RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.VeneciaWidth), 1, Front, false);
                }
            }

            TempDT.Clear();
            using (DataView DV = new DataView(LeonOrdersDT))
            {
                TempDT = DV.ToTable(true, new string[] { "ProfileID" });
            }
            for (int i = 0; i < TempDT.Rows.Count; i++)
            {
                int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                DT.Clear();
                rows = LeonOrdersDT.Select(filter + " AND ProfileID=" + ProfileID);
                if (rows.Count() > 0)
                {
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    Front = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]));
                    RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LeonWidth), 1, Front, false);
                }
            }

            DT.Clear();
            rows = LimogOrdersDT.Select(filter);
            //AND Height>" + (Convert.ToInt32(FrontMargins.LimogWidth) - 10) + " AND Width>" + (Convert.ToInt32(FrontMargins.LimogWidth) - 10));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Limog));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LimogWidth), 1, Front, false);

            DT.Clear();
            rows = ep066Marsel4OrdersDT.Select(filter);
            //AND Height>" + (Convert.ToInt32(FrontMargins.ep066Marsel4Width) - 10) + " AND Width>" + (Convert.ToInt32(FrontMargins.ep066Marsel4Width) - 10));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep066Marsel4));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep066Marsel4Width), 1, Front, false);

            DT.Clear();
            rows = ep110JersyOrdersDT.Select(filter);
            //AND Height>" + (Convert.ToInt32(FrontMargins.ep110JersyWidth) - 10) + " AND Width>" + (Convert.ToInt32(FrontMargins.ep110JersyWidth) - 10));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep110Jersy));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep110JersyWidth), 1, Front, false);

            DT.Clear();
            rows = ep018Marsel1OrdersDT.Select(filter);
            //AND Height>" + (Convert.ToInt32(FrontMargins.ep018Marsel1Width) - 10) + " AND Width>" + (Convert.ToInt32(FrontMargins.ep018Marsel1Width) - 10));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep018Marsel1));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep018Marsel1Width), 1, Front, false);

            DT.Clear();
            rows = ep043ShervudOrdersDT.Select(filter);
            //AND Height>" + (Convert.ToInt32(FrontMargins.ep043ShervudWidth) - 10) + " AND Width>" + (Convert.ToInt32(FrontMargins.ep043ShervudWidth) - 10));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep043Shervud));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep043ShervudWidth), 1, Front, false);

            DT.Clear();
            rows = UrbanOrdersDT.Select(filter);
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Urban));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.UrbanWidth), 1, Front, false);

            DT.Clear();
            rows = AlbyOrdersDT.Select(filter);
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Alby));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.AlbyWidth), 1, Front, false);

            DT.Clear();
            rows = BrunoOrdersDT.Select(filter);
            //AND Height>" + (Convert.ToInt32(FrontMargins.BrunoWidth) - 10) + " AND Width>" + (Convert.ToInt32(FrontMargins.BrunoWidth) - 10));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Bruno));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BrunoWidth), 1, Front, false);

            DT.Clear();
            rows = epsh406Techno4OrdersDT.Select(filter);
            //AND Height>" + (Convert.ToInt32(FrontMargins.epsh406Techno4Width) - 10) + " AND Width>" + (Convert.ToInt32(FrontMargins.epsh406Techno4Width) - 10));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.epsh406Techno4));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.epsh406Techno4Width), 1, Front, false);

            DT.Clear();
            rows = LukOrdersDT.Select(filter);
            //AND Height>" + (Convert.ToInt32(FrontMargins.LukWidth) - 10) + " AND Width>" + (Convert.ToInt32(FrontMargins.LukWidth) - 10));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Luk));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukWidth), 1, Front, false);

            DT.Clear();
            rows = LukPVHOrdersDT.Select(filter);
            //AND Height>" + (Convert.ToInt32(FrontMargins.LukWidth) - 10) + " AND Width>" + (Convert.ToInt32(FrontMargins.LukWidth) - 10));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.LukPVH));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukWidth), 1, Front, false);

            TempDT.Clear();
            using (DataView DV = new DataView(MilanoOrdersDT))
            {
                TempDT = DV.ToTable(true, new string[] { "ProfileID" });
            }
            for (int i = 0; i < TempDT.Rows.Count; i++)
            {
                int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                DT.Clear();
                rows = MilanoOrdersDT.Select(filter + " AND ProfileID=" + ProfileID);
                if (rows.Count() > 0)
                {
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    Front = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]));
                    RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.MilanoWidth), 1, Front, false);
                }
            }

            DT.Clear();
            rows = PragaOrdersDT.Select(filter);
            //AND Height>" + (Convert.ToInt32(FrontMargins.PragaWidth) - 10) + " AND Width>" + (Convert.ToInt32(FrontMargins.PragaWidth) - 10));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Praga));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.PragaWidth), 1, Front, false);

            DT.Clear();
            rows = SigmaOrdersDT.Select(filter);
            //AND Height>" + (Convert.ToInt32(FrontMargins.SigmaWidth) - 10) + " AND Width>" + (Convert.ToInt32(FrontMargins.SigmaWidth) - 10));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Sigma));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.SigmaWidth), 1, Front, false);

            DT.Clear();
            rows = FatOrdersDT.Select(filter);
            //AND Height>" + (Convert.ToInt32(FrontMargins.FatWidth) - 10) + " AND Width>" + (Convert.ToInt32(FrontMargins.FatWidth) - 10));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Fat));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.FatWidth), 1, Front, false);

            CombineRapidGrids(ref RapidDT);
            //CombineRapidVitrina(ref RapidDT);
        }

        private void CombineRapidFilenka(ref DataTable DestinationDT)
        {
            string filter = @"InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531)";
            
            DataTable DT = AntaliaOrdersDT.Clone();
            DataRow[] rows = AntaliaOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.AntaliaMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.AntaliaMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            string Front = GetFrontName(Convert.ToInt32(Fronts.Antalia));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.AntaliaWidth), 1, Front, false);

            DT.Clear();
            rows = TechnoNOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.TechnoNMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.TechnoNMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.TechnoN));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.TechnoNWidth), 1, Front, false);
            
            DT.Clear();
            rows = Nord95OrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.Nord95Margin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.Nord95Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Nord95));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.Nord95Width), 1, Front, false);

            DT.Clear();
            rows = epFoxOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.epFoxMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.epFoxMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.epFox));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.epFoxWidth), 1, Front, false);

            DT.Clear();
            rows = BergamoOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.BergamoMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.BergamoMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Bergamo));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoWidth), 1, Front, false);

            DT.Clear();
            rows = ep041OrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.ep041Margin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.ep041Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep041));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep041Width), 1, Front, false);

            DT.Clear();
            rows = ep071OrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.ep071Margin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.ep071Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep071));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep071Width), 1, Front, false);

            DT.Clear();
            rows = ep206OrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.ep206Margin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.ep206Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep206));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep206Width), 1, Front, false);

            DT.Clear();
            rows = ep216OrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.ep216Margin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.ep216Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep216));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep216Width), 1, Front, false);

            DT.Clear();
            rows = BostonOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.BostonMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.BostonMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Boston));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BostonWidth), 1, Front, false);

            DataTable TempDT = new DataTable();
            TempDT.Clear();
            using (DataView DV = new DataView(VeneciaOrdersDT))
            {
                TempDT = DV.ToTable(true, new string[] { "ProfileID" });
            }
            for (int i = 0; i < TempDT.Rows.Count; i++)
            {
                int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                DT.Clear();
                rows = VeneciaOrdersDT.Select(filter + " AND ProfileID=" + ProfileID +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.VeneciaMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.VeneciaMargin) + 100) + ")");
                if (rows.Count() > 0)
                {
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    Front = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]));
                    RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.VeneciaWidth), 1, Front, false);
                }
            }

            TempDT.Clear();
            using (DataView DV = new DataView(LeonOrdersDT))
            {
                TempDT = DV.ToTable(true, new string[] { "ProfileID" });
            }
            for (int i = 0; i < TempDT.Rows.Count; i++)
            {
                int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                DT.Clear();
                rows = LeonOrdersDT.Select(filter + " AND ProfileID=" + ProfileID +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.LeonMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.LeonMargin) + 100) + ")");
                if (rows.Count() > 0)
                {
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    Front = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]));
                    RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LeonWidth), 1, Front, false);
                }
            }

            DT.Clear();
            rows = LimogOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.LimogMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.LimogMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Limog));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LimogWidth), 1, Front, false);

            DT.Clear();
            rows = ep066Marsel4OrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.ep066Marsel4Margin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.ep066Marsel4Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep066Marsel4));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep066Marsel4Width), 1, Front, false);

            DT.Clear();
            rows = ep110JersyOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.ep110JersyMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.ep110JersyMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep110Jersy));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep110JersyWidth), 1, Front, false);

            DT.Clear();
            rows = ep018Marsel1OrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.ep018Marsel1Margin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.ep018Marsel1Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep018Marsel1));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep018Marsel1Width), 1, Front, false);

            DT.Clear();
            rows = ep043ShervudOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.ep043ShervudMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.ep043ShervudMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep043Shervud));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep043ShervudWidth), 1, Front, false);

            DT.Clear();
            rows = UrbanOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.UrbanMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.UrbanMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Urban));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.UrbanWidth), 1, Front, false);

            DT.Clear();
            rows = AlbyOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.AlbyMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.AlbyMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Alby));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.AlbyWidth), 1, Front, false);

            DT.Clear();
            rows = BrunoOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.BrunoMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.BrunoMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Bruno));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BrunoWidth), 1, Front, false);

            DT.Clear();
            rows = epsh406Techno4OrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.epsh406Techno4Margin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.epsh406Techno4Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.epsh406Techno4));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.epsh406Techno4Width), 1, Front, false);

            DT.Clear();
            rows = LukOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.LukMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.LukMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Luk));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukWidth), 1, Front, false);

            DT.Clear();
            rows = LukPVHOrdersDT.Select(filter +
                "  AND (Height>" + (Convert.ToInt32(FrontMargins.LukMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.LukMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.LukPVH));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukWidth), 1, Front, false);

            TempDT.Clear();
            using (DataView DV = new DataView(MilanoOrdersDT))
            {
                TempDT = DV.ToTable(true, new string[] { "ProfileID" });
            }
            for (int i = 0; i < TempDT.Rows.Count; i++)
            {
                int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                DT.Clear();
                rows = MilanoOrdersDT.Select(filter + " AND ProfileID=" + ProfileID +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.MilanoMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.MilanoMargin) + 100) + ")");
                if (rows.Count() > 0)
                {
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    Front = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]));
                    RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.MilanoWidth), 1, Front, false);
                }
            }

            DT.Clear();
            rows = PragaOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.PragaMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.PragaMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Praga));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.PragaWidth), 1, Front, false);

            DT.Clear();
            rows = SigmaOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.SigmaMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.SigmaMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Sigma));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.SigmaWidth), 1, Front, false);

            DT.Clear();
            rows = FatOrdersDT.Select(filter +
                " AND (Height>" + (Convert.ToInt32(FrontMargins.FatMargin) + 100) + " AND Width>" + (Convert.ToInt32(FrontMargins.FatMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Fat));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.FatWidth), 1, Front, false);

        }

        private void CombineRapidBoxes(ref DataTable DestinationDT)
        {
            string filter = @"InsetTypeID NOT IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531) AND InsetTypeID NOT IN (860) AND InsetTypeID NOT IN (685,686,687,688,29470,29471)";
            DataTable DT = AntaliaOrdersDT.Clone();
            DataRow[] rows = TechnoNOrdersDT.Select(filter +
                " AND Height<=" + (Convert.ToInt32(FrontMargins.TechnoNWidth)) + " OR Width<=" + (Convert.ToInt32(FrontMargins.TechnoNWidth)));
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            string Front = GetFrontName(Convert.ToInt32(Fronts.TechnoN));
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.TechnoNWidth), 2, Front, false);
        }

        private void CombineRapidFilenkaBoxes(ref DataTable DestinationDT)
        {
            string filter = @"InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531)";
            DataTable DT = AntaliaOrdersDT.Clone();
            DataRow[] rows = AntaliaOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.AntaliaMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.AntaliaMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            string Front = GetFrontName(Convert.ToInt32(Fronts.Antalia)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.AntaliaWidth), 2, Front, false);
            
            DT.Clear();
            rows = TechnoNOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.TechnoNMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.TechnoNMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.TechnoN)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.TechnoNWidth), 2, Front, false);

            DT.Clear();
            rows = Nord95OrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.Nord95Margin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.Nord95Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Nord95)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.Nord95Width), 2, Front, false);

            DT.Clear();
            rows = epFoxOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.epFoxMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.epFoxMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.epFox)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.epFoxWidth), 2, Front, false);

            DT.Clear();
            rows = BergamoOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.BergamoMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.BergamoMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Bergamo)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoWidth), 2, Front, false);

            DT.Clear();
            rows = ep041OrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.ep041Margin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.ep041Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep041)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep041Width), 2, Front, false);

            DT.Clear();
            rows = ep071OrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.ep071Margin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.ep071Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep071)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep071Width), 2, Front, false);

            DT.Clear();
            rows = ep206OrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.ep206Margin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.ep206Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep206)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep206Width), 2, Front, false);

            DT.Clear();
            rows = ep216OrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.ep216Margin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.ep216Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep216)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep216Width), 2, Front, false);

            DT.Clear();
            rows = BostonOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.BostonMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.BostonMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Boston)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BostonWidth), 2, Front, false);

            DataTable TempDT = new DataTable();
            TempDT.Clear();
            using (DataView DV = new DataView(LeonOrdersDT))
            {
                TempDT = DV.ToTable(true, new string[] { "ProfileID" });
            }
            for (int i = 0; i < TempDT.Rows.Count; i++)
            {
                int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                DT.Clear();
                rows = LeonOrdersDT.Select(filter + " AND ProfileID=" + ProfileID +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.LeonMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.LeonMargin) + 100) + ")");
                if (rows.Count() > 0)
                {
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    Front = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"])) + " ШУФ";
                    RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LeonWidth), 2, Front, false);
                }
            }

            DT.Clear();
            rows = LimogOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.LimogMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.LimogMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Limog)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LimogWidth), 2, Front, false);

            DT.Clear();
            rows = ep066Marsel4OrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.ep066Marsel4Margin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.ep066Marsel4Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep066Marsel4)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep066Marsel4Width), 2, Front, false);

            DT.Clear();
            rows = ep110JersyOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.ep110JersyMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.ep110JersyMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep110Jersy)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep110JersyWidth), 2, Front, false);

            DT.Clear();
            rows = ep018Marsel1OrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.ep018Marsel1Margin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.ep018Marsel1Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep018Marsel1)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep018Marsel1Width), 2, Front, false);

            DT.Clear();
            rows = ep043ShervudOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.ep043ShervudMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.ep043ShervudMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.ep043Shervud)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep043ShervudWidth), 2, Front, false);

            DT.Clear();
            rows = UrbanOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.UrbanMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.UrbanMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Urban)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.UrbanWidth), 2, Front, false);

            DT.Clear();
            rows = AlbyOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.AlbyMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.AlbyMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Alby)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.AlbyWidth), 2, Front, false);

            DT.Clear();
            rows = BrunoOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.BrunoMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.BrunoMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Bruno)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BrunoWidth), 2, Front, false);

            DT.Clear();
            rows = epsh406Techno4OrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.epsh406Techno4Margin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.epsh406Techno4Margin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.epsh406Techno4)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.epsh406Techno4Width), 2, Front, false);

            DT.Clear();
            rows = LukOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.LukMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.LukMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Luk)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukWidth), 2, Front, false);

            DT.Clear();
            rows = LukPVHOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.LukMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.LukMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.LukPVH)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukWidth), 2, Front, false);

            TempDT.Clear();
            using (DataView DV = new DataView(MilanoOrdersDT))
            {
                TempDT = DV.ToTable(true, new string[] { "ProfileID" });
            }
            for (int i = 0; i < TempDT.Rows.Count; i++)
            {
                int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                DT.Clear();
                rows = MilanoOrdersDT.Select(filter + " AND ProfileID=" + ProfileID +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.MilanoMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.MilanoMargin) + 100) + ")");
                if (rows.Count() > 0)
                {
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    Front = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"])) + " ШУФ";
                    RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.MilanoWidth), 2, Front, false);
                }
            }

            //DT.Clear();
            //rows = MilanoOrdersDT.Select(filter +
            //    " AND (Height<=" + (Convert.ToInt32(FrontMargins.MilanoMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.MilanoMargin) + 100) + ")");
            //foreach (DataRow item in rows)
            //    DT.Rows.Add(item.ItemArray);
            //Front = GetFrontName(Convert.ToInt32(Fronts.Milano)) + " ШУФ";
            //RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.MilanoWidth), 2, Front, false);

            DT.Clear();
            rows = PragaOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.PragaMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.PragaMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Praga)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.PragaWidth), 2, Front, false);

            DT.Clear();
            rows = SigmaOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.SigmaMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.SigmaMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Sigma)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.SigmaWidth), 2, Front, false);

            DT.Clear();
            rows = FatOrdersDT.Select(filter +
                " AND (Height<=" + (Convert.ToInt32(FrontMargins.FatMargin) + 100) + " OR Width<=" + (Convert.ToInt32(FrontMargins.FatMargin) + 100) + ")");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            Front = GetFrontName(Convert.ToInt32(Fronts.Fat)) + " ШУФ";
            RapidSimpleSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.FatWidth), 2, Front, false);

            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Front, Color, ProfileType, Height DESC";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }

            for (int i = 0; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["VitrinaCount"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = Convert.ToInt32(DestinationDT.Rows[i]["VitrinaCount"]) + " витр.";
                if (DestinationDT.Rows[i]["BoxCount"] != DBNull.Value && Convert.ToInt32(DestinationDT.Rows[i]["BoxCount"]) > 0)
                {
                    if (DestinationDT.Rows[i]["Notes"] != DBNull.Value)
                    {
                        if (DestinationDT.Rows[i]["Notes"].ToString().Length > 0)
                            DestinationDT.Rows[i]["Notes"] = DestinationDT.Rows[i]["Notes"].ToString() + ", " + Convert.ToInt32(DestinationDT.Rows[i]["BoxCount"]) + " шуф.";
                    }
                    else
                        DestinationDT.Rows[i]["Notes"] = Convert.ToInt32(DestinationDT.Rows[i]["BoxCount"]) + " шуф.";
                }
                if (i == 0)
                    continue;
                if (Convert.ToInt32(DestinationDT.Rows[i]["ProfileType"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ProfileType"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["ColorType"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ColorType"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["FrontType"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["FrontType"]))
                {
                    DestinationDT.Rows[i]["Front"] = string.Empty;
                    DestinationDT.Rows[i]["Color"] = string.Empty;
                }
            }
        }

        private void CombineRapidGrids(ref DataTable DestinationDT)
        {
            if (AntaliaGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.Antalia)) + " РЕШ";
                RapidGridsSingly(AntaliaGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.AntaliaWidth), 3, Front, false);
            }

            if (Nord95GridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.Nord95)) + " РЕШ";
                RapidGridsSingly(Nord95GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.Nord95Width), 3, Front, false);
            }
            if (epFoxGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.epFox)) + " РЕШ";
                RapidGridsSingly(epFoxGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.epFoxWidth), 3, Front, false);
            }

            if (BergamoGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.Bergamo)) + " РЕШ";
                RapidGridsSingly(BergamoGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoWidth), 3, Front, false);
            }

            if (ep041GridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.ep041)) + " РЕШ";
                RapidGridsSingly(ep041GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep041Width), 3, Front, false);
            }

            if (ep071GridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.ep071)) + " РЕШ";
                RapidGridsSingly(ep071GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep071Width), 3, Front, false);
            }

            if (ep206GridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.ep206)) + " РЕШ";
                RapidGridsSingly(ep206GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep206Width), 3, Front, false);
            }

            if (ep216GridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.ep216)) + " РЕШ";
                RapidGridsSingly(ep216GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep216Width), 3, Front, false);
            }

            if (BostonGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.Boston)) + " РЕШ";
                RapidGridsSingly(BostonGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BostonWidth), 3, Front, false);
            }

            DataTable DT = ep216OrdersDT.Clone();
            DataTable TempDT = new DataTable();
            TempDT.Clear();
            using (DataView DV = new DataView(VeneciaGridsDT))
            {
                TempDT = DV.ToTable(true, new string[] { "ProfileID" });
            }
            for (int i = 0; i < TempDT.Rows.Count; i++)
            {
                int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                DT.Clear();
                DataRow[] rows = VeneciaGridsDT.Select("ProfileID=" + ProfileID);
                if (rows.Count() > 0)
                {
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    string Front = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"])) + " РЕШ";
                    RapidGridsSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.VeneciaWidth), 3, Front, false);
                }
            }

            TempDT.Clear();
            using (DataView DV = new DataView(LeonGridsDT))
            {
                TempDT = DV.ToTable(true, new string[] { "ProfileID" });
            }
            for (int i = 0; i < TempDT.Rows.Count; i++)
            {
                int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                DT.Clear();
                DataRow[] rows = LeonGridsDT.Select("ProfileID=" + ProfileID);
                if (rows.Count() > 0)
                {
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    string Front = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"])) + " РЕШ";
                    RapidGridsSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.LeonWidth), 3, Front, false);
                }
            }

            if (LimogGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.Limog)) + " РЕШ";
                RapidGridsSingly(LimogGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LimogWidth), 3, Front, false);
            }
            if (ep066Marsel4GridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.ep066Marsel4)) + " РЕШ";
                RapidGridsSingly(ep066Marsel4GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep066Marsel4Width), 3, Front, false);
            }
            if (ep110JersyGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.ep110Jersy)) + " РЕШ";
                RapidGridsSingly(ep110JersyGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep110JersyWidth), 3, Front, false);
            }
            if (ep018Marsel1GridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.ep018Marsel1)) + " РЕШ";
                RapidGridsSingly(ep018Marsel1GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep018Marsel1Width), 3, Front, false);
            }
            if (ep043ShervudGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.ep043Shervud)) + " РЕШ";
                RapidGridsSingly(ep043ShervudGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep043ShervudWidth), 3, Front, false);
            }
            if (UrbanGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.Urban)) + " РЕШ";
                RapidGridsSingly(UrbanGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.UrbanWidth), 3, Front, false);
            }
            if (AlbyGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.Alby)) + " РЕШ";
                RapidGridsSingly(AlbyGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.AlbyWidth), 3, Front, false);
            }
            if (BrunoGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.Bruno)) + " РЕШ";
                RapidGridsSingly(BrunoGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BrunoWidth), 3, Front, false);
            }
            if (epsh406Techno4GridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.epsh406Techno4)) + " РЕШ";
                RapidGridsSingly(epsh406Techno4GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.epsh406Techno4Width), 3, Front, false);
            }
            if (LukGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.Luk)) + " РЕШ";
                RapidGridsSingly(LukGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukWidth), 3, Front, false);
            }
            if (LukPVHGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.LukPVH)) + " РЕШ";
                RapidGridsSingly(LukPVHGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukWidth), 3, Front, false);
            }
            TempDT.Clear();
            using (DataView DV = new DataView(MilanoGridsDT))
            {
                TempDT = DV.ToTable(true, new string[] { "ProfileID" });
            }
            for (int i = 0; i < TempDT.Rows.Count; i++)
            {
                int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                DT.Clear();
                DataRow[] rows = MilanoGridsDT.Select("ProfileID=" + ProfileID);
                if (rows.Count() > 0)
                {
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    string Front = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"])) + " РЕШ";
                    RapidGridsSingly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.MilanoWidth), 3, Front, false);
                }
            }

            if (PragaGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.Praga)) + " РЕШ";
                RapidGridsSingly(PragaGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.PragaWidth), 3, Front, false);
            }
            if (SigmaGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.Sigma)) + " РЕШ";
                RapidGridsSingly(SigmaGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.SigmaWidth), 3, Front, false);
            }
            if (FatGridsDT.Rows.Count > 0)
            {
                string Front = GetFrontName(Convert.ToInt32(Fronts.Fat)) + " РЕШ";
                RapidGridsSingly(FatGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.FatWidth), 3, Front, false);
            }
        }

        //private void CombineRapidVitrina(ref DataTable DestinationDT)
        //{
        //    if (Techno216VitrinaDT.Rows.Count > 0)
        //    {f
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Techno216)) + " ВИТ";
        //        RapidVitrinaSingly(Techno216VitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.Techno216Width), 4, Front, false);
        //    }
        //    if (TechnoNVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.TechnoN)) + " ВИТ";
        //        RapidVitrinaSingly(TechnoNVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.TechnoNWidth), 4, Front, false);
        //    }
        //    if (Techno2NewVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Techno2New)) + " ВИТ";
        //        RapidVitrinaSingly(Techno2NewVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.Techno2NewWidth), 4, Front, false);
        //    }
        //    if (AntaliaVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Antalia)) + " ВИТ";
        //        RapidVitrinaSingly(AntaliaVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.AntaliaWidth), 4, Front, false);
        //    }
        //    if (VeneciaVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Venecia)) + " ВИТ";
        //        RapidVitrinaSingly(VeneciaVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.VeneciaWidth), 4, Front, false);
        //    }
        //    if (BergamoVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Venecia)) + " ВИТ";
        //        RapidVitrinaSingly(BergamoVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoWidth), 4, Front, false);
        //    }
        //    if (BostonVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Venecia)) + " ВИТ";
        //        RapidVitrinaSingly(BostonVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BostonWidth), 4, Front, false);
        //    }
        //    if (LeonVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Leon)) + " ВИТ";
        //        RapidVitrinaSingly(LeonVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LeonWidth), 4, Front, false);
        //    }
        //    if (LimogVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Limog)) + " ВИТ";
        //        RapidVitrinaSingly(LimogVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LimogWidth), 4, Front, false);
        //    }
        //    if (ep066Marsel4VitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.ep066Marsel4)) + " ВИТ";
        //        RapidVitrinaSingly(ep066Marsel4VitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep066Marsel4Width), 4, Front, false);
        //    }
        //    if (ep018Marsel1VitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.ep018Marsel1)) + " ВИТ";
        //        RapidVitrinaSingly(ep018Marsel1VitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep018Marsel1Width), 4, Front, false);
        //    }
        //    if (ep043ShervudVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.ep043Shervud)) + " ВИТ";
        //        RapidVitrinaSingly(ep043ShervudVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep043ShervudWidth), 4, Front, false);
        //    }
        //    if (epsh406Techno4VitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.epsh406Techno4)) + " ВИТ";
        //        RapidVitrinaSingly(epsh406Techno4VitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.epsh406Techno4Width), 4, Front, false);
        //    }
        //    if (LukVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Luk)) + " ВИТ";
        //        RapidVitrinaSingly(LukVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukWidth), 4, Front, false);
        //    }
        //    if (LukPVHVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Luk)) + " ВИТ";
        //        RapidVitrinaSingly(LukPVHVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukWidth), 4, Front, false);
        //    }
        //    if (MilanoVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Milano)) + " ВИТ";
        //        RapidVitrinaSingly(MilanoVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.MilanoWidth), 4, Front, false);
        //    }
        //    if (PragaVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Praga)) + " ВИТ";
        //        RapidVitrinaSingly(PragaVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.PragaWidth), 4, Front, false);
        //    }
        //    if (SigmaVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Sigma)) + " ВИТ";
        //        RapidVitrinaSingly(SigmaVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.SigmaWidth), 4, Front, false);
        //    }
        //    if (FatVitrinaDT.Rows.Count > 0)
        //    {
        //        string Front = GetFrontName(Convert.ToInt32(Fronts.Fat)) + " ВИТ";
        //        RapidVitrinaSingly(FatVitrinaDT, ref DestinationDT, Convert.ToInt32(FrontMargins.FatWidth), 4, Front, false);
        //    }
        //}

        private void CombineAssembly(ref DataTable DestinationDT)
        {

        }

        private void SummaryOrders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void AllInsets(DataTable SourceDT, ref DataTable DestinationDT, int Margin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                string InsetTypeName = "";
                InsetTypeName = GetInsetTypeName(Convert.ToInt32(DT1.Rows[i]["InsetTypeID"])) + " ";
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - Margin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - Margin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < 10 || Width < 10)
                                continue;

                            if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 2069 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 2070 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 2071
                                 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 2073 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 2075 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 2077
                                 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 2233 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 3644)
                            {
                                if (Height >= 100 && Width >= 100)
                                    continue;
                                if (Width > 900)
                                    continue;
                            }
                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (TechnoInsetColorID == 128)
                            {
                                InsetColor = "мега " + InsetColor + " вит";
                            }

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetTypeName + InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void InsetsFilenkaOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int WidthMargin, bool OrderASC, string AdditionalName)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531)", "InsetTypeID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                string InsetTypeName = "";
                InsetTypeName = GetInsetTypeName(Convert.ToInt32(DT1.Rows[i]["InsetTypeID"])) + " ";
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - WidthMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);
                            string InsetColor = "фил " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"])) + AdditionalName;

                            if (Height < 114 || Width < 114)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetTypeName + InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void InsetsPressOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int WidthMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                string InsetTypeName = "";
                InsetTypeName = GetInsetTypeName(Convert.ToInt32(DT1.Rows[i]["InsetTypeID"])) + " ";
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    int InsetColorID = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                    if (InsetColorID != 44 || InsetColorID != 54 || InsetColorID != 51 || InsetColorID != 257 || InsetColorID != 57 ||
                        InsetColorID != 43 || InsetColorID != 45 || InsetColorID != 238 || InsetColorID != 52 || InsetColorID != 219 ||
                        InsetColorID != 218 || InsetColorID != 340 || InsetColorID != 220)
                        continue;

                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - WidthMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);
                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            if (Height < 10 || Width < 10)
                                continue;

                            if (Width <= 900)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetTypeName + InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void InsetsGridsOnly(DataTable SourceDT, ref DataTable DestinationDT, int Margin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                string InsetTypeName = "";
                InsetTypeName = GetInsetTypeName(Convert.ToInt32(DT1.Rows[i]["InsetTypeID"])) + " ";
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - Margin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - Margin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < 10 || Width < 10)
                                continue;

                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            if (Height < 10 || Width < 10)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            string Name = string.Empty;
                            if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 685 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 688 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 29470)
                                Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " 45 " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 686 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 687 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 29471)
                                Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " 90 " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 860)
                                Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " люкс " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetTypeName + InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void CollectAllInsets(ref DataTable DestinationDT)
        {
            if (TechnoNSimpleDT.Rows.Count > 0)
                AllInsets(TechnoNSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.TechnoNMargin), true);
            if (AntaliaSimpleDT.Rows.Count > 0)
                AllInsets(AntaliaSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.AntaliaMargin), true);
            if (Nord95SimpleDT.Rows.Count > 0)
                AllInsets(Nord95SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.Nord95Margin), true);
            if (epFoxSimpleDT.Rows.Count > 0)
                AllInsets(epFoxSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.epFoxMargin), true);
            //if (BergamoSimpleDT.Rows.Count > 0)
            //    AllInsets(BergamoSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoMargin), true);
            if (BostonSimpleDT.Rows.Count > 0)
                AllInsets(BostonSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BostonMargin), true);

            DataTable DT = BergamoSimpleDT.Clone();
            
            DataRow[] rows = BergamoSimpleDT.Select("(Height>150 OR Width>150)");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            AllInsets(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoMargin), true);

            DT.Clear();
            rows = BergamoSimpleDT.Select("(Height<=150 OR Width<=150)");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            AllInsets(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoNarrowMargin), true);

            if (ep041SimpleDT.Rows.Count > 0)
                AllInsets(ep041SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep041Margin), true);

            if (ep071SimpleDT.Rows.Count > 0)
                AllInsets(ep071SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep071Margin), true);

            if (ep206SimpleDT.Rows.Count > 0)
                AllInsets(ep206SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep206Margin), true);

            if (ep216SimpleDT.Rows.Count > 0)
                AllInsets(ep216SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep216Margin), true);

            if (VeneciaSimpleDT.Rows.Count > 0)
            {
                DataTable TempDT = new DataTable();
                TempDT.Clear();
                using (DataView DV = new DataView(VeneciaOrdersDT))
                {
                    TempDT = DV.ToTable(true, new string[] { "ProfileID" });
                }
                for (int i = 0; i < TempDT.Rows.Count; i++)
                {
                    int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                    DataTable TempSimpleDT = VeneciaSimpleDT.Clone();
                    rows = VeneciaSimpleDT.Select("ProfileID=" + ProfileID);
                    if (rows.Count() > 0)
                    {
                        foreach (DataRow item in rows)
                            TempSimpleDT.Rows.Add(item.ItemArray);
                        AllInsets(TempSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.VeneciaMargin), true);
                    }
                    TempSimpleDT.Dispose();
                }
            }
            if (LeonSimpleDT.Rows.Count > 0)
                AllInsets(LeonSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LeonMargin), true);
            if (LimogSimpleDT.Rows.Count > 0)
                AllInsets(LimogSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LimogMargin), true);
            if (ep066Marsel4SimpleDT.Rows.Count > 0)
                AllInsets(ep066Marsel4SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep066Marsel4Margin), true);
            if (ep110JersySimpleDT.Rows.Count > 0)
                AllInsets(ep110JersySimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep110JersyMargin), true);
            if (ep018Marsel1SimpleDT.Rows.Count > 0)
                AllInsets(ep018Marsel1SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep018Marsel1Margin), true);
            if (ep043ShervudSimpleDT.Rows.Count > 0)
                AllInsets(ep043ShervudSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep043ShervudMargin), true);
            if (UrbanSimpleDT.Rows.Count > 0)
                AllInsets(UrbanSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.UrbanMargin), true);
            if (AlbySimpleDT.Rows.Count > 0)
                AllInsets(AlbySimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.AlbyMargin), true);
            if (BrunoSimpleDT.Rows.Count > 0)
                AllInsets(BrunoSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BrunoMargin), true);
            if (epsh406Techno4SimpleDT.Rows.Count > 0)
                AllInsets(epsh406Techno4SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.epsh406Techno4Margin), true);
            if (LukSimpleDT.Rows.Count > 0)
                AllInsets(LukSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukMargin), true);
            if (LukPVHSimpleDT.Rows.Count > 0)
                AllInsets(LukPVHSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukMargin), true);
            if (MilanoSimpleDT.Rows.Count > 0)
                AllInsets(MilanoSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.MilanoMargin), true);
            if (PragaSimpleDT.Rows.Count > 0)
                AllInsets(PragaSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.PragaMargin), true);
            if (SigmaSimpleDT.Rows.Count > 0)
                AllInsets(SigmaSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.SigmaMargin), true);
            if (FatSimpleDT.Rows.Count > 0)
                AllInsets(FatSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.FatMargin), true);

            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void CollectInsetsGridsOnly(ref DataTable DestinationDT)
        {
            if (AntaliaGridsDT.Rows.Count > 0)
                InsetsGridsOnly(AntaliaGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.AntaliaMargin), true);
            if (Nord95GridsDT.Rows.Count > 0)
                InsetsGridsOnly(Nord95GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.Nord95Margin), true);
            if (epFoxGridsDT.Rows.Count > 0)
                InsetsGridsOnly(epFoxGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.epFoxMargin), true);
            if (VeneciaGridsDT.Rows.Count > 0)
                InsetsGridsOnly(VeneciaGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.VeneciaMargin), true);
            //if (BergamoGridsDT.Rows.Count > 0)
            //    InsetsGridsOnly(BergamoGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoMargin), true);
            DataTable DT = BergamoGridsDT.Clone();

            DataRow[] rows = BergamoGridsDT.Select("(Height>150 OR Width>150)");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            InsetsGridsOnly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoMargin), true);

            DT.Clear();
            rows = BergamoGridsDT.Select("(Height<=150 OR Width<=150)");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            InsetsGridsOnly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoNarrowMargin), true);

            if (ep041GridsDT.Rows.Count > 0)
                InsetsGridsOnly(ep041GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep041Margin), true);
            if (ep071GridsDT.Rows.Count > 0)
                InsetsGridsOnly(ep071GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep071Margin), true);
            if (ep206GridsDT.Rows.Count > 0)
                InsetsGridsOnly(ep206GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep206Margin), true);
            if (ep216GridsDT.Rows.Count > 0)
                InsetsGridsOnly(ep216GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep216Margin), true);

            if (BostonGridsDT.Rows.Count > 0)
                InsetsGridsOnly(BostonGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BostonMargin), true);
            if (LeonGridsDT.Rows.Count > 0)
                InsetsGridsOnly(LeonGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LeonMargin), true);
            if (LimogGridsDT.Rows.Count > 0)
                InsetsGridsOnly(LimogGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LimogMargin), true);
            if (ep066Marsel4GridsDT.Rows.Count > 0)
                InsetsGridsOnly(ep066Marsel4GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep066Marsel4Margin), true);
            if (ep110JersyGridsDT.Rows.Count > 0)
                InsetsGridsOnly(ep110JersyGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep110JersyMargin), true);
            if (ep018Marsel1GridsDT.Rows.Count > 0)
                InsetsGridsOnly(ep018Marsel1GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep018Marsel1Margin), true);
            if (ep043ShervudGridsDT.Rows.Count > 0)
                InsetsGridsOnly(ep043ShervudGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep043ShervudMargin), true);
            if (UrbanGridsDT.Rows.Count > 0)
                InsetsGridsOnly(UrbanGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.UrbanMargin), true);
            if (AlbyGridsDT.Rows.Count > 0)
                InsetsGridsOnly(AlbyGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.AlbyMargin), true);
            if (BrunoGridsDT.Rows.Count > 0)
                InsetsGridsOnly(BrunoGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BrunoMargin), true);
            if (epsh406Techno4GridsDT.Rows.Count > 0)
                InsetsGridsOnly(epsh406Techno4GridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.epsh406Techno4Margin), true);
            if (LukGridsDT.Rows.Count > 0)
                InsetsGridsOnly(LukGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukMargin), true);
            if (LukPVHGridsDT.Rows.Count > 0)
                InsetsGridsOnly(LukPVHGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukMargin), true);
            if (MilanoGridsDT.Rows.Count > 0)
                InsetsGridsOnly(MilanoGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.MilanoMargin), true);
            if (PragaGridsDT.Rows.Count > 0)
                InsetsGridsOnly(PragaGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.PragaMargin), true);
            if (SigmaGridsDT.Rows.Count > 0)
                InsetsGridsOnly(SigmaGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.SigmaMargin), true);
            if (FatGridsDT.Rows.Count > 0)
                InsetsGridsOnly(FatGridsDT, ref DestinationDT, Convert.ToInt32(FrontMargins.FatMargin), true);

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["FrontID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["TechnoInsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["TechnoInsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void CollectFilenkaOnly(ref DataTable DestinationDT)
        {
            if (AntaliaSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(AntaliaSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.AntaliaMargin), true, string.Empty);
            if (Nord95SimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(Nord95SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.Nord95Margin), true, string.Empty);
            if (epFoxSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(epFoxSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.epFoxMargin), true, string.Empty);
            //if (BergamoSimpleDT.Rows.Count > 0)
            //    InsetsFilenkaOnly(BergamoSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoMargin), true, string.Empty);

            DataTable DT = BergamoSimpleDT.Clone();

            DataRow[] rows = BergamoSimpleDT.Select("(Height>150 OR Width>150)");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            InsetsFilenkaOnly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoMargin), true, string.Empty);

            DT.Clear();
            rows = BergamoSimpleDT.Select("(Height<=150 OR Width<=150)");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            InsetsFilenkaOnly(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoNarrowMargin), true, string.Empty);

            if (ep041SimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(ep041SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep041Margin), true, string.Empty);

            if (ep071SimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(ep071SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep071Margin), true, string.Empty);

            if (ep206SimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(ep206SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep206Margin), true, string.Empty);

            if (ep216SimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(ep216SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep216Margin), true, string.Empty);

            if (BostonSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(BostonSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BostonMargin), true, string.Empty);
            if (VeneciaSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(VeneciaSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.VeneciaMargin), true, " БРВ 10");
            if (LeonSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(LeonSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LeonMargin), true, " Леон/де Гроб 8");
            if (LimogSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(LimogSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LimogMargin), true, string.Empty);
            if (ep066Marsel4SimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(ep066Marsel4SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep066Marsel4Margin), true, string.Empty);
            if (ep110JersySimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(ep110JersySimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep110JersyMargin), true, string.Empty);
            if (ep018Marsel1SimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(ep018Marsel1SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep018Marsel1Margin), true, string.Empty);
            if (ep043ShervudSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(ep043ShervudSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep043ShervudMargin), true, string.Empty);
            if (UrbanSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(UrbanSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.UrbanMargin), true, string.Empty);
            if (AlbySimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(AlbySimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.AlbyMargin), true, string.Empty);
            if (BrunoSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(BrunoSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BrunoMargin), true, string.Empty);
            if (epsh406Techno4SimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(epsh406Techno4SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.epsh406Techno4Margin), true, string.Empty);
            if (LukSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(LukSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukMargin), true, string.Empty);
            if (LukPVHSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(LukPVHSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukMargin), true, string.Empty);
            if (MilanoSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(MilanoSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.MilanoMargin), true, " Милано");
            if (PragaSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(PragaSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.PragaMargin), true, string.Empty);
            if (SigmaSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(SigmaSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.SigmaMargin), true, string.Empty);
            if (FatSimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(FatSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.FatMargin), true, string.Empty);

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["FrontID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["TechnoInsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["TechnoInsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void CollectPressOnly(ref DataTable DestinationDT)
        {
            if (TechnoNSimpleDT.Rows.Count > 0)
                InsetsPressOnly(TechnoNSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.TechnoNMargin), true);
            if (AntaliaSimpleDT.Rows.Count > 0)
                InsetsPressOnly(AntaliaSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.AntaliaMargin), true);
            if (Nord95SimpleDT.Rows.Count > 0)
                InsetsPressOnly(Nord95SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.Nord95Margin), true);
            if (epFoxSimpleDT.Rows.Count > 0)
                InsetsPressOnly(epFoxSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.epFoxMargin), true);
            if (VeneciaSimpleDT.Rows.Count > 0)
                InsetsPressOnly(VeneciaSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.VeneciaMargin), true);
            //if (BergamoSimpleDT.Rows.Count > 0)
            //    InsetsPressOnly(BergamoSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoMargin), true);
            DataTable DT = BergamoSimpleDT.Clone();

            DataRow[] rows = BergamoSimpleDT.Select("(Height>150 OR Width>150)");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            AllInsets(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoMargin), true);

            DT.Clear();
            rows = BergamoSimpleDT.Select("(Height<=150 OR Width<=150)");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            AllInsets(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.BergamoNarrowMargin), true);

            if (ep041SimpleDT.Rows.Count > 0)
                InsetsPressOnly(ep041SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep041Margin), true);
            if (ep071SimpleDT.Rows.Count > 0)
                InsetsPressOnly(ep071SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep071Margin), true);
            if (ep206SimpleDT.Rows.Count > 0)
                InsetsPressOnly(ep206SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep206Margin), true);
            if (ep216SimpleDT.Rows.Count > 0)
                InsetsPressOnly(ep216SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep216Margin), true);

            if (BostonSimpleDT.Rows.Count > 0)
                InsetsPressOnly(BostonSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BostonMargin), true);
            if (LeonSimpleDT.Rows.Count > 0)
                InsetsPressOnly(LeonSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LeonMargin), true);
            if (LimogSimpleDT.Rows.Count > 0)
                InsetsPressOnly(LimogSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LimogMargin), true);
            if (ep066Marsel4SimpleDT.Rows.Count > 0)
                InsetsPressOnly(ep066Marsel4SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep066Marsel4Margin), true);
            if (ep110JersySimpleDT.Rows.Count > 0)
                InsetsPressOnly(ep110JersySimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep110JersyMargin), true);
            if (ep018Marsel1SimpleDT.Rows.Count > 0)
                InsetsPressOnly(ep018Marsel1SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep018Marsel1Margin), true);
            if (ep043ShervudSimpleDT.Rows.Count > 0)
                InsetsPressOnly(ep043ShervudSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.ep043ShervudMargin), true);
            if (UrbanSimpleDT.Rows.Count > 0)
                InsetsPressOnly(UrbanSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.UrbanMargin), true);
            if (AlbySimpleDT.Rows.Count > 0)
                InsetsPressOnly(AlbySimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.AlbyMargin), true);
            if (BrunoSimpleDT.Rows.Count > 0)
                InsetsPressOnly(BrunoSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.BrunoMargin), true);
            if (epsh406Techno4SimpleDT.Rows.Count > 0)
                InsetsPressOnly(epsh406Techno4SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.epsh406Techno4Margin), true);
            if (LukSimpleDT.Rows.Count > 0)
                InsetsPressOnly(LukSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukMargin), true);
            if (LukPVHSimpleDT.Rows.Count > 0)
                InsetsPressOnly(LukPVHSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.LukMargin), true);
            if (MilanoSimpleDT.Rows.Count > 0)
                InsetsPressOnly(MilanoSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.MilanoMargin), true);
            if (PragaSimpleDT.Rows.Count > 0)
                InsetsPressOnly(PragaSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.PragaMargin), true);
            if (SigmaSimpleDT.Rows.Count > 0)
                InsetsPressOnly(SigmaSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.SigmaMargin), true);
            if (FatSimpleDT.Rows.Count > 0)
                InsetsPressOnly(FatSimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.FatMargin), true);

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["FrontID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["TechnoInsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["TechnoInsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        public void ClearOrders()
        {
            FrontsID.Clear();
            TechnoNOrdersDT.Clear();
            AntaliaOrdersDT.Clear();
            Nord95OrdersDT.Clear();
            epFoxOrdersDT.Clear();
            VeneciaOrdersDT.Clear();
            BergamoOrdersDT.Clear();
            ep041OrdersDT.Clear();
            ep071OrdersDT.Clear();
            ep206OrdersDT.Clear();
            ep216OrdersDT.Clear();
            BostonOrdersDT.Clear();
            LeonOrdersDT.Clear();
            LimogOrdersDT.Clear();
            ep066Marsel4OrdersDT.Clear();
            ep110JersyOrdersDT.Clear();
            ep018Marsel1OrdersDT.Clear();
            ep043ShervudOrdersDT.Clear();
            UrbanOrdersDT.Clear();
            AlbyOrdersDT.Clear();
            BrunoOrdersDT.Clear();
            epsh406Techno4OrdersDT.Clear();
            LukOrdersDT.Clear();
            LukPVHOrdersDT.Clear();
            MilanoOrdersDT.Clear();
            PragaOrdersDT.Clear();
            SigmaOrdersDT.Clear();
            FatOrdersDT.Clear();
        }

        public ArrayList GetFrontsID
        {
            set
            {
                FrontsID = value;
            }
        }

        public bool GetOrders(int WorkAssignmentID)
        {
            for (int i = 0; i < FrontsID.Count; i++)
            {
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.TechnoN))
                    GetFrontsOrders(ref TechnoNOrdersDT, WorkAssignmentID, Fronts.TechnoN);
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Antalia))
                    GetFrontsOrders(ref AntaliaOrdersDT, WorkAssignmentID, Fronts.Antalia);
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Nord95))
                    GetFrontsOrders(ref Nord95OrdersDT, WorkAssignmentID, Fronts.Nord95);
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.epFox))
                    GetFrontsOrders(ref epFoxOrdersDT, WorkAssignmentID, Fronts.epFox);
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Venecia))
                    GetFrontsOrders(ref VeneciaOrdersDT, WorkAssignmentID, Fronts.Venecia);
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Bergamo))
                    GetFrontsOrders(ref BergamoOrdersDT, WorkAssignmentID, Fronts.Bergamo);
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.ep041))
                    GetFrontsOrders(ref ep041OrdersDT, WorkAssignmentID, Fronts.ep041);
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.ep071))
                    GetFrontsOrders(ref ep071OrdersDT, WorkAssignmentID, Fronts.ep071);
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.ep206))
                    GetFrontsOrders(ref ep206OrdersDT, WorkAssignmentID, Fronts.ep206);
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.ep216))
                    GetFrontsOrders(ref ep216OrdersDT, WorkAssignmentID, Fronts.ep216);
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Boston))
                    GetFrontsOrders(ref BostonOrdersDT, WorkAssignmentID, Fronts.Boston);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Leon))
                    GetFrontsOrders(ref LeonOrdersDT, WorkAssignmentID, Fronts.Leon);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Limog))
                    GetFrontsOrders(ref LimogOrdersDT, WorkAssignmentID, Fronts.Limog);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.ep066Marsel4))
                    GetFrontsOrders(ref ep066Marsel4OrdersDT, WorkAssignmentID, Fronts.ep066Marsel4);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.ep110Jersy))
                    GetFrontsOrders(ref ep110JersyOrdersDT, WorkAssignmentID, Fronts.ep110Jersy);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.ep018Marsel1))
                    GetFrontsOrders(ref ep018Marsel1OrdersDT, WorkAssignmentID, Fronts.ep018Marsel1);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.ep043Shervud))
                    GetFrontsOrders(ref ep043ShervudOrdersDT, WorkAssignmentID, Fronts.ep043Shervud);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Urban))
                    GetFrontsOrders(ref UrbanOrdersDT, WorkAssignmentID, Fronts.Urban);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Alby))
                    GetFrontsOrders(ref AlbyOrdersDT, WorkAssignmentID, Fronts.Alby);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Bruno))
                    GetFrontsOrders(ref BrunoOrdersDT, WorkAssignmentID, Fronts.Bruno);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.epsh406Techno4))
                    GetFrontsOrders(ref epsh406Techno4OrdersDT, WorkAssignmentID, Fronts.epsh406Techno4);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Luk))
                    GetFrontsOrders(ref LukOrdersDT, WorkAssignmentID, Fronts.Luk);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.LukPVH))
                    GetFrontsOrders(ref LukPVHOrdersDT, WorkAssignmentID, Fronts.LukPVH);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Milano))
                    GetFrontsOrders(ref MilanoOrdersDT, WorkAssignmentID, Fronts.Milano);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Praga))
                    GetFrontsOrders(ref PragaOrdersDT, WorkAssignmentID, Fronts.Praga);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Sigma))
                    GetFrontsOrders(ref SigmaOrdersDT, WorkAssignmentID, Fronts.Sigma);
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Fat))
                    GetFrontsOrders(ref FatOrdersDT, WorkAssignmentID, Fronts.Fat);
            }

            ProfileNamesDT.Clear();
            GetProfileNames(ref ProfileNamesDT, WorkAssignmentID);

            if (TechnoNOrdersDT.Rows.Count == 0 && AntaliaOrdersDT.Rows.Count == 0 &&
                Nord95OrdersDT.Rows.Count == 0 && epFoxOrdersDT.Rows.Count == 0 && VeneciaOrdersDT.Rows.Count == 0 && BergamoOrdersDT.Rows.Count == 0 &&
                ep041OrdersDT.Rows.Count == 0 && ep071OrdersDT.Rows.Count == 0 && ep206OrdersDT.Rows.Count == 0 && ep216OrdersDT.Rows.Count == 0 && 
                BostonOrdersDT.Rows.Count == 0 && LeonOrdersDT.Rows.Count == 0 &&
                LimogOrdersDT.Rows.Count == 0 && LukOrdersDT.Rows.Count == 0 && LukPVHOrdersDT.Rows.Count == 0 &&
                ep066Marsel4OrdersDT.Rows.Count == 0 && ep110JersyOrdersDT.Rows.Count == 0 && 
                ep018Marsel1OrdersDT.Rows.Count == 0 && ep043ShervudOrdersDT.Rows.Count == 0 &&
                UrbanOrdersDT.Rows.Count == 0 && AlbyOrdersDT.Rows.Count == 0 && BrunoOrdersDT.Rows.Count == 0 && epsh406Techno4OrdersDT.Rows.Count == 0 &&
                MilanoOrdersDT.Rows.Count == 0 && PragaOrdersDT.Rows.Count == 0 && SigmaOrdersDT.Rows.Count == 0 &&
                FatOrdersDT.Rows.Count == 0)
                return false;
            else
                return true;
        }

        public void GetCurrentDate()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.UsersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    CurrentDate = Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        public void CreateExcel(int WorkAssignmentID, string ClientName, string BatchName, ref string sSourceFileName)
        {
            GetCurrentDate();

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont Calibri11F = hssfworkbook.CreateFont();
            Calibri11F.FontHeightInPoints = 11;
            Calibri11F.FontName = "Calibri";

            HSSFFont CalibriBold11F = hssfworkbook.CreateFont();
            CalibriBold11F.FontHeightInPoints = 11;
            CalibriBold11F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold11F.FontName = "Calibri";

            HSSFFont Serif8F = hssfworkbook.CreateFont();
            Serif8F.FontHeightInPoints = 8;
            Serif8F.FontName = "MS Sans Serif";

            HSSFFont Serif10F = hssfworkbook.CreateFont();
            Serif10F.FontHeightInPoints = 10;
            Serif10F.FontName = "MS Sans Serif";

            HSSFFont SerifBold10F = hssfworkbook.CreateFont();
            SerifBold10F.FontHeightInPoints = 10;
            SerifBold10F.FontName = "MS Sans Serif";
            SerifBold10F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;

            HSSFCellStyle Calibri11CS = hssfworkbook.CreateCellStyle();
            Calibri11CS.SetFont(Calibri11F);

            HSSFCellStyle CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.SetFont(CalibriBold11F);

            HSSFCellStyle TableHeaderCS = hssfworkbook.CreateCellStyle();
            TableHeaderCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.SetFont(Serif8F);

            HSSFCellStyle TableHeaderDecCS = hssfworkbook.CreateCellStyle();
            TableHeaderDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.SetFont(Serif8F);

            HSSFCellStyle TableContentCS = hssfworkbook.CreateCellStyle();
            TableContentCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableContentCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableContentCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableContentCS.RightBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableContentCS.TopBorderColor = HSSFColor.BLACK.index;
            TableContentCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountCS = hssfworkbook.CreateCellStyle();
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountDecCS = hssfworkbook.CreateCellStyle();
            TotamAmountDecCS.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            #endregion
            
            TechnoNSimpleDT.Clear();
            GetSimpleFronts(TechnoNOrdersDT, ref TechnoNSimpleDT);
            TechnoNVitrinaDT.Clear();
            GetVitrinaFronts(TechnoNOrdersDT, ref TechnoNVitrinaDT);
            TechnoNGridsDT.Clear();
            
            AntaliaSimpleDT.Clear();
            GetSimpleFronts(AntaliaOrdersDT, ref AntaliaSimpleDT);
            AntaliaVitrinaDT.Clear();
            GetVitrinaFronts(AntaliaOrdersDT, ref AntaliaVitrinaDT);
            AntaliaGridsDT.Clear();
            GetGridFronts(AntaliaOrdersDT, ref AntaliaGridsDT);

            Nord95SimpleDT.Clear();
            GetSimpleFronts(Nord95OrdersDT, ref Nord95SimpleDT);
            Nord95VitrinaDT.Clear();
            GetVitrinaFronts(Nord95OrdersDT, ref Nord95VitrinaDT);
            Nord95GridsDT.Clear();
            GetGridFronts(Nord95OrdersDT, ref Nord95GridsDT);

            epFoxSimpleDT.Clear();
            GetSimpleFronts(epFoxOrdersDT, ref epFoxSimpleDT);
            epFoxVitrinaDT.Clear();
            GetVitrinaFronts(epFoxOrdersDT, ref epFoxVitrinaDT);
            epFoxGridsDT.Clear();
            GetGridFronts(epFoxOrdersDT, ref epFoxGridsDT);

            VeneciaSimpleDT.Clear();
            GetSimpleFronts(VeneciaOrdersDT, ref VeneciaSimpleDT);
            VeneciaVitrinaDT.Clear();
            GetVitrinaFronts(VeneciaOrdersDT, ref VeneciaVitrinaDT);
            VeneciaGridsDT.Clear();
            GetGridFronts(VeneciaOrdersDT, ref VeneciaGridsDT);

            BergamoSimpleDT.Clear();
            GetSimpleFronts(BergamoOrdersDT, ref BergamoSimpleDT);
            BergamoVitrinaDT.Clear();
            GetVitrinaFronts(BergamoOrdersDT, ref BergamoVitrinaDT);
            BergamoGridsDT.Clear();
            GetGridFronts(BergamoOrdersDT, ref BergamoGridsDT);

            ep041SimpleDT.Clear();
            GetSimpleFronts(ep041OrdersDT, ref ep041SimpleDT);
            ep041VitrinaDT.Clear();
            GetVitrinaFronts(ep041OrdersDT, ref ep041VitrinaDT);
            ep041GridsDT.Clear();
            GetGridFronts(ep041OrdersDT, ref ep041GridsDT);

            ep071SimpleDT.Clear();
            GetSimpleFronts(ep071OrdersDT, ref ep071SimpleDT);
            ep071VitrinaDT.Clear();
            GetVitrinaFronts(ep071OrdersDT, ref ep071VitrinaDT);
            ep071GridsDT.Clear();
            GetGridFronts(ep071OrdersDT, ref ep071GridsDT);

            ep206SimpleDT.Clear();
            GetSimpleFronts(ep206OrdersDT, ref ep206SimpleDT);
            ep206VitrinaDT.Clear();
            GetVitrinaFronts(ep206OrdersDT, ref ep206VitrinaDT);
            ep206GridsDT.Clear();
            GetGridFronts(ep206OrdersDT, ref ep206GridsDT);

            ep216SimpleDT.Clear();
            GetSimpleFronts(ep216OrdersDT, ref ep216SimpleDT);
            ep216VitrinaDT.Clear();
            GetVitrinaFronts(ep216OrdersDT, ref ep216VitrinaDT);
            ep216GridsDT.Clear();
            GetGridFronts(ep216OrdersDT, ref ep216GridsDT);

            BostonSimpleDT.Clear();
            GetSimpleFronts(BostonOrdersDT, ref BostonSimpleDT);
            BostonVitrinaDT.Clear();
            GetVitrinaFronts(BostonOrdersDT, ref BostonVitrinaDT);
            BostonGridsDT.Clear();
            GetGridFronts(BostonOrdersDT, ref BostonGridsDT);

            LeonSimpleDT.Clear();
            GetSimpleFronts(LeonOrdersDT, ref LeonSimpleDT);
            LeonVitrinaDT.Clear();
            GetVitrinaFronts(LeonOrdersDT, ref LeonVitrinaDT);
            LeonGridsDT.Clear();
            GetGridFronts(LeonOrdersDT, ref LeonGridsDT);

            LimogSimpleDT.Clear();
            GetSimpleFronts(LimogOrdersDT, ref LimogSimpleDT);
            LimogVitrinaDT.Clear();
            GetVitrinaFronts(LimogOrdersDT, ref LimogVitrinaDT);
            LimogGridsDT.Clear();
            GetGridFronts(LimogOrdersDT, ref LimogGridsDT);

            ep066Marsel4SimpleDT.Clear();
            GetSimpleFronts(ep066Marsel4OrdersDT, ref ep066Marsel4SimpleDT);
            ep066Marsel4VitrinaDT.Clear();
            GetVitrinaFronts(ep066Marsel4OrdersDT, ref ep066Marsel4VitrinaDT);
            ep066Marsel4GridsDT.Clear();
            GetGridFronts(ep066Marsel4OrdersDT, ref ep066Marsel4GridsDT);

            ep110JersySimpleDT.Clear();
            GetSimpleFronts(ep110JersyOrdersDT, ref ep110JersySimpleDT);
            ep110JersyVitrinaDT.Clear();
            GetVitrinaFronts(ep110JersyOrdersDT, ref ep110JersyVitrinaDT);
            ep110JersyGridsDT.Clear();
            GetGridFronts(ep110JersyOrdersDT, ref ep110JersyGridsDT);

            ep018Marsel1SimpleDT.Clear();
            GetSimpleFronts(ep018Marsel1OrdersDT, ref ep018Marsel1SimpleDT);
            ep018Marsel1VitrinaDT.Clear();
            GetVitrinaFronts(ep018Marsel1OrdersDT, ref ep018Marsel1VitrinaDT);
            ep018Marsel1GridsDT.Clear();
            GetGridFronts(ep018Marsel1OrdersDT, ref ep018Marsel1GridsDT);

            ep043ShervudSimpleDT.Clear();
            GetSimpleFronts(ep043ShervudOrdersDT, ref ep043ShervudSimpleDT);
            ep043ShervudVitrinaDT.Clear();
            GetVitrinaFronts(ep043ShervudOrdersDT, ref ep043ShervudVitrinaDT);
            ep043ShervudGridsDT.Clear();
            GetGridFronts(ep043ShervudOrdersDT, ref ep043ShervudGridsDT);

            UrbanSimpleDT.Clear();
            GetSimpleFronts(UrbanOrdersDT, ref UrbanSimpleDT);
            UrbanVitrinaDT.Clear();
            GetVitrinaFronts(UrbanOrdersDT, ref UrbanVitrinaDT);
            UrbanGridsDT.Clear();
            GetGridFronts(UrbanOrdersDT, ref UrbanGridsDT);

            AlbySimpleDT.Clear();
            GetSimpleFronts(AlbyOrdersDT, ref AlbySimpleDT);
            AlbyVitrinaDT.Clear();
            GetVitrinaFronts(AlbyOrdersDT, ref AlbyVitrinaDT);
            AlbyGridsDT.Clear();
            GetGridFronts(AlbyOrdersDT, ref AlbyGridsDT);

            BrunoSimpleDT.Clear();
            GetSimpleFronts(BrunoOrdersDT, ref BrunoSimpleDT);
            BrunoVitrinaDT.Clear();
            GetVitrinaFronts(BrunoOrdersDT, ref BrunoVitrinaDT);
            BrunoGridsDT.Clear();
            GetGridFronts(BrunoOrdersDT, ref BrunoGridsDT);

            epsh406Techno4SimpleDT.Clear();
            GetSimpleFronts(epsh406Techno4OrdersDT, ref epsh406Techno4SimpleDT);
            epsh406Techno4VitrinaDT.Clear();
            GetVitrinaFronts(epsh406Techno4OrdersDT, ref epsh406Techno4VitrinaDT);
            epsh406Techno4GridsDT.Clear();
            GetGridFronts(epsh406Techno4OrdersDT, ref epsh406Techno4GridsDT);

            LukSimpleDT.Clear();
            GetSimpleFronts(LukOrdersDT, ref LukSimpleDT);
            LukVitrinaDT.Clear();
            GetVitrinaFronts(LukOrdersDT, ref LukVitrinaDT);
            LukGridsDT.Clear();
            GetGridFronts(LukOrdersDT, ref LukGridsDT);

            LukPVHSimpleDT.Clear();
            GetSimpleFronts(LukPVHOrdersDT, ref LukPVHSimpleDT);
            LukPVHVitrinaDT.Clear();
            GetVitrinaFronts(LukPVHOrdersDT, ref LukPVHVitrinaDT);
            LukPVHGridsDT.Clear();
            GetGridFronts(LukPVHOrdersDT, ref LukPVHGridsDT);

            MilanoSimpleDT.Clear();
            GetSimpleFronts(MilanoOrdersDT, ref MilanoSimpleDT);
            MilanoVitrinaDT.Clear();
            GetVitrinaFronts(MilanoOrdersDT, ref MilanoVitrinaDT);
            MilanoGridsDT.Clear();
            GetGridFronts(MilanoOrdersDT, ref MilanoGridsDT);

            PragaSimpleDT.Clear();
            GetSimpleFronts(PragaOrdersDT, ref PragaSimpleDT);
            PragaVitrinaDT.Clear();
            GetVitrinaFronts(PragaOrdersDT, ref PragaVitrinaDT);
            PragaGridsDT.Clear();
            GetGridFronts(PragaOrdersDT, ref PragaGridsDT);

            SigmaSimpleDT.Clear();
            GetSimpleFronts(SigmaOrdersDT, ref SigmaSimpleDT);
            SigmaVitrinaDT.Clear();
            GetVitrinaFronts(SigmaOrdersDT, ref SigmaVitrinaDT);
            SigmaGridsDT.Clear();
            GetGridFronts(SigmaOrdersDT, ref SigmaGridsDT);
            SigmaGlassDT.Clear();
            GetGlassFronts(SigmaOrdersDT, ref SigmaGlassDT);

            FatSimpleDT.Clear();
            GetSimpleFronts(FatOrdersDT, ref FatSimpleDT);
            FatVitrinaDT.Clear();
            GetVitrinaFronts(FatOrdersDT, ref FatVitrinaDT);
            FatGridsDT.Clear();
            GetGridFronts(FatOrdersDT, ref FatGridsDT);

            if (TechnoNOrdersDT.Rows.Count == 0 && AntaliaOrdersDT.Rows.Count == 0 &&
                Nord95OrdersDT.Rows.Count == 0 && epFoxOrdersDT.Rows.Count == 0 && VeneciaOrdersDT.Rows.Count == 0 && BergamoOrdersDT.Rows.Count == 0 &&
                ep041OrdersDT.Rows.Count == 0 && ep071OrdersDT.Rows.Count == 0 && ep206OrdersDT.Rows.Count == 0 && ep216OrdersDT.Rows.Count == 0 && 
                BostonOrdersDT.Rows.Count == 0 && LeonOrdersDT.Rows.Count == 0
                && LimogOrdersDT.Rows.Count == 0 && LukOrdersDT.Rows.Count == 0 && LukPVHOrdersDT.Rows.Count == 0 && MilanoOrdersDT.Rows.Count == 0
                && ep066Marsel4OrdersDT.Rows.Count == 0 && ep110JersyOrdersDT.Rows.Count == 0 
                && ep018Marsel1OrdersDT.Rows.Count == 0 && ep043ShervudOrdersDT.Rows.Count == 0 &&
                UrbanOrdersDT.Rows.Count == 0 && AlbyOrdersDT.Rows.Count == 0 && BrunoOrdersDT.Rows.Count == 0 && epsh406Techno4OrdersDT.Rows.Count == 0
                && PragaOrdersDT.Rows.Count == 0 && SigmaOrdersDT.Rows.Count == 0 && FatOrdersDT.Rows.Count == 0)
                return;

            string DispatchDate = string.Empty;
            if (ClientName == "ЗОВ" || ClientName == "Маркетинг + ЗОВ")
            {
                string FrontsFilterString = "(SELECT MainOrderID FROM FrontsOrders WHERE FactoryID=1 AND NOT (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel1) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel3) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel4) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel5) +
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Porto) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Monte) +
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno1) +
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Shervud) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno2) +
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno4) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.pFox) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno5) +
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PR1) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PR2) +
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PR3) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PRU8) + "))";
                string SelectCommand = @"SELECT DispatchDate, MegaOrderID FROM MegaOrders
                    WHERE MegaOrderID IN (SELECT MegaOrderID FROM MainOrders
                    WHERE MainOrderID IN" + FrontsFilterString + " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")))";

                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                    ConnectionStrings.ZOVOrdersConnectionString))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0 && DT.Rows[0]["DispatchDate"] != DBNull.Value)
                            DispatchDate = Convert.ToDateTime(DT.Rows[0]["DispatchDate"]).ToString("dd.MM.yyyy");
                    }
                }
            }

            DataTable DistFrameColorsDT = DistFrameColorsTable(TechnoNOrdersDT, true);
            DataTable DT1 = AssemblyDT.Clone();
            DataTable DT2 = AssemblyDT.Clone();

            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), TechnoNSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), TechnoNVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), TechnoNGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(AntaliaOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), AntaliaSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), AntaliaVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), AntaliaGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Nord95OrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Nord95SimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Nord95VitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Nord95GridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(epFoxOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), epFoxSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), epFoxVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), epFoxGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(VeneciaOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), VeneciaSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), VeneciaVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), VeneciaGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(BergamoOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), BergamoSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), BergamoVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), BergamoGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(ep041OrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep041SimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep041VitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep041GridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(ep071OrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep071SimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep071VitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep071GridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(ep206OrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep206SimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep206VitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep206GridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(ep216OrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep216SimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep216VitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep216GridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(BostonOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), BostonSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), BostonVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), BostonGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(LeonOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LeonSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LeonVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LeonGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(LimogOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LimogSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LimogVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LimogGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(ep066Marsel4OrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep066Marsel4SimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep066Marsel4VitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep066Marsel4GridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(ep110JersyOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep110JersySimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep110JersyVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep110JersyGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(ep018Marsel1OrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep018Marsel1SimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep018Marsel1VitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep018Marsel1GridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(ep043ShervudOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep043ShervudSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep043ShervudVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ep043ShervudGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(UrbanOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), UrbanSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), UrbanVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), UrbanGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(AlbyOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), AlbySimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), AlbyVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), AlbyGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(BrunoOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), BrunoSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), BrunoVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), BrunoGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(epsh406Techno4OrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), epsh406Techno4SimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), epsh406Techno4VitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), epsh406Techno4GridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(LukOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LukSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LukVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LukGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(LukPVHOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LukPVHSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LukPVHVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LukPVHGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(MilanoOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), MilanoSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), MilanoVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), MilanoGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(PragaOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PragaSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PragaVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PragaGridsDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(SigmaOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), SigmaSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), SigmaVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), SigmaGridsDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), SigmaGlassDT, ref DT1);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(FatOrdersDT, true);
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), FatSimpleDT, ref DT1);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), FatVitrinaDT, ref DT2);
                AssemblySingly(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), FatGridsDT, ref DT1);
            }

            MartinToExcel(ref hssfworkbook,
                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                WorkAssignmentID, DispatchDate, BatchName, ClientName);

            RapidToExcel(ref hssfworkbook,
                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                WorkAssignmentID, DispatchDate, BatchName, ClientName);

            InsetToExcel(ref hssfworkbook,
                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                WorkAssignmentID, DispatchDate, BatchName, ClientName);

            AssemblyToExcel(ref hssfworkbook,
                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                DT1, DT2, WorkAssignmentID, DispatchDate, BatchName, ClientName);

            OrdersSummaryInfoToExcel(ref hssfworkbook,
                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                WorkAssignmentID, DispatchDate, BatchName, ClientName);

            GetMainOrdersSummary(ref hssfworkbook,
                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                WorkAssignmentID, BatchName);

            //string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);


            string FileName = WorkAssignmentID + " " + BatchName + "  Угол 45";
            string tempFolder = @"\\192.168.1.6\Public\USERS_2016\_ДЕЙСТВУЮЩИЕ\ПРОИЗВОДСТВО\ПРОФИЛЬ\инфиниум\";
            string CurrentMonthName = DateTime.Now.ToString("MMMM");
            tempFolder = Path.Combine(tempFolder, CurrentMonthName);
            if (!(Directory.Exists(tempFolder)))
            {
                Directory.CreateDirectory(tempFolder);
            }
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            sw.Stop();
            System.Diagnostics.Process.Start(file.FullName);
        }

        private string GetFileName(string sDestFolder, string ExcelName)
        {
            string sExtension = ".xls";
            string sFileName = ExcelName;

            int j = 1;
            while (FM.FileExist(sDestFolder + "/" + sFileName + sExtension, Configs.FTPType))
            {
                sFileName = ExcelName + "(" + j++ + ")";
            }
            sFileName = sFileName + sExtension;
            return sFileName;
        }

        public void OrdersSummaryInfoToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            int RowIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Заказы");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            decimal AllSquare = 0;
            string FrontName = string.Empty;
            
            if (TechnoNOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(TechnoNOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(TechnoNOrdersDT, TechnoNSimpleDT, TechnoNVitrinaDT, TechnoNGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (AntaliaOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(AntaliaOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(AntaliaOrdersDT, AntaliaSimpleDT, AntaliaVitrinaDT, AntaliaGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (Nord95OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(Nord95OrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(Nord95OrdersDT, Nord95SimpleDT, Nord95VitrinaDT, Nord95GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (epFoxOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(epFoxOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(epFoxOrdersDT, epFoxSimpleDT, epFoxVitrinaDT, epFoxGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            
            if (BostonOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(BostonOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(BostonOrdersDT, BostonSimpleDT, BostonVitrinaDT, BostonGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            if (BergamoOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(BergamoOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(BergamoOrdersDT, BergamoSimpleDT, BergamoVitrinaDT, BergamoGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            if (ep041OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(ep041OrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(ep041OrdersDT, ep041SimpleDT, ep041VitrinaDT, ep041GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            if (ep071OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(ep071OrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(ep071OrdersDT, ep071SimpleDT, ep071VitrinaDT, ep071GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            if (ep206OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(ep206OrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(ep206OrdersDT, ep206SimpleDT, ep206VitrinaDT, ep206GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            if (ep216OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(ep216OrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(ep216OrdersDT, ep216SimpleDT, ep216VitrinaDT, ep216GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            if (VeneciaOrdersDT.Rows.Count > 0)
            {
                DataTable TempDT = new DataTable();
                using (DataView DV = new DataView(VeneciaOrdersDT))
                {
                    TempDT = DV.ToTable(true, new string[] { "ProfileID" });
                }
                for (int i = 0; i < TempDT.Rows.Count; i++)
                {
                    int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                    DataTable TempOrdersDT = MilanoOrdersDT.Clone();
                    DataTable TempSimpleDT = MilanoOrdersDT.Clone();
                    DataTable TempVitrinaDT = MilanoOrdersDT.Clone();
                    DataTable TempGridsDT = MilanoOrdersDT.Clone();
                    DataRow[] rows = VeneciaOrdersDT.Select("ProfileID=" + ProfileID);
                    if (rows.Count() > 0)
                    {
                        foreach (DataRow item in rows)
                            TempOrdersDT.Rows.Add(item.ItemArray);

                        rows = VeneciaSimpleDT.Select("ProfileID=" + ProfileID);
                        foreach (DataRow item in rows)
                            TempSimpleDT.Rows.Add(item.ItemArray);

                        rows = VeneciaVitrinaDT.Select("ProfileID=" + ProfileID);
                        foreach (DataRow item in rows)
                            TempVitrinaDT.Rows.Add(item.ItemArray);

                        rows = VeneciaGridsDT.Select("ProfileID=" + ProfileID);
                        foreach (DataRow item in rows)
                            TempGridsDT.Rows.Add(item.ItemArray);

                        FrontName = ProfileName(Convert.ToInt32(TempOrdersDT.Rows[0]["FrontConfigID"]));
                        SummaryOrders(TempOrdersDT, TempSimpleDT, TempVitrinaDT, TempGridsDT, FrontName, ref AllSquare);
                        OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                        RowIndex++;
                        RowIndex++;
                    }
                    TempOrdersDT.Dispose();
                    TempSimpleDT.Dispose();
                    TempVitrinaDT.Dispose();
                    TempGridsDT.Dispose();
                }
                TempDT.Dispose();
            }
            if (LeonOrdersDT.Rows.Count > 0)
            {
                DataTable TempDT = new DataTable();
                using (DataView DV = new DataView(LeonOrdersDT))
                {
                    TempDT = DV.ToTable(true, new string[] { "ProfileID" });
                }
                for (int i = 0; i < TempDT.Rows.Count; i++)
                {
                    int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                    DataTable TempOrdersDT = MilanoOrdersDT.Clone();
                    DataTable TempSimpleDT = MilanoOrdersDT.Clone();
                    DataTable TempVitrinaDT = MilanoOrdersDT.Clone();
                    DataTable TempGridsDT = MilanoOrdersDT.Clone();
                    DataRow[] rows = LeonOrdersDT.Select("ProfileID=" + ProfileID);
                    if (rows.Count() > 0)
                    {
                        foreach (DataRow item in rows)
                            TempOrdersDT.Rows.Add(item.ItemArray);

                        rows = LeonSimpleDT.Select("ProfileID=" + ProfileID);
                        foreach (DataRow item in rows)
                            TempSimpleDT.Rows.Add(item.ItemArray);

                        rows = LeonVitrinaDT.Select("ProfileID=" + ProfileID);
                        foreach (DataRow item in rows)
                            TempVitrinaDT.Rows.Add(item.ItemArray);

                        rows = LeonGridsDT.Select("ProfileID=" + ProfileID);
                        foreach (DataRow item in rows)
                            TempGridsDT.Rows.Add(item.ItemArray);

                        FrontName = ProfileName(Convert.ToInt32(TempOrdersDT.Rows[0]["FrontConfigID"]));
                        SummaryOrders(TempOrdersDT, TempSimpleDT, TempVitrinaDT, TempGridsDT, FrontName, ref AllSquare);
                        OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                        RowIndex++;
                        RowIndex++;
                    }
                    TempOrdersDT.Dispose();
                    TempSimpleDT.Dispose();
                    TempVitrinaDT.Dispose();
                    TempGridsDT.Dispose();
                }
                TempDT.Dispose();
            }
            if (LimogOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(LimogOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(LimogOrdersDT, LimogSimpleDT, LimogVitrinaDT, LimogGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (ep066Marsel4OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(ep066Marsel4OrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(ep066Marsel4OrdersDT, ep066Marsel4SimpleDT, ep066Marsel4VitrinaDT, ep066Marsel4GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (ep110JersyOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(ep110JersyOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(ep110JersyOrdersDT, ep110JersySimpleDT, ep110JersyVitrinaDT, ep110JersyGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (ep018Marsel1OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(ep018Marsel1OrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(ep018Marsel1OrdersDT, ep018Marsel1SimpleDT, ep018Marsel1VitrinaDT, ep018Marsel1GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (ep043ShervudOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(ep043ShervudOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(ep043ShervudOrdersDT, ep043ShervudSimpleDT, ep043ShervudVitrinaDT, ep043ShervudGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (UrbanOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(UrbanOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(UrbanOrdersDT, UrbanSimpleDT, UrbanVitrinaDT, UrbanGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (AlbyOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(AlbyOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(AlbyOrdersDT, AlbySimpleDT, AlbyVitrinaDT, AlbyGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (BrunoOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(BrunoOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(BrunoOrdersDT, BrunoSimpleDT, BrunoVitrinaDT, BrunoGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (epsh406Techno4OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(epsh406Techno4OrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(epsh406Techno4OrdersDT, epsh406Techno4SimpleDT, epsh406Techno4VitrinaDT, epsh406Techno4GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (LukOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(LukOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(LukOrdersDT, LukSimpleDT, LukVitrinaDT, LukGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (LukPVHOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(LukPVHOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(LukPVHOrdersDT, LukPVHSimpleDT, LukPVHVitrinaDT, LukPVHGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (MilanoOrdersDT.Rows.Count > 0)
            {
                DataTable TempDT = new DataTable();
                using (DataView DV = new DataView(MilanoOrdersDT))
                {
                    TempDT = DV.ToTable(true, new string[] { "ProfileID" });
                }
                for (int i = 0; i < TempDT.Rows.Count; i++)
                {
                    int ProfileID = Convert.ToInt32(TempDT.Rows[i]["ProfileID"]);
                    DataTable TempOrdersDT = MilanoOrdersDT.Clone();
                    DataTable TempSimpleDT = MilanoOrdersDT.Clone();
                    DataTable TempVitrinaDT = MilanoOrdersDT.Clone();
                    DataTable TempGridsDT = MilanoOrdersDT.Clone();
                    DataRow[] rows = MilanoOrdersDT.Select("ProfileID=" + ProfileID);
                    if (rows.Count() > 0)
                    {
                        foreach (DataRow item in rows)
                            TempOrdersDT.Rows.Add(item.ItemArray);

                        rows = MilanoSimpleDT.Select("ProfileID=" + ProfileID);
                        foreach (DataRow item in rows)
                            TempSimpleDT.Rows.Add(item.ItemArray);

                        rows = MilanoVitrinaDT.Select("ProfileID=" + ProfileID);
                        foreach (DataRow item in rows)
                            TempVitrinaDT.Rows.Add(item.ItemArray);

                        rows = MilanoGridsDT.Select("ProfileID=" + ProfileID);
                        foreach (DataRow item in rows)
                            TempGridsDT.Rows.Add(item.ItemArray);

                        FrontName = ProfileName(Convert.ToInt32(TempOrdersDT.Rows[0]["FrontConfigID"]));
                        SummaryOrders(TempOrdersDT, TempSimpleDT, TempVitrinaDT, TempGridsDT, FrontName, ref AllSquare);
                        OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                        RowIndex++;
                        RowIndex++;
                    }
                    TempOrdersDT.Dispose();
                    TempSimpleDT.Dispose();
                    TempVitrinaDT.Dispose();
                    TempGridsDT.Dispose();
                }
                TempDT.Dispose();
            }
            if (PragaOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(PragaOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(PragaOrdersDT, PragaSimpleDT, PragaVitrinaDT, PragaGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (SigmaOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(SigmaOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(SigmaOrdersDT, SigmaSimpleDT, SigmaVitrinaDT, SigmaGlassDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (FatOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(FatOrdersDT.Rows[0]["FrontConfigID"]));
                SummaryOrders(FatOrdersDT, FatSimpleDT, FatVitrinaDT, FatGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            AllSquare = Decimal.Round(AllSquare, 3, MidpointRounding.AwayFromZero);
            OrdersToExcelSingly(ref hssfworkbook, CalibriBold11CS, CalibriBold11CS, ref sheet1, AllSquare, ref RowIndex);
        }

        public void RapidToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Рапид");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 6 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 16 * 256);

            RapidDT.Clear();
            CombineRapidSimple(ref RapidDT, true);
            CombineRapidFilenka(ref RapidDT);
            CombineRapidBoxes(ref RapidDT);
            CombineRapidFilenkaBoxes(ref RapidDT);

            DataTable DT = RapidDT.Copy();
            DataColumn Col1 = new DataColumn();
            DataColumn Col2 = new DataColumn();

            //Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            //Col1.SetOrdinal(4);

            if (DT.Rows.Count > 0)
            {
                RapidToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, "РапидТ", DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            //RapidDT.Clear();
            ////CombineRapidGrids(ref RapidDT);
            ////CombineRapidVitrina(ref RapidDT);
            //CombineRapidFilenka(ref RapidDT);
            //CombineRapidBoxes(ref RapidDT);

            //DT.Dispose();
            //Col1.Dispose();
            //DT = RapidDT.Copy();
            ////Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            ////Col1.SetOrdinal(4);

            //if (DT.Rows.Count > 0)
            //{
            //    RapidToExcelSingly(ref hssfworkbook, ref sheet1,
            //            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
            //    RowIndex++;
            //    RowIndex++;
            //}

            //DT.Dispose();
            //Col1.Dispose();
            //DT = RapidDT.Copy();
            //Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            //Col1.SetOrdinal(4);

            //if (DT.Rows.Count > 0)
            //{
            //    RapidToExcelSingly(ref hssfworkbook, ref sheet1,
            //            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
            //    RowIndex++;
            //    RowIndex++;
            //}

        }

        public void MartinToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("MARTIN");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 6 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 16 * 256);

            RapidDT.Clear();
            CombineRapidSimple(ref RapidDT, false);
            CombineRapidFilenka(ref RapidDT);
            //CombineRapidBoxes(ref RapidDT);
            CombineRapidFilenkaBoxes(ref RapidDT);

            DataTable DT = RapidDT.Copy();
            DataColumn Col1 = new DataColumn();
            DataColumn Col2 = new DataColumn();

            //Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            //Col1.SetOrdinal(4);

            if (DT.Rows.Count > 0)
            {
                RapidToExcelSingly(ref hssfworkbook, ref sheet1,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, "MARTIN", DispatchDate, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            //RapidDT.Clear();
            ////CombineRapidGrids(ref RapidDT);
            ////CombineRapidVitrina(ref RapidDT);
            //CombineRapidFilenka(ref RapidDT);
            //CombineRapidBoxes(ref RapidDT);

            //DT.Dispose();
            //Col1.Dispose();
            //DT = RapidDT.Copy();
            ////Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            ////Col1.SetOrdinal(4);

            //if (DT.Rows.Count > 0)
            //{
            //    RapidToExcelSingly(ref hssfworkbook, ref sheet1,
            //            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
            //    RowIndex++;
            //    RowIndex++;
            //}

            //DT.Dispose();
            //Col1.Dispose();
            //DT = RapidDT.Copy();
            //Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            //Col1.SetOrdinal(4);

            //if (DT.Rows.Count > 0)
            //{
            //    RapidToExcelSingly(ref hssfworkbook, ref sheet1,
            //            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex);
            //    RowIndex++;
            //    RowIndex++;
            //}

        }

        public void GetMainOrdersSummary(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            int MainOrderID = 0;
            int OrderNumber = 0;
            string ClientName = string.Empty;
            string DispatchDate = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;
            string SelectCommand = string.Empty;
            DataTable DistClientNamesDT = new DataTable();
            DataTable DistMainOrdersDT = new DataTable();
            DataTable DT = new DataTable();

            //            SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.ClientID, MegaOrders.OrderNumber, MainOrders.MainOrderID, MainOrders.Notes AS MNotes,
            //                FrontsOrdersID, FrontsOrders.MainOrderID, FrontID, FrontTypeID, InsetTypeID,
            //                ColorID, InsetColorID, AdditionalColorID, Height, Width, Count, FrontConfigID, FrontsOrders.Notes FROM FrontsOrders
            //                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
            //                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            //                INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID
            //                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
            //                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
            //                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" +
            //                Convert.ToInt32(Fronts.Antalia) + "," + Convert.ToInt32(Fronts.Fat) + "," + Convert.ToInt32(Fronts.Leon) + "," + Convert.ToInt32(Fronts.LeonF) + "," +
            //                Convert.ToInt32(Fronts.Limog) + "," + Convert.ToInt32(Fronts.Luk) + "," + Convert.ToInt32(Fronts.LukPVH) + "," +
            //                Convert.ToInt32(Fronts.Milano) + "," + Convert.ToInt32(Fronts.MilanoK) + "," + Convert.ToInt32(Fronts.MilanoKF) + "," +
            //                Convert.ToInt32(Fronts.Praga) + "," + Convert.ToInt32(Fronts.Sigma) + "," + Convert.ToInt32(Fronts.Venecia) + "," + Convert.ToInt32(Fronts.VeneciaF) + ")";

            SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.ClientID, MegaOrders.OrderNumber, MainOrders.MainOrderID, MainOrders.Notes AS MNotes,
                            FrontsOrdersID, FrontsOrders.MainOrderID, FrontID, PatinaID, InsetTypeID,
                            ColorID, TechnoColorID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, FrontsOrders.Notes FROM FrontsOrders
                            INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
                            INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
                            INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID
                            INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
                            INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" + string.Join(",", FrontsID.OfType<int>().ToArray()) + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            if (DT.Rows.Count > 0)
            {
                DataTable TempFrontsOrdersDT = DT.Clone();
                using (DataView DV = new DataView(DT))
                {
                    DV.Sort = "ClientName";
                    DistClientNamesDT = DV.ToTable(true, new string[] { "ClientName", "ClientID" });
                }

                for (int i = 0; i < DistClientNamesDT.Rows.Count; i++)
                {
                    ClientName = DistClientNamesDT.Rows[i]["ClientName"].ToString();

                    int RowIndex = 0;
                    HSSFSheet sheet1 = hssfworkbook.CreateSheet(ClientName.Replace("/", "-"));
                    sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                    sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                    sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                    sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                    sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                    sheet1.SetColumnWidth(0, 25 * 256);
                    sheet1.SetColumnWidth(1, 11 * 256);
                    sheet1.SetColumnWidth(2, 25 * 256);
                    sheet1.SetColumnWidth(3, 15 * 256);
                    sheet1.SetColumnWidth(4, 6 * 256);
                    sheet1.SetColumnWidth(5, 6 * 256);
                    sheet1.SetColumnWidth(6, 6 * 256);

                    using (DataView DV = new DataView(DT, "ClientID=" + DistClientNamesDT.Rows[i]["ClientID"], "MainOrderID", DataViewRowState.CurrentRows))
                    {
                        DistMainOrdersDT = DV.ToTable(true, new string[] { "MainOrderID" });
                    }

                    for (int j = 0; j < DistMainOrdersDT.Rows.Count; j++)
                    {
                        MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[j]["MainOrderID"]);
                        DataRow[] Frows = DT.Select("MainOrderID=" + MainOrderID);
                        if (Frows.Count() == 0)
                            continue;
                        OrderNumber = Convert.ToInt32(Frows[0]["OrderNumber"]);
                        Notes = Frows[0]["MNotes"].ToString();
                        OrderName = "№" + OrderNumber.ToString() + "-" + MainOrderID;

                        TempFrontsOrdersDT.Clear();
                        FrontsOrdersDT.Clear();
                        foreach (DataRow row in Frows)
                            TempFrontsOrdersDT.Rows.Add(row.ItemArray);
                        CollectMainOrders(TempFrontsOrdersDT, ref FrontsOrdersDT);

                        MainOrdersSummaryInfoToExcel(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, FrontsOrdersDT,
                            WorkAssignmentID, DispatchDate, BatchName, ClientName, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                    }

                }
            }

            DistMainOrdersDT.Clear();
            DistClientNamesDT.Clear();
            DT.Clear();

            //            SelectCommand = @"SELECT infiniu2_zovreference.dbo.Clients.ClientName, MainOrders.ClientID, MainOrders.DocNumber, MegaOrders.DispatchDate, MainOrders.Notes AS MNotes,
            //                FrontsOrdersID, FrontsOrders.MainOrderID, FrontID, FrontTypeID, InsetTypeID,
            //                ColorID, InsetColorID, AdditionalColorID, Height, Width, Count, FrontConfigID, FrontsOrders.Notes FROM FrontsOrders
            //                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
            //                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            //                INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID
            //                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
            //                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
            //                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" +
            //                Convert.ToInt32(Fronts.Antalia) + "," + Convert.ToInt32(Fronts.Fat) + "," + Convert.ToInt32(Fronts.Leon) + "," + Convert.ToInt32(Fronts.LeonF) + "," +
            //                Convert.ToInt32(Fronts.Limog) + "," + Convert.ToInt32(Fronts.Luk) + "," + Convert.ToInt32(Fronts.LukPVH) + "," +
            //                Convert.ToInt32(Fronts.Milano) + "," + Convert.ToInt32(Fronts.MilanoK) + "," + Convert.ToInt32(Fronts.MilanoKF) + "," +
            //                Convert.ToInt32(Fronts.Praga) + "," + Convert.ToInt32(Fronts.Sigma) + "," + Convert.ToInt32(Fronts.Venecia) + "," + Convert.ToInt32(Fronts.VeneciaF) + ")";

            SelectCommand = @"SELECT infiniu2_zovreference.dbo.Clients.ClientName, MainOrders.ClientID, MainOrders.DocNumber, MegaOrders.DispatchDate, MainOrders.Notes AS MNotes,
                FrontsOrdersID, FrontsOrders.MainOrderID, FrontID, PatinaID, InsetTypeID,
                ColorID, TechnoColorID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, FrontsOrders.Notes FROM FrontsOrders
                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
                INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID
                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" + string.Join(",", FrontsID.OfType<int>().ToArray()) + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            if (DT.Rows.Count > 0)
            {
                DataTable TempFrontsOrdersDT = DT.Clone();
                using (DataView DV = new DataView(DT))
                {
                    DV.Sort = "ClientName";
                    DistClientNamesDT = DV.ToTable(true, new string[] { "ClientName", "ClientID" });
                }

                for (int i = 0; i < DistClientNamesDT.Rows.Count; i++)
                {
                    ClientName = DistClientNamesDT.Rows[i]["ClientName"].ToString();

                    int RowIndex = 0;
                    HSSFSheet sheet1 = hssfworkbook.CreateSheet(ClientName.Replace("/", "-"));
                    sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;
                    sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                    sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                    sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                    sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                    sheet1.SetColumnWidth(0, 25 * 256);
                    sheet1.SetColumnWidth(1, 11 * 256);
                    sheet1.SetColumnWidth(2, 25 * 256);
                    sheet1.SetColumnWidth(3, 15 * 256);
                    sheet1.SetColumnWidth(4, 6 * 256);
                    sheet1.SetColumnWidth(5, 6 * 256);
                    sheet1.SetColumnWidth(6, 6 * 256);

                    using (DataView DV = new DataView(DT, "ClientID=" + DistClientNamesDT.Rows[i]["ClientID"], "MainOrderID", DataViewRowState.CurrentRows))
                    {
                        DistMainOrdersDT = DV.ToTable(true, new string[] { "MainOrderID" });
                    }

                    for (int j = 0; j < DistMainOrdersDT.Rows.Count; j++)
                    {
                        MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[j]["MainOrderID"]);
                        DataRow[] Frows = DT.Select("MainOrderID=" + MainOrderID);
                        if (Frows.Count() == 0)
                            continue;
                        if (Frows[0]["DispatchDate"] != DBNull.Value)
                            DispatchDate = Convert.ToDateTime(Frows[0]["DispatchDate"]).ToString("dd.MM.yyyy");
                        Notes = Frows[0]["MNotes"].ToString();
                        OrderName = Frows[0]["DocNumber"].ToString();

                        TempFrontsOrdersDT.Clear();
                        FrontsOrdersDT.Clear();
                        foreach (DataRow row in Frows)
                            TempFrontsOrdersDT.Rows.Add(row.ItemArray);
                        CollectMainOrders(TempFrontsOrdersDT, ref FrontsOrdersDT);

                        MainOrdersSummaryInfoToExcel(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, FrontsOrdersDT,
                            WorkAssignmentID, DispatchDate, BatchName, ClientName, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                    }
                }
            }
        }

        public void MainOrdersSummaryInfoToExcel(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "Заказы");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, OrderName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Техно цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Квадратура");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal TotalSquare = 0;
            int TotalAmount = 0;

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void RapidToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string SheetName, string DispatchDate, string BatchName, string ClientName, ref int RowIndex)
        {
            HSSFCell cell = null;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, SheetName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal SticksCount = 0;
            int CType = 0;
            int FType = 0;
            int PType = 0;
            int TotalAmount = 0;
            int AllTotalAmount = 0;
            int Count = 0;
            int Height = 0;

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);
                FType = Convert.ToInt32(DT.Rows[0]["FrontType"]);
                PType = Convert.ToInt32(DT.Rows[0]["ProfileType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value && DT.Rows[x]["Height"] != DBNull.Value)
                {
                    Count = Convert.ToInt32(DT.Rows[x]["Count"]);
                    Height = Convert.ToInt32(DT.Rows[x]["Height"]);
                    SticksCount += (Height + 4) * Count;
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    Count = Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType"
                        || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "BoxCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (DT.Rows[x]["ColorType"] != DBNull.Value)
                    CType = Convert.ToInt32(DT.Rows[x]["ColorType"]);
                if (DT.Rows[x]["FrontType"] != DBNull.Value)
                    FType = Convert.ToInt32(DT.Rows[x]["FrontType"]);
                if (DT.Rows[x]["ProfileType"] != DBNull.Value)
                    PType = Convert.ToInt32(DT.Rows[x]["ProfileType"]);
                if (x + 1 <= DT.Rows.Count - 1 &&
                    (FType != Convert.ToInt32(DT.Rows[x + 1]["FrontType"]) || PType != Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]) || CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"])))
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType"
                            || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "BoxCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;
                    RowIndex++;

                    CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                    PType = Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]);
                    Count = 0;
                    Height = 0;
                    SticksCount = 0;
                    TotalAmount = 0;
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType"
                            || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "BoxCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType"
                            || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "BoxCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void MartinToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, ref int RowIndex)
        {
            HSSFCell cell = null;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "РапидТ");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal SticksCount = 0;
            int CType = 0;
            int FType = 0;
            int PType = 0;
            int TotalAmount = 0;
            int AllTotalAmount = 0;
            int Count = 0;
            int Height = 0;

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);
                FType = Convert.ToInt32(DT.Rows[0]["FrontType"]);
                PType = Convert.ToInt32(DT.Rows[0]["ProfileType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value && DT.Rows[x]["Height"] != DBNull.Value)
                {
                    Count = Convert.ToInt32(DT.Rows[x]["Count"]);
                    Height = Convert.ToInt32(DT.Rows[x]["Height"]);
                    SticksCount += (Height + 4) * Count;
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    Count = Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType"
                        || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "BoxCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1 &&
                    (FType != Convert.ToInt32(DT.Rows[x + 1]["FrontType"]) || PType != Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]) || CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"])))
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType"
                            || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "BoxCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;
                    RowIndex++;

                    CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                    PType = Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]);
                    Count = 0;
                    Height = 0;
                    SticksCount = 0;
                    TotalAmount = 0;
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType"
                            || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "BoxCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType"
                            || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "BoxCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void OrdersToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "Заказы");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            int ColumnIndex = -1;
            string ColumnName = string.Empty;

            for (int x = 0; x < SummOrdersDT.Columns.Count; x++)
            {
                if (SummOrdersDT.Columns[x].ColumnName == "Height" || SummOrdersDT.Columns[x].ColumnName == "Width")
                    continue;
                ColumnIndex++;
                ColumnName = SummOrdersDT.Columns[x].ColumnName;
                if (Contains(ColumnName, "_", StringComparison.OrdinalIgnoreCase))
                {
                    ColumnName = ColumnName.Substring(0, ColumnName.Length - 2);
                }
                if (ColumnName == "Sizes")
                {
                    ColumnName = "Размер";
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), ColumnIndex, ColumnName);
                    cell.CellStyle = TableHeaderCS;
                    continue;
                }
                if (ColumnName == "TotalAmount")
                {
                    ColumnName = "Итого";
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), ColumnIndex, ColumnName);
                    cell.CellStyle = TableHeaderCS;
                    continue;
                }
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), ColumnIndex, ColumnName);
                cell.CellStyle = TableHeaderCS;
                sheet1.SetColumnWidth(ColumnIndex, 19 * 256);
            }
            RowIndex++;
            TableHeaderCS.Alignment = HSSFCellStyle.ALIGN_LEFT;
            TableHeaderDecCS.Alignment = HSSFCellStyle.ALIGN_LEFT;

            HSSFFont FirstColF = hssfworkbook.CreateFont();
            FirstColF.FontHeightInPoints = 12;
            FirstColF.FontName = "MS Sans Serif";

            HSSFCellStyle FirstColCS = hssfworkbook.CreateCellStyle();
            FirstColCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            FirstColCS.LeftBorderColor = HSSFColor.BLACK.index;
            FirstColCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            FirstColCS.RightBorderColor = HSSFColor.BLACK.index;
            FirstColCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            FirstColCS.TopBorderColor = HSSFColor.BLACK.index;
            FirstColCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            FirstColCS.BottomBorderColor = HSSFColor.BLACK.index;
            FirstColCS.SetFont(FirstColF);

            for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
            {
                ColumnIndex = -1;
                for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
                {
                    if (SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                        continue;
                    Type t = SummOrdersDT.Rows[x][y].GetType();

                    ColumnIndex++;

                    if (x == SummOrdersDT.Rows.Count - 1 && int.TryParse(SummOrdersDT.Rows[x][y].ToString(), out int IntValue))
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(IntValue);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (x == SummOrdersDT.Rows.Count - 2 && double.TryParse(SummOrdersDT.Rows[x][y].ToString(), out double DecValue))
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(DecValue);
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }

                    if (int.TryParse(SummOrdersDT.Rows[x][y].ToString(), out IntValue))
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(IntValue);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(SummOrdersDT.Rows[x][y].ToString());

                        if (ColumnIndex == 0)
                            cell.CellStyle = FirstColCS;
                        else
                            cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                RowIndex++;
            }
        }

        public void OrdersToExcelSingly(ref HSSFWorkbook hssfworkbook, HSSFCellStyle CalibriBold11CS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, decimal AllSquare, ref int RowIndex)
        {
            CalibriBold11CS.Alignment = HSSFCellStyle.ALIGN_LEFT;
            TableHeaderDecCS.Alignment = HSSFCellStyle.ALIGN_LEFT;

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "ИТОГО:");
            cell.CellStyle = CalibriBold11CS;

            cell = sheet1.CreateRow(RowIndex).CreateCell(1);
            cell.SetCellValue(Convert.ToDouble(AllSquare));
            cell.CellStyle = TableHeaderDecCS;
        }

        public void InsetToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Вставка");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 11 * 256);
            sheet1.SetColumnWidth(3, 7 * 256);
            sheet1.SetColumnWidth(4, 12 * 256);

            InsetDT.Clear();
            CollectAllInsets(ref InsetDT);

            DataTable DT = InsetDT.Copy();
            DataColumn Col1 = new DataColumn();
            DataColumn Col2 = new DataColumn();

            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            if (DT.Rows.Count > 0)
            {
                AllInsetsToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            InsetDT.Clear();
            CollectInsetsGridsOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            if (DT.Rows.Count > 0)
            {
                GridsToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            InsetDT.Clear();
            CollectFilenkaOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            if (DT.Rows.Count > 0)
            {
                FilenkaToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            InsetDT.Clear();
            CollectPressOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            if (DT.Rows.Count > 0)
            {
                PressToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            RowIndex++;
        }

        public void AssemblyToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT1, DataTable DT2, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            int RowIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Зачистка");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            sheet1.SetColumnWidth(1, 17 * 256);
            sheet1.SetColumnWidth(2, 17 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 6 * 256);
            sheet1.SetColumnWidth(5, 6 * 256);
            sheet1.SetColumnWidth(6, 13 * 256);
            sheet1.SetColumnWidth(7, 13 * 256);

            DataTable DT = DT1.Copy();
            DataColumn Col1 = new DataColumn();
            DataColumn Col2 = new DataColumn();

            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
            Col1.SetOrdinal(6);
            Col2.SetOrdinal(7);

            if (DT.Rows.Count > 0)
            {
                Assembly1ToExcelSingly(ref hssfworkbook, ref sheet1,
                    Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Зачистка", ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            DT.Dispose();
            Col1.Dispose();
            Col2.Dispose();
            DT = DT2.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
            Col1.SetOrdinal(6);
            Col2.SetOrdinal(7);

            if (DT.Rows.Count > 0)
            {
                Assembly1ToExcelSingly(ref hssfworkbook, ref sheet1,
                    Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Зачистка", ref RowIndex);
            }

            RowIndex = 0;
            HSSFSheet sheet2 = hssfworkbook.CreateSheet("Сборка");
            sheet2.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet2.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet2.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet2.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet2.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet2.SetColumnWidth(0, 20 * 256);
            sheet2.SetColumnWidth(1, 17 * 256);
            sheet2.SetColumnWidth(2, 17 * 256);
            sheet2.SetColumnWidth(3, 6 * 256);
            sheet2.SetColumnWidth(4, 6 * 256);
            sheet2.SetColumnWidth(5, 6 * 256);
            sheet2.SetColumnWidth(6, 13 * 256);
            sheet2.SetColumnWidth(7, 13 * 256);

            DT.Dispose();
            Col1.Dispose();
            Col2.Dispose();
            DT = DT1.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
            Col1.SetOrdinal(6);
            Col2.SetOrdinal(7);

            if (DT.Rows.Count > 0)
            {
                Assembly2ToExcelSingly(ref hssfworkbook, ref sheet2,
                    Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Сборка", ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            DT.Dispose();
            Col1.Dispose();
            Col2.Dispose();
            DT = DT2.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
            Col1.SetOrdinal(6);
            Col2.SetOrdinal(7);

            if (DT.Rows.Count > 0)
            {
                Assembly2ToExcelSingly(ref hssfworkbook, ref sheet2,
                    Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Сборка", ref RowIndex);
            }
        }

        public void Assembly1ToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string PageName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            RowIndex++;
            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Зачистка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Обклад витрин");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void Assembly2ToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string PageName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            RowIndex++;
            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Сверление");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "Square")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);
        }

        public void AllInsetsToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            RowIndex++;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int TotalAmount = 0;
            int AllTotalAmount = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalAmount = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void GridsToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal TotalSquare = 0;
            decimal AllTotalSquare = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        if (DT.Rows[x][y].ToString().IndexOf("3х4") != -1)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(DT.Rows[x][y].ToString());
                            cell.CellStyle = CalibriBold11CS;
                        }
                        else
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(DT.Rows[x][y].ToString());
                            cell.CellStyle = TableHeaderCS;
                        }
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 2, MidpointRounding.AwayFromZero);

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void PressToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal TotalSquare = 0;
            decimal AllTotalSquare = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 2, MidpointRounding.AwayFromZero);

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void FilenkaToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal TotalSquare = 0;
            decimal AllTotalSquare = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 2, MidpointRounding.AwayFromZero);

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        private bool Contains(string source, string toCheck, StringComparison comp)
        {
            return source.IndexOf(toCheck, comp) >= 0;
        }
    }

    public class ProfilAngle90Assignments : IFirstProfilName, IColorName, IInsetTypeName, IInsetColorName
    {
        ArrayList FrontsID;
        FileManager FM = new FileManager();
        DateTime CurrentDate;

        bool bImpostMargin = false;
        int ColorType = 0;
        int FrontType = 0;

        private DataTable FrontsDataTable = null;
        private DataTable FrameColorsDataTable = null;
        private DataTable PatinaDataTable = null;
        private DataTable InsetTypesDataTable = null;
        private DataTable InsetColorsDataTable = null;
        DataTable TotalInfoDT;
        DataTable WidthMegaInsetsDT;

        DataTable RapidDT;
        DataTable StemasDT;
        DataTable InsetDT;
        DataTable AssemblyDT;
        DataTable FrontsOrdersDT;
        DataTable SummOrdersDT;

        DataTable ProfileNamesDT;

        DataTable Marsel1VitrinaDT;
        DataTable Marsel3VitrinaDT;
        DataTable ShervudVitrinaDT;
        DataTable Techno1VitrinaDT;
        DataTable Techno2VitrinaDT;
        DataTable pFoxVitrinaDT;
        DataTable Techno4VitrinaDT;
        DataTable Techno5VitrinaDT;
        DataTable PR1VitrinaDT;
        DataTable PR3VitrinaDT;
        DataTable PRU8VitrinaDT;

        DataTable Marsel1GridsDT;
        DataTable Marsel3GridsDT;
        DataTable Techno1GridsDT;
        DataTable Techno2GridsDT;
        DataTable Techno4GridsDT;
        DataTable pFoxGridsDT;
        DataTable Techno5GridsDT;
        DataTable PR1GridsDT;
        DataTable PR3GridsDT;
        DataTable PRU8GridsDT;

        DataTable Marsel1SimpleDT;
        DataTable Marsel3SimpleDT;
        DataTable ShervudSimpleDT;
        DataTable Techno1SimpleDT;
        DataTable Techno2SimpleDT;
        DataTable Techno4SimpleDT;
        DataTable pFoxSimpleDT;
        DataTable Techno5SimpleDT;
        DataTable PR1SimpleDT;
        DataTable PR3SimpleDT;
        DataTable PRU8SimpleDT;

        DataTable Techno1LuxDT;
        DataTable Techno2LuxDT;
        DataTable Techno4LuxDT;
        DataTable Techno5LuxDT;
        DataTable PR3LuxDT;

        DataTable Techno1MegaDT;
        DataTable Techno2MegaDT;

        DataTable Techno4MegaDT;
        
        DataTable Marsel4VitrinaDT;
        DataTable Marsel4GridsDT;
        DataTable Marsel4SimpleDT;
        DataTable Marsel4OrdersDT;

        DataTable Jersy110VitrinaDT;
        DataTable Jersy110GridsDT;
        DataTable Jersy110SimpleDT;
        DataTable Jersy110OrdersDT;

        DataTable Marsel5VitrinaDT;
        DataTable Marsel5GridsDT;
        DataTable Marsel5SimpleDT;
        DataTable Marsel5OrdersDT;

        DataTable PortoVitrinaDT;
        DataTable PortoGridsDT;
        DataTable PortoSimpleDT;
        DataTable PortoOrdersDT;

        DataTable MonteVitrinaDT;
        DataTable MonteGridsDT;
        DataTable MonteSimpleDT;
        DataTable MonteOrdersDT;

        DataTable Marsel1OrdersDT;
        DataTable Marsel3OrdersDT;
        
        DataTable ShervudOrdersDT;
        DataTable Techno1OrdersDT;
        DataTable Techno2OrdersDT;
        DataTable Techno4OrdersDT;
        DataTable pFoxOrdersDT;
        //DataTable Techno4MegaOrdersDT;
        DataTable Techno5OrdersDT;
        DataTable PR1OrdersDT;
        DataTable PR3OrdersDT;
        DataTable PRU8OrdersDT;

        public ProfilAngle90Assignments()
        {

        }

        public void Initialize()
        {
            Create();
            Fill();
        }

        private void Create()
        {
            FrontsID = new ArrayList();
            ProfileNamesDT = new DataTable();
            
            Marsel1VitrinaDT = new DataTable();
            Marsel1GridsDT = new DataTable();
            Marsel1SimpleDT = new DataTable();

            Marsel5VitrinaDT = new DataTable();
            Marsel5GridsDT = new DataTable();
            Marsel5SimpleDT = new DataTable();

            PortoVitrinaDT = new DataTable();
            PortoGridsDT = new DataTable();
            PortoSimpleDT = new DataTable();

            MonteVitrinaDT = new DataTable();
            MonteGridsDT = new DataTable();
            MonteSimpleDT = new DataTable();

            Marsel3VitrinaDT = new DataTable();
            Marsel3GridsDT = new DataTable();
            Marsel3SimpleDT = new DataTable();

            Marsel4VitrinaDT = new DataTable();
            Marsel4GridsDT = new DataTable();
            Marsel4SimpleDT = new DataTable();

            Jersy110VitrinaDT = new DataTable();
            Jersy110GridsDT = new DataTable();
            Jersy110SimpleDT = new DataTable();

            ShervudVitrinaDT = new DataTable();
            ShervudSimpleDT = new DataTable();

            Techno1VitrinaDT = new DataTable();
            Techno1GridsDT = new DataTable();
            Techno1SimpleDT = new DataTable();
            Techno1LuxDT = new DataTable();
            Techno1MegaDT = new DataTable();

            Techno2VitrinaDT = new DataTable();
            Techno2GridsDT = new DataTable();
            Techno2SimpleDT = new DataTable();
            Techno2LuxDT = new DataTable();
            Techno2MegaDT = new DataTable();

            Techno4VitrinaDT = new DataTable();
            Techno4GridsDT = new DataTable();
            Techno4SimpleDT = new DataTable();
            Techno4LuxDT = new DataTable();
            Techno4MegaDT = new DataTable();

            pFoxVitrinaDT = new DataTable();
            pFoxGridsDT = new DataTable();
            pFoxSimpleDT = new DataTable();

            Techno5VitrinaDT = new DataTable();
            Techno5GridsDT = new DataTable();
            Techno5SimpleDT = new DataTable();

            PR1VitrinaDT = new DataTable();
            PR1GridsDT = new DataTable();
            PR1SimpleDT = new DataTable();

            PR3VitrinaDT = new DataTable();
            PR3GridsDT = new DataTable();
            PR3SimpleDT = new DataTable();

            PRU8VitrinaDT = new DataTable();
            PRU8GridsDT = new DataTable();
            PRU8SimpleDT = new DataTable();

            ShervudOrdersDT = new DataTable();
            Techno1OrdersDT = new DataTable();
            Techno2OrdersDT = new DataTable();
            Techno4OrdersDT = new DataTable();
            pFoxOrdersDT = new DataTable();
            Techno5OrdersDT = new DataTable();
            PR1OrdersDT = new DataTable();
            PR3OrdersDT = new DataTable();
            PRU8OrdersDT = new DataTable();

            TotalInfoDT = new DataTable();
            TotalInfoDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            TotalInfoDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            TotalInfoDT.Columns.Add(new DataColumn("SticksCount", Type.GetType("System.Decimal")));

            WidthMegaInsetsDT = new DataTable();
            WidthMegaInsetsDT.Columns.Add(new DataColumn("HeightMin", Type.GetType("System.Int32")));
            WidthMegaInsetsDT.Columns.Add(new DataColumn("HeightMax", Type.GetType("System.Int32")));
            WidthMegaInsetsDT.Columns.Add(new DataColumn("GlassCount", Type.GetType("System.Int32")));
            WidthMegaInsetsDT.Columns.Add(new DataColumn("MegaCount", Type.GetType("System.Int32")));

            RapidDT = new DataTable();
            RapidDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            RapidDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            RapidDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            RapidDT.Columns.Add(new DataColumn("iCount", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("PR1Count", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("PR2Count", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("VitrinaCount", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("ProfileType", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            StemasDT = new DataTable();
            StemasDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            StemasDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            StemasDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            StemasDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            StemasDT.Columns.Add(new DataColumn("ImpostMargin", Type.GetType("System.Int32")));
            StemasDT.Columns.Add(new DataColumn("IsBox", Type.GetType("System.Boolean")));
            StemasDT.Columns.Add(new DataColumn("ProfileType", Type.GetType("System.Int32")));
            StemasDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            InsetDT = new DataTable();
            InsetDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            InsetDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("GlassCount", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("MegaCount", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("FrontID", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("InsetColorID", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("TechnoInsetColorID", Type.GetType("System.Int32")));

            AssemblyDT = new DataTable();
            AssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("TechnoColor", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            AssemblyDT.Columns.Add(new DataColumn("FrontType", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            FrontsOrdersDT = new DataTable();
            FrontsOrdersDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            FrontsOrdersDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            FrontsOrdersDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            FrontsOrdersDT.Columns.Add(new DataColumn("TechnoColor", Type.GetType("System.String")));
            FrontsOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            FrontsOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            FrontsOrdersDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            FrontsOrdersDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));

            SummOrdersDT = new DataTable();
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable = new DataTable();
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = FrameColorsDataTable.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = FrameColorsDataTable.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            FrameColorsDataTable.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void MegaInsetsNewRow(int HeightMin, int HeightMax, int GlassCount, int MegaCount)
        {
            DataRow NewRow = WidthMegaInsetsDT.NewRow();
            NewRow["HeightMin"] = HeightMin;
            NewRow["HeightMax"] = HeightMax;
            NewRow["GlassCount"] = GlassCount;
            NewRow["MegaCount"] = MegaCount;
            WidthMegaInsetsDT.Rows.Add(NewRow);
        }

        private void GetInsetColorsDT()
        {
            InsetColorsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InsetColors.InsetColorID, InsetColors.GroupID, infiniu2_catalog.dbo.TechStore.TechStoreName AS InsetColorName FROM InsetColors" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON InsetColors.InsetColorID = infiniu2_catalog.dbo.TechStore.TechStoreID ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = -1;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "-";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = 0;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "на выбор";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }

            }

        }

        private void Fill()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.ProfileID",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(ProfileNamesDT);
                ProfileNamesDT.Columns.Add(new DataColumn("ProfileType", Type.GetType("System.Int32")));
            }
            string SelectCommand = @"SELECT DISTINCT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1) ORDER BY TechStoreName";
            FrontsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            PatinaDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            GetColorsDT();
            GetInsetColorsDT();
            InsetTypesDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetTypes",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 FrontsOrdersID, MainOrderID, FrontID, InsetTypeID,
                ColorID, TechnoColorID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, Notes, ImpostMargin FROM FrontsOrders",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(Techno2OrdersDT);
                Techno2OrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));

                Marsel1OrdersDT = Techno2OrdersDT.Clone();
                Marsel1SimpleDT = Techno2OrdersDT.Clone();
                Marsel1VitrinaDT = Techno2OrdersDT.Clone();
                Marsel1GridsDT = Techno2OrdersDT.Clone();

                Marsel5OrdersDT = Techno2OrdersDT.Clone();
                Marsel5SimpleDT = Techno2OrdersDT.Clone();
                Marsel5VitrinaDT = Techno2OrdersDT.Clone();
                Marsel5GridsDT = Techno2OrdersDT.Clone();

                PortoOrdersDT = Techno2OrdersDT.Clone();
                PortoSimpleDT = Techno2OrdersDT.Clone();
                PortoVitrinaDT = Techno2OrdersDT.Clone();
                PortoGridsDT = Techno2OrdersDT.Clone();

                MonteOrdersDT = Techno2OrdersDT.Clone();
                MonteSimpleDT = Techno2OrdersDT.Clone();
                MonteVitrinaDT = Techno2OrdersDT.Clone();
                MonteGridsDT = Techno2OrdersDT.Clone();

                Marsel3OrdersDT = Techno2OrdersDT.Clone();
                Marsel3SimpleDT = Techno2OrdersDT.Clone();
                Marsel3VitrinaDT = Techno2OrdersDT.Clone();
                Marsel3GridsDT = Techno2OrdersDT.Clone();

                Marsel4OrdersDT = Techno2OrdersDT.Clone();
                Marsel4SimpleDT = Techno2OrdersDT.Clone();
                Marsel4VitrinaDT = Techno2OrdersDT.Clone();
                Marsel4GridsDT = Techno2OrdersDT.Clone();

                Jersy110OrdersDT = Techno2OrdersDT.Clone();
                Jersy110SimpleDT = Techno2OrdersDT.Clone();
                Jersy110VitrinaDT = Techno2OrdersDT.Clone();
                Jersy110GridsDT = Techno2OrdersDT.Clone();

                Techno2VitrinaDT = Techno2OrdersDT.Clone();
                Techno2GridsDT = Techno2OrdersDT.Clone();
                Techno2SimpleDT = Techno2OrdersDT.Clone();
                Techno2LuxDT = Techno2OrdersDT.Clone();
                Techno2MegaDT = Techno2OrdersDT.Clone();

                ShervudOrdersDT = Techno2OrdersDT.Clone();
                ShervudSimpleDT = Techno2OrdersDT.Clone();
                ShervudVitrinaDT = Techno2OrdersDT.Clone();

                Techno1OrdersDT = Techno2OrdersDT.Clone();
                Techno1SimpleDT = Techno2OrdersDT.Clone();
                Techno1VitrinaDT = Techno2OrdersDT.Clone();
                Techno1GridsDT = Techno2OrdersDT.Clone();
                Techno1LuxDT = Techno2OrdersDT.Clone();
                Techno1MegaDT = Techno2OrdersDT.Clone();

                Techno4OrdersDT = Techno2OrdersDT.Clone();
                Techno4VitrinaDT = Techno2OrdersDT.Clone();
                Techno4SimpleDT = Techno2OrdersDT.Clone();
                Techno4GridsDT = Techno2OrdersDT.Clone();
                Techno4LuxDT = Techno2OrdersDT.Clone();

                //Techno4MegaOrdersDT = Techno2OrdersDT.Clone();
                Techno4MegaDT = Techno2OrdersDT.Clone();

                pFoxOrdersDT = Techno2OrdersDT.Clone();
                pFoxSimpleDT = Techno2OrdersDT.Clone();
                pFoxVitrinaDT = Techno2OrdersDT.Clone();
                pFoxGridsDT = Techno2OrdersDT.Clone();

                Techno5OrdersDT = Techno2OrdersDT.Clone();
                Techno5SimpleDT = Techno2OrdersDT.Clone();
                Techno5VitrinaDT = Techno2OrdersDT.Clone();
                Techno5GridsDT = Techno2OrdersDT.Clone();
                Techno5LuxDT = Techno2OrdersDT.Clone();

                PR1OrdersDT = Techno2OrdersDT.Clone();
                PR1SimpleDT = Techno2OrdersDT.Clone();
                PR1VitrinaDT = Techno2OrdersDT.Clone();
                PR1GridsDT = Techno2OrdersDT.Clone();

                PR3OrdersDT = Techno2OrdersDT.Clone();
                PR3SimpleDT = Techno2OrdersDT.Clone();
                PR3VitrinaDT = Techno2OrdersDT.Clone();
                PR3GridsDT = Techno2OrdersDT.Clone();
                PR3LuxDT = Techno2OrdersDT.Clone();

                PRU8OrdersDT = Techno2OrdersDT.Clone();
                PRU8SimpleDT = Techno2OrdersDT.Clone();
                PRU8VitrinaDT = Techno2OrdersDT.Clone();
                PRU8GridsDT = Techno2OrdersDT.Clone();
            }
            MegaInsetsNewRow(0, 170, 1, 2);
            MegaInsetsNewRow(170, 262, 2, 3);
            MegaInsetsNewRow(262, 354, 3, 4);
            MegaInsetsNewRow(354, 446, 4, 5);
            MegaInsetsNewRow(446, 538, 5, 6);
            MegaInsetsNewRow(538, 630, 6, 7);
            MegaInsetsNewRow(630, 722, 7, 8);
            MegaInsetsNewRow(722, 814, 8, 9);
            MegaInsetsNewRow(814, 906, 9, 10);
            MegaInsetsNewRow(906, 998, 10, 11);
            MegaInsetsNewRow(998, 1090, 11, 12);
            MegaInsetsNewRow(1090, 1182, 12, 13);
            MegaInsetsNewRow(1182, 1274, 13, 14);
            MegaInsetsNewRow(1274, 1366, 14, 15);
            MegaInsetsNewRow(1366, 1458, 15, 16);
            MegaInsetsNewRow(1458, 1550, 16, 17);
            MegaInsetsNewRow(1550, 1642, 17, 18);
            MegaInsetsNewRow(1642, 1734, 18, 19);
            MegaInsetsNewRow(1734, 1826, 19, 20);
            MegaInsetsNewRow(1826, 1918, 20, 21);
            MegaInsetsNewRow(1918, 2010, 21, 22);
            MegaInsetsNewRow(2010, 2102, 22, 23);
            MegaInsetsNewRow(2102, 2194, 23, 24);
        }

        private void GetMegaInsetStickCount(int Height, ref int GlassCount, ref int MegaCount)
        {
            DataRow[] rows = WidthMegaInsetsDT.Select("HeightMin<=" + Height + " AND HeightMax>" + Height);
            if (rows.Count() > 0)
            {
                GlassCount = Convert.ToInt32(rows[0]["GlassCount"]);
                MegaCount = Convert.ToInt32(rows[0]["MegaCount"]);
            }
        }

        public string GetMarketClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_marketingorders.dbo.MegaOrders" +
                    " WHERE MegaOrderID=(SELECT TOP 1 MegaOrderID FROM infiniu2_marketingorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + "))",
                    ConnectionStrings.MarketingReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        public string GetZOVClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_zovorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + ")",
                    ConnectionStrings.ZOVReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        private string GetOrderName(int MainOrderID, int GroupType)
        {
            string name = string.Empty;
            string ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            if (GroupType == 1)
                ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            SelectCommand = @"SELECT MegaBatchID, BatchID FROM Batch WHERE BatchID IN (SELECT BatchID FROM BatchDetails WHERE MainOrderID = " + MainOrderID + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                if (DA.Fill(DT) > 0 && DT.Rows[0]["MegaBatchID"] != DBNull.Value && DT.Rows[0]["BatchID"] != DBNull.Value)
                    name = DT.Rows[0]["MegaBatchID"].ToString() + ", " + DT.Rows[0]["BatchID"] + ", " + MainOrderID;
            }
            return name;
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }

        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
                ColorName = Rows[0]["ColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        public string GetInsetTypeName(int InsetTypeID)
        {
            string InsetType = string.Empty;
            try
            {
                DataRow[] Rows = InsetTypesDataTable.Select("InsetTypeID = " + InsetTypeID);
                InsetType = Rows[0]["InsetTypeName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return InsetType;
        }

        public string GetInsetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = InsetColorsDataTable.Select("InsetColorID = " + ColorID);
                ColorName = Rows[0]["InsetColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        private string ProfileName(int ID, int ProfileType)
        {
            //ProfileType
            string name = string.Empty;
            DataRow[] rows = ProfileNamesDT.Select("FrontConfigID=" + ID + " AND ProfileType=" + ProfileType);
            if (rows.Count() > 0)
                name = rows[0]["TechStoreName"].ToString();
            return name;
        }

        private void TotalSum(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    decimal SticksCount = 0;
                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= HeightMargin)
                        Height = HeightMargin;

                    SticksCount = (Height + 4) * Count * 2;
                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "'");
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["SticksCount"] = SticksCount;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                        rows[0]["SticksCount"] = Convert.ToDecimal(rows[0]["SticksCount"]) + SticksCount;
                }

                SizesASC = "Width ASC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    decimal SticksCount = 0;
                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    SticksCount = (Height + 4) * Count * 2;
                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "'");
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["SticksCount"] = SticksCount;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                        rows[0]["SticksCount"] = Convert.ToDecimal(rows[0]["SticksCount"]) + SticksCount;
                }
            }
        }

        private void TotalSumTechno4(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, int HeightNarrowMargin)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    decimal SticksCount = 0;
                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    SticksCount = (Height + 4) * Count * 2;
                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "'");
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["SticksCount"] = SticksCount;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                        rows[0]["SticksCount"] = Convert.ToDecimal(rows[0]["SticksCount"]) + SticksCount;
                }

                SizesASC = "Width ASC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    decimal SticksCount = 0;
                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height < HeightMargin)
                        Height = Height - HeightNarrowMargin;
                    else
                        Height = Height - WidthMargin;
                    if (Height <= WidthMin)
                        Height = WidthMin;

                    SticksCount = (Height + 4) * Count * 2;
                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "'");
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["SticksCount"] = SticksCount;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                        rows[0]["SticksCount"] = Convert.ToDecimal(rows[0]["SticksCount"]) + SticksCount;
                }
            }
        }

        private void GetProfileNames(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID, Fronts Front)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();
            {
                SelectCommand = @"SELECT infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID,1 FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.ProfileID AND infiniu2_catalog.dbo.FrontsConfig.FrontConfigID IN (SELECT FrontConfigID FROM FrontsOrders
                    WHERE FrontID=" + Convert.ToInt32(Front) +
                        " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")))";
                if (FactoryID == 2)
                    SelectCommand = @"SELECT infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID,1 FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.ProfileID AND infiniu2_catalog.dbo.FrontsConfig.FrontConfigID IN (SELECT FrontConfigID FROM FrontsOrders
                    WHERE FrontID=" + Convert.ToInt32(Front) +
                            " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + ")))";
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);
                }
                foreach (DataRow item in DT.Rows)
                {
                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow.ItemArray = item.ItemArray;
                    DestinationDT.Rows.Add(NewRow);
                }

                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);
                }
                foreach (DataRow item in DT.Rows)
                {
                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow.ItemArray = item.ItemArray;
                    DestinationDT.Rows.Add(NewRow);
                }
            }
            {
                SelectCommand = @"SELECT infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID,2 FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.TechnoProfileID AND infiniu2_catalog.dbo.FrontsConfig.FrontConfigID IN (SELECT FrontConfigID FROM FrontsOrders
                    WHERE FrontID=" + Convert.ToInt32(Front) +
                        " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")))";
                if (FactoryID == 2)
                    SelectCommand = @"SELECT infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID,2 FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.TechnoProfileID AND infiniu2_catalog.dbo.FrontsConfig.FrontConfigID IN (SELECT FrontConfigID FROM FrontsOrders
                    WHERE FrontID=" + Convert.ToInt32(Front) +
                            " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + ")))";
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);
                }
                foreach (DataRow item in DT.Rows)
                {
                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow.ItemArray = item.ItemArray;
                    DestinationDT.Rows.Add(NewRow);
                }

                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);
                }
                foreach (DataRow item in DT.Rows)
                {
                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow.ItemArray = item.ItemArray;
                    DestinationDT.Rows.Add(NewRow);
                }
            }
        }

        private void GetVitrinaFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID=1");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetGridFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID IN (685,686,687,688,29470,29471)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetLuxFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID=860");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetMegaFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID=862");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetSimpleFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID NOT IN (1,860,862,685,686,687,688,29470,29471)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetFrontsOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID, Fronts Front)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, InsetTypeID,
                ColorID, TechnoColorID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, Notes, ImpostMargin FROM FrontsOrders
                WHERE (FrontConfigID IN (SELECT FrontConfigID FROM infiniu2_catalog.dbo.FrontsConfig AS F INNER JOIN
                         infiniu2_catalog.dbo.TechStore AS T ON F.TechnoProfileID = T.TechStoreID AND ((F.TechnoProfileID<>-1 AND SUBSTRING(T.TechStoreName, 1, 2) <> 'ПН' AND SUBSTRING(T.TechStoreName, 1, 1) <> 'Г'))) OR FrontsOrders.TechnoProfileID=-1)
AND FrontID=" + Convert.ToInt32(Front) +
                " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, InsetTypeID,
                    ColorID, TechnoColorID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, Notes, ImpostMargin FROM FrontsOrders
                    WHERE (FrontConfigID IN (SELECT FrontConfigID FROM infiniu2_catalog.dbo.FrontsConfig AS F INNER JOIN
                         infiniu2_catalog.dbo.TechStore AS T ON F.TechnoProfileID = T.TechStoreID AND ((F.TechnoProfileID<>-1 AND SUBSTRING(T.TechStoreName, 1, 2) <> 'ПН' AND SUBSTRING(T.TechStoreName, 1, 1) <> 'Г'))) OR FrontsOrders.TechnoProfileID=-1)
AND FrontID=" + Convert.ToInt32(Front) +
                    " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            //SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, InsetTypeID,
            //    ColorID, TechnoColorID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, Notes, ImpostMargin FROM FrontsOrders
            //    WHERE FrontID=" + Convert.ToInt32(Front) +
            //    " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            //if (FactoryID == 2)
            //    SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, InsetTypeID,
            //        ColorID, TechnoColorID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, Notes, ImpostMargin FROM FrontsOrders
            //        WHERE FrontID=" + Convert.ToInt32(Front) +
            //        " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                if (Convert.ToInt32(item["ImpostMargin"]) != 0)
                    bImpostMargin = true;
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private DataTable DistFrameColorsTable(DataTable SourceDT, bool OrderASC)
        {
            int ColorID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["ColorID"].ToString(), out ColorID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["ColorID"] = ColorID;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "ColorID ASC";
                else
                    DV.Sort = "ColorID DESC";
                DT = DV.ToTable(true, new string[] { "ColorID" });
            }
            return DT;
        }

        private DataTable DistInsetColorsTable(DataTable SourceDT, bool OrderASC)
        {
            int InsetColorID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("InsetColorID", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                //if (Convert.ToInt32(Row["InsetTypeID"]) != 2 && Convert.ToInt32(Row["InsetTypeID"]) != 5 && Convert.ToInt32(Row["InsetTypeID"]) != 6
                //    && Convert.ToInt32(Row["InsetTypeID"]) != 9 && Convert.ToInt32(Row["InsetTypeID"]) != 10 && Convert.ToInt32(Row["InsetTypeID"]) != 11)
                //    continue;

                if (int.TryParse(Row["InsetColorID"].ToString(), out InsetColorID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["InsetColorID"] = InsetColorID;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "InsetColorID ASC";
                else
                    DV.Sort = "InsetColorID DESC";
                DT = DV.ToTable(true, new string[] { "InsetColorID" });
            }
            return DT;
        }

        private DataTable DistMainOrdersTable(DataTable SourceDT, bool OrderASC)
        {
            int MainOrderID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("MainOrderID", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "MainOrderID ASC";
                else
                    DV.Sort = "MainOrderID DESC";
                DT = DV.ToTable(true, new string[] { "MainOrderID", "GroupType" });
            }
            return DT;
        }

        private void CollectAssemblySimple(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, int ColorType, bool Impost)
        {
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                string InsetColor = string.Empty;
                string TechnoColor = string.Empty;
                //витрины
                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT2.Rows[j]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT2.Rows[j]["TechnoInsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                InsetColor = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"]));
                if (Convert.ToInt32(rows[0]["InsetColorID"]) != -1)
                    InsetColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));

                TechnoColor = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"]));
                if (Convert.ToInt32(rows[0]["TechnoInsetColorID"]) != -1)
                    TechnoColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorType;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1);
                if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1)
                    NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1) + " ИМПОСТ";
                NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1 && Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));
                NewRow["InsetColor"] = InsetColor;
                NewRow["TechnoColor"] = TechnoColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectAssemblyVitrina(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, int ColorType, bool Impost)
        {
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                string InsetColor = "витрина";
                string TechnoColor = string.Empty;
                //витрины
                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT2.Rows[j]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT2.Rows[j]["TechnoInsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                TechnoColor = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"]));
                if (Convert.ToInt32(rows[0]["TechnoInsetColorID"]) != -1)
                    TechnoColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));

                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorType;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1);
                if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1)
                    NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1) + " ИМПОСТ";
                NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1 && Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));
                NewRow["InsetColor"] = InsetColor;
                NewRow["TechnoColor"] = TechnoColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectAssemblyGrids(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, int ColorType, bool Impost)
        {
            DataTable DT = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int i = 0; i < DT.Rows.Count; i++)
            {
                decimal Square = 0;
                int Count = 0;
                //филенки
                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetColorID"]) + " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                string TechnoColor = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"]));
                if (Convert.ToInt32(rows[0]["TechnoInsetColorID"]) != -1)
                    TechnoColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));

                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorType;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1);
                if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1)
                    NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1) + " ИМПОСТ";
                NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1 && Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"])) + " (РЕШ)";
                NewRow["TechnoColor"] = TechnoColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectAssemblyLux(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, int ColorType)
        {
            DataTable DT = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int i = 0; i < DT.Rows.Count; i++)
            {
                decimal Square = 0;
                int Count = 0;
                //филенки
                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetColorID"]) + " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                string TechnoColor = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"]));
                if (Convert.ToInt32(rows[0]["TechnoInsetColorID"]) != -1)
                    TechnoColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorType;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1);
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) != -1 && Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["TechnoColor"] = TechnoColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectAssemblyMega(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, int ColorType)
        {
            DataTable DT = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int i = 0; i < DT.Rows.Count; i++)
            {
                decimal Square = 0;
                int Count = 0;
                //филенки
                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetColorID"]) + " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                string TechnoColor = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"]));
                if (Convert.ToInt32(rows[0]["TechnoInsetColorID"]) != -1)
                    TechnoColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));

                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorType;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1);
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                {
                    if (Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                }
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["TechnoColor"] = TechnoColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectMainOrders(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT = new DataTable();

            using (DataView DV = new DataView(SourceDT, string.Empty, "FrontID, ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT = DV.ToTable(true, new string[] { "FrontID", "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int i = 0; i < DT.Rows.Count; i++)
            {
                decimal Square = 0;
                int Count = 0;

                DataRow[] rows = SourceDT.Select("FrontID=" + Convert.ToInt32(DT.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetColorID"]) + 
                    " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                string TechnoColor = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"]));
                if (Convert.ToInt32(rows[0]["TechnoInsetColorID"]) != -1)
                    TechnoColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1);
                NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Convert.ToInt32(rows[0]["InsetTypeID"]) == 1)
                    NewRow["InsetColor"] = "витрина";
                else
                    NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["TechnoColor"] = TechnoColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
            DestinationDT.DefaultView.Sort = "Name, FrameColor, InsetColor, TechnoColor, Height, Width";
        }

        private void CollectOrders(DataTable DistinctSizesDT, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, string FrontName, bool Impost)
        {
            int InsetTypeID = 0;
            string ColName = string.Empty;
            string FrameColor = string.Empty;
            string InsetColor = string.Empty;

            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            for (int y = 0; y < DistinctSizesDT.Rows.Count; y++)
            {
                using (DataView DV = new DataView(SourceDT))
                {
                    DT1 = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID" });
                }
                for (int i = 0; i < DT1.Rows.Count; i++)
                {
                    using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]), string.Empty, DataViewRowState.CurrentRows))
                    {
                        DT2 = DV.ToTable(true, new string[] { "InsetTypeID" });
                    }
                    for (int j = 0; j < DT2.Rows.Count; j++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]), string.Empty, DataViewRowState.CurrentRows))
                        {
                            DT3 = DV.ToTable(true, new string[] { "InsetColorID" });
                        }
                        for (int x = 0; x < DT3.Rows.Count; x++)
                        {
                            using (DataView DV = new DataView(SourceDT, "InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]), string.Empty, DataViewRowState.CurrentRows))
                            {
                                DT4 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                            }
                            for (int c = 0; c < DT4.Rows.Count; c++)
                            {
                                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) + 
                                    " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) + " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                    " AND TechnoInsetTypeID=" + Convert.ToInt32(DT4.Rows[c]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT4.Rows[c]["TechnoInsetColorID"]));

                                if (rows.Count() > 0)
                                {
                                    InsetTypeID = Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]);
                                    //if (Convert.ToInt32(rows[0]["ColorID"]) == Convert.ToInt32(rows[0]["TechnoColorID"]))
                                    //    FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                                    //else
                                    //    FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));

                                    FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                                    if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                                        FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                                    if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1 && Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                                        FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));

                                    int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + InsetTypeID)[0]["GroupID"]);
                                    switch (GroupID)
                                    {
                                        case -1:
                                            InsetColor = "Витрина";
                                            break;
                                        case 7:
                                            InsetColor = "фил " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 8:
                                            InsetColor = "фил " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 3:
                                            InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 4:
                                            InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 16:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 17:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 18:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 19:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 12:
                                            InsetColor = "люкс " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 13:
                                            InsetColor = "мега " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"])) + "/" + GetInsetColorName(Convert.ToInt32(DT4.Rows[c]["TechnoInsetColorID"]));
                                            if (Convert.ToInt32(DT4.Rows[c]["TechnoInsetColorID"]) == 3943)
                                                InsetColor = "мега " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"])) + " Витрина";
                                            break;
                                        default:
                                            InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                    }

                                    ColName = FrameColor + "(" + InsetColor + ")_" + FrontType;
                                    if (Impost && Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) != -1)
                                        ColName = "Импост " + ColName;
                                    if (!DestinationDT.Columns.Contains(ColName))
                                        DestinationDT.Columns.Add(new DataColumn(ColName, Type.GetType("System.String")));

                                    DestinationDT.Rows[0][ColName] = FrontName;
                                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) + 
                                        " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) + " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                        " AND TechnoInsetTypeID=" + Convert.ToInt32(DT4.Rows[c]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT4.Rows[c]["TechnoInsetColorID"]) +
                                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[y]["Width"]));
                                    if (Srows.Count() > 0)
                                    {
                                        int Count = 0;
                                        foreach (DataRow item in Srows)
                                        {
                                            Count += Convert.ToInt32(item["Count"]);
                                        }

                                        DataRow[] Drows = DestinationDT.Select("Sizes='" + DistinctSizesDT.Rows[y]["Height"].ToString() + " X " + DistinctSizesDT.Rows[y]["Width"].ToString() + "'");
                                        if (Drows.Count() == 0)
                                        {
                                            DataRow NewRow = DestinationDT.NewRow();
                                            NewRow["Sizes"] = DistinctSizesDT.Rows[y]["Height"].ToString() + " X " + DistinctSizesDT.Rows[y]["Width"].ToString();
                                            NewRow["Height"] = DistinctSizesDT.Rows[y]["Height"];
                                            NewRow["Width"] = DistinctSizesDT.Rows[y]["Width"];
                                            NewRow[ColName] = Count;
                                            DestinationDT.Rows.Add(NewRow);
                                        }
                                        else
                                        {
                                            Drows[0][ColName] = Count;
                                        }
                                    }
                                }
                                else
                                    continue;

                            }
                        }
                    }
                }
            }
        }
        
        private DataTable DistHeightTable(DataTable SourceDT, bool OrderASC)
        {
            int Height = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("ImpostMargin", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["Height"].ToString(), out Height))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["Height"] = Height;
                    NewRow["ImpostMargin"] = Row["ImpostMargin"];
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "Height ASC";
                else
                    DV.Sort = "Height DESC";
                DT = DV.ToTable(true, new string[] { "Height", "ImpostMargin" });
            }
            return DT;
        }

        private DataTable DistWidthTable(DataTable SourceDT, bool OrderASC)
        {
            int Height = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["Width"].ToString(), out Height))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["Height"] = Height;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "Height ASC";
                else
                    DV.Sort = "Height DESC";
                DT = DV.ToTable(true, new string[] { "Height" });
            }
            return DT;
        }

        private DataTable DistSizesTable(DataTable SourceDT, bool OrderASC)
        {
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                DataRow NewRow = DT.NewRow();
                NewRow["Height"] = Row["Height"];
                NewRow["Width"] = Row["Width"];
                DT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "Height ASC, Width ASC";
                else
                    DV.Sort = "Height DESC, Width DESC";
                DT = DV.ToTable(true, new string[] { "Height", "Width" });
            }
            return DT;
        }

        private void CollectRapidProfil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= HeightMargin)
                        Height = HeightMargin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }

                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }
            }
        }

        private void CollectRapidMarsel3Profil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int VitrinaCount = 0;
                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        if (Convert.ToInt32(item["InsetTypeID"]) == 1)
                            VitrinaCount += Convert.ToInt32(item["Count"]);
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= HeightMargin)
                        Height = HeightMargin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["VitrinaCount"] = VitrinaCount * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["VitrinaCount"] = Convert.ToInt32(rows[0]["VitrinaCount"]) + VitrinaCount * 2;
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }

                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int VitrinaCount = 0;
                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        if (Convert.ToInt32(item["InsetTypeID"]) == 1)
                            VitrinaCount += Convert.ToInt32(item["Count"]);
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["VitrinaCount"] = VitrinaCount * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["VitrinaCount"] = Convert.ToInt32(rows[0]["VitrinaCount"]) + VitrinaCount * 2;
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }
            }
        }

        private void CollectRapidMarsel4Profil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, int HeightMargin1, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height > HeightMargin1)
                    {

                    }
                    else
                    {
                        if (Height <= HeightMargin + 1)
                            Height = HeightMargin;
                        if (Height > HeightMargin + 1 && Height <= HeightMargin1)
                            Height = HeightMargin1;
                    }
                    //if (Height <= HeightMargin)
                    //    Height = HeightMargin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }

                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }
            }
        }

        private void CollectRapidPRU8Profil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= HeightMargin)
                        Height = HeightMargin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }

                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }
            }
        }

        private void CollectRapidImpostProfil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    ProfileName1 = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count;
                        NewRow["iCount"] = iCount;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount;
                    }
                }
            }
        }

        private void CollectPR1RapidProfil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int PR1Count = 0;
                    int PR2Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        if (Convert.ToInt32(item["FrontID"]) == Convert.ToInt32(Fronts.PR1))
                            PR1Count += Convert.ToInt32(item["Count"]);
                        if (Convert.ToInt32(item["FrontID"]) == Convert.ToInt32(Fronts.PR2))
                            PR2Count += Convert.ToInt32(item["Count"]);
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= HeightMargin)
                        Height = HeightMargin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["PR1Count"] = PR1Count;
                        NewRow["PR2Count"] = PR2Count;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                        rows[0]["PR1Count"] = Convert.ToInt32(rows[0]["PR1Count"]) + PR1Count;
                        rows[0]["PR2Count"] = Convert.ToInt32(rows[0]["PR2Count"]) + PR2Count;
                    }
                }

                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }
            }
        }
        
        private void CollectPR3RapidProfil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= HeightMargin)
                        Height = HeightMargin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount;
                    }
                }

                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count;
                        NewRow["iCount"] = iCount;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount;
                    }
                }
            }
        }

        private void CollectPR3Hands(DataTable SourceDT, ref DataTable DestinationDT,
            int WidthMargin, int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (DestinationDT.Rows.Count == 0)
                        {
                            NewRow["Front"] = "Ручки ПР-3";
                        }
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectPRU8Hands(DataTable SourceDT, ref DataTable DestinationDT,
            int WidthMargin, int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (DestinationDT.Rows.Count == 0)
                        {
                            NewRow["Front"] = "ПРУ-8";
                            NewRow["Color"] = "Ручки";
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                    }
                }
            }
        }

        private void CollectRapidTechnoProfil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, int HeightNarrowMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                        if (Convert.ToInt32(item["Width"]) < 170)
                            iCount += Convert.ToInt32(item["Count"]);
                    }

                    //if (Height <= HeightMargin)
                    //    Height = HeightMargin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }

                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                        if (Convert.ToInt32(item["Height"]) < 170)
                            iCount += Convert.ToInt32(item["Count"]);
                    }

                    if (Height < HeightMargin)
                        Height = Height - HeightNarrowMargin;
                    else
                        Height = Height - WidthMargin;
                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }
            }
        }

        private void CollectShervudStemasProfil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) + " AND ImpostMargin=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]));
                    if (Srows.Count() == 0)
                        continue;

                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    int ImpostMargin = Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= HeightMargin)
                    {
                        Height = HeightMargin;
                        IsBox = true;
                    }

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType + " AND ImpostMargin=" + ImpostMargin);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        if (bImpostMargin && ImpostMargin != 0)
                            NewRow["ImpostMargin"] = ImpostMargin;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasProfil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) + " AND ImpostMargin=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]));
                    if (Srows.Count() == 0)
                        continue;

                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    int ImpostMargin = Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= HeightMargin)
                    {
                        Height = HeightMargin;
                        IsBox = true;
                    }

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType + " AND ImpostMargin=" + ImpostMargin);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        if (bImpostMargin && ImpostMargin != 0)
                            NewRow["ImpostMargin"] = ImpostMargin;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasMarselProfil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=-1 AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) + " AND ImpostMargin=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]));
                    if (Srows.Count() == 0)
                        continue;
                    
                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    int ImpostMargin = Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= HeightMargin)
                    {
                        Height = HeightMargin;
                        IsBox = true;
                    }

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType + " AND ImpostMargin=" + ImpostMargin);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        if (bImpostMargin && ImpostMargin != 0)
                            NewRow["ImpostMargin"] = ImpostMargin;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasMarsel4Profil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int HeightMargin1, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=-1 AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) + " AND ImpostMargin=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]));
                    if (Srows.Count() == 0)
                        continue;

                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    int ImpostMargin = Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height > HeightMargin1)
                    {

                    }
                    else
                    {
                        if (Height <= HeightMargin + 1)
                            Height = HeightMargin;
                        if (Height > HeightMargin + 1 && Height <= HeightMargin1)
                            Height = HeightMargin1;
                        IsBox = true;
                    }
                    //if (Height <= HeightMargin + 1)
                    //{
                    //    Height = HeightMargin;
                    //    IsBox = true;
                    //}
                    //if (Height < HeightMargin + 1 && Height >= HeightMargin1)
                    //{
                    //    Height = HeightMargin1;
                    //    IsBox = true;
                    //}

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType + " AND ImpostMargin=" + ImpostMargin);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        if (bImpostMargin && ImpostMargin != 0)
                            NewRow["ImpostMargin"] = ImpostMargin;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasImpostProfil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) + " AND ImpostMargin=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]));
                    if (Srows.Count() == 0)
                        continue;

                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    int ImpostMargin = Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= HeightMargin)
                    {
                        Height = HeightMargin;
                        IsBox = true;
                    }

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType + " AND ImpostMargin=" + ImpostMargin);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1) + " ИМПОСТ"; 
                            NewRow["Color"] = FrameColor;
                        }
                        if (bImpostMargin && ImpostMargin != 0)
                            NewRow["ImpostMargin"] = ImpostMargin;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasMarsel4ImpostProfil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int HeightMargin1, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) + " AND ImpostMargin=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]));
                    if (Srows.Count() == 0)
                        continue;

                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    int ImpostMargin = Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height > HeightMargin1)
                    {

                    }
                    else
                    {
                        if (Height <= HeightMargin + 1)
                            Height = HeightMargin;
                        if (Height > HeightMargin + 1 && Height <= HeightMargin1)
                            Height = HeightMargin1;
                        IsBox = true;
                    }
                    //if (Height <= HeightMargin + 1)
                    //{
                    //    Height = HeightMargin;
                    //    IsBox = true;
                    //}
                    //if (Height < HeightMargin + 1 && Height >= HeightMargin1)
                    //{
                    //    Height = HeightMargin1;
                    //    IsBox = true;
                    //}

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType + " AND ImpostMargin=" + ImpostMargin);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1) + " ИМПОСТ";
                            NewRow["Color"] = FrameColor;
                        }
                        if (bImpostMargin && ImpostMargin != 0)
                            NewRow["ImpostMargin"] = ImpostMargin;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasProfil16(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMargin, int WidthMin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistWidthTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID = -1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["IsBox"] = false;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasImpostProfil16(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMargin, int WidthMin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistWidthTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["IsBox"] = false;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                    }
                }
            }
        }

        private void CollectStemasPR3Profil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= HeightMargin)
                    {
                        Height = HeightMargin;
                        IsBox = true;
                    }

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) * 2;
                    }
                }
            }
        }

        private void CollectStemasPR3Profil16(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMargin, int WidthMin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistWidthTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count*3;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 3;
                    }
                }
            }
        }

        private void CollectStemasTechno4Profil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int WidthNarrowMargin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    //if (Height < HeightMargin)
                    //    Height = Height - WidthNarrowMargin;
                    if (Height <= HeightMargin)
                    {
                        //Height = HeightMargin;
                        IsBox = true;
                    }

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasTechno4Profil16(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMargin, int WidthMin, int HeightNarrowMargin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistWidthTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height < WidthMargin)
                        Height = Height - HeightNarrowMargin;
                    else
                        Height = Height - WidthMargin;
                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void StemasFrontsByHeight(ref DataTable DestinationDT)
        {
            int ProfileType = 1;
            if (Marsel1OrdersDT.Rows.Count > 0)
                CollectStemasProfil18(Marsel1OrdersDT, ref DestinationDT, "Марсель П-018", Convert.ToInt32(FrontMargins.Marsel1Height), ProfileType++, true);
            if (Marsel5OrdersDT.Rows.Count > 0)
                CollectStemasProfil18(Marsel5OrdersDT, ref DestinationDT, "Марсель-5 П-017", Convert.ToInt32(FrontMargins.Marsel5Height), ProfileType++, true);
            if (PortoOrdersDT.Rows.Count > 0)
                CollectStemasProfil18(PortoOrdersDT, ref DestinationDT, "Порто П-0111", Convert.ToInt32(FrontMargins.PortoHeight), ProfileType++, true);
            if (MonteOrdersDT.Rows.Count > 0)
                CollectStemasProfil18(MonteOrdersDT, ref DestinationDT, "Монте П-0112", Convert.ToInt32(FrontMargins.MonteHeight), ProfileType++, true);
            if (Marsel3OrdersDT.Rows.Count > 0)
                CollectStemasMarselProfil18(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-041", Convert.ToInt32(FrontMargins.Marsel3Height), ProfileType++, true);
            if (Marsel4OrdersDT.Rows.Count > 0)
                CollectStemasMarsel4Profil18(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-066", Convert.ToInt32(FrontMargins.Marsel4Height), Convert.ToInt32(FrontMargins.Marsel4Height1), ProfileType++, true);
            if (Jersy110OrdersDT.Rows.Count > 0)
                CollectStemasMarsel4Profil18(Jersy110OrdersDT, ref DestinationDT, "Джерси П-0110", Convert.ToInt32(FrontMargins.Jersy110Height), Convert.ToInt32(FrontMargins.Jersy110Height1), ProfileType++, true);
            if (Techno1OrdersDT.Rows.Count > 0)
                CollectStemasProfil18(Techno1OrdersDT, ref DestinationDT, "Техно П-106", Convert.ToInt32(FrontMargins.Techno1Height), ProfileType++, true);
            if (Techno2OrdersDT.Rows.Count > 0)
                CollectStemasProfil18(Techno2OrdersDT, ref DestinationDT, "Техно-2 П-206", Convert.ToInt32(FrontMargins.Techno2Height), ProfileType++, true);

            //DataTable DT = Techno4MegaOrdersDT.Clone();
            //foreach (DataRow item in Techno4OrdersDT.Rows)
            //    DT.Rows.Add(item.ItemArray);
            //foreach (DataRow item in Techno4MegaOrdersDT.Rows)
            //    DT.Rows.Add(item.ItemArray);
            if (Techno4OrdersDT.Rows.Count > 0)
                CollectStemasTechno4Profil18(Techno4OrdersDT, ref DestinationDT, "Техно-4 П-406", Convert.ToInt32(FrontMargins.Techno4Height),
                    Convert.ToInt32(FrontMargins.Techno4NarrowWidth), ProfileType++, true);
            if (pFoxOrdersDT.Rows.Count > 0)
                CollectStemasProfil18(pFoxOrdersDT, ref DestinationDT, "Фокс П-042-4", Convert.ToInt32(FrontMargins.pFoxHeight),
                    ProfileType++, true);

            if (Techno5OrdersDT.Rows.Count > 0)
                CollectStemasProfil18(Techno5OrdersDT, ref DestinationDT, "Техно-5 П-406", Convert.ToInt32(FrontMargins.Techno5Height), ProfileType++, true);

            if (PR1OrdersDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1OrdersDT.Copy();
                for (int i = 0; i < PR1OrdersDT.Rows.Count; i++)
                {
                    object x1 = PR1OrdersDT.Rows[i]["Height"];
                    object x2 = PR1OrdersDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                CollectStemasProfil18(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-041", Convert.ToInt32(FrontMargins.Marsel3Height), ProfileType++, true);
                CollectStemasImpostProfil18(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-041", Convert.ToInt32(FrontMargins.Marsel3Height), ProfileType++, true);
            }
            if (ShervudOrdersDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = ShervudOrdersDT.Copy();
                for (int i = 0; i < ShervudOrdersDT.Rows.Count; i++)
                {
                    object x1 = ShervudOrdersDT.Rows[i]["Height"];
                    object x2 = ShervudOrdersDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                CollectStemasProfil18(TempPR1OrdersDT, ref DestinationDT, "Шервуд П-043-4", Convert.ToInt32(FrontMargins.ShervudHeight), ProfileType++, true);
            }
            if (PR3OrdersDT.Rows.Count > 0)
                CollectStemasPR3Profil18(PR3OrdersDT, ref DestinationDT, "Техно-2 П-206", Convert.ToInt32(FrontMargins.Techno2Height), ProfileType++, true);
            if (PRU8OrdersDT.Rows.Count > 0)
                CollectStemasProfil18(PRU8OrdersDT, ref DestinationDT, "Техно П-106", Convert.ToInt32(FrontMargins.Techno1Height), ProfileType++, true);
            if (Marsel3OrdersDT.Rows.Count > 0)
                CollectStemasImpostProfil18(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-041", Convert.ToInt32(FrontMargins.Marsel3Height), ProfileType++, true);
            if (Marsel4OrdersDT.Rows.Count > 0)
                CollectStemasMarsel4ImpostProfil18(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-066", Convert.ToInt32(FrontMargins.Marsel4Height), Convert.ToInt32(FrontMargins.Marsel4Height1), ProfileType++, true);

        }

        private void StemasFrontsByWidth(ref DataTable DestinationDT)
        {
            int ProfileType = 1;
            if (Marsel1OrdersDT.Rows.Count > 0)
                CollectStemasProfil16(Marsel1OrdersDT, ref DestinationDT, "Марсель П-016",
                    Convert.ToInt32(FrontMargins.Marsel1Width), Convert.ToInt32(FrontMinSizes.Marsel1MinWidth), ProfileType++, true);
            if (Marsel5OrdersDT.Rows.Count > 0)
                CollectStemasProfil16(Marsel5OrdersDT, ref DestinationDT, "Марсель-5 П-117",
                    Convert.ToInt32(FrontMargins.Marsel5Width), Convert.ToInt32(FrontMinSizes.Marsel5MinWidth), ProfileType++, true);
            if (PortoOrdersDT.Rows.Count > 0)
                CollectStemasProfil16(PortoOrdersDT, ref DestinationDT, "Порто П-111",
                    Convert.ToInt32(FrontMargins.PortoWidth), Convert.ToInt32(FrontMinSizes.PortoMinWidth), ProfileType++, true);
            if (MonteOrdersDT.Rows.Count > 0)
                CollectStemasProfil16(MonteOrdersDT, ref DestinationDT, "Монте П-112",
                    Convert.ToInt32(FrontMargins.MonteWidth), Convert.ToInt32(FrontMinSizes.MonteMinWidth), ProfileType++, true);
            if (Marsel3OrdersDT.Rows.Count > 0)
                CollectStemasProfil16(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-141",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), ProfileType++, true);
            if (Marsel4OrdersDT.Rows.Count > 0)
                CollectStemasProfil16(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), ProfileType++, true);
            if (Jersy110OrdersDT.Rows.Count > 0)
                CollectStemasProfil16(Jersy110OrdersDT, ref DestinationDT, "Джерси П-110",
                    Convert.ToInt32(FrontMargins.Jersy110Width), Convert.ToInt32(FrontMinSizes.Jersy110MinWidth), ProfileType++, true);
            if (Techno1OrdersDT.Rows.Count > 0)
                CollectStemasProfil16(Techno1OrdersDT, ref DestinationDT, "Техно П-116",
                    Convert.ToInt32(FrontMargins.Techno1Width), Convert.ToInt32(FrontMinSizes.Techno1MinWidth), ProfileType++, true);
            if (Techno2OrdersDT.Rows.Count > 0)
                CollectStemasProfil16(Techno2OrdersDT, ref DestinationDT, "Техно-2 П-216",
                    Convert.ToInt32(FrontMargins.Techno2Width), Convert.ToInt32(FrontMinSizes.Techno2MinWidth), ProfileType++, true);

            //DataTable DT = Techno4MegaOrdersDT.Clone();
            //foreach (DataRow item in Techno4OrdersDT.Rows)
            //    DT.Rows.Add(item.ItemArray);
            //foreach (DataRow item in Techno4MegaOrdersDT.Rows)
            //    DT.Rows.Add(item.ItemArray);
            if (Techno4OrdersDT.Rows.Count > 0)
                CollectStemasTechno4Profil16(Techno4OrdersDT, ref DestinationDT, "Техно-4 П-416",
                    Convert.ToInt32(FrontMargins.Techno4Width), Convert.ToInt32(FrontMinSizes.Techno4MinWidth),
                    Convert.ToInt32(FrontMargins.Techno4NarrowHeight), ProfileType++, true);
            if (pFoxOrdersDT.Rows.Count > 0)
                CollectStemasProfil16(pFoxOrdersDT, ref DestinationDT, "Фокс П-042-4",
                    Convert.ToInt32(FrontMargins.pFoxWidth), Convert.ToInt32(FrontMinSizes.pFoxMinWidth), ProfileType++, true);

            if (Techno5OrdersDT.Rows.Count > 0)
                CollectStemasProfil16(Techno5OrdersDT, ref DestinationDT, "Техно-5 П-516",
                    Convert.ToInt32(FrontMargins.Techno5Width), Convert.ToInt32(FrontMinSizes.Techno5MinWidth), ProfileType++, true);

            if (PR1OrdersDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1OrdersDT.Copy();
                for (int i = 0; i < PR1OrdersDT.Rows.Count; i++)
                {
                    object x1 = PR1OrdersDT.Rows[i]["Height"];
                    object x2 = PR1OrdersDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                CollectStemasProfil16(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-141",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), ProfileType++, true);
                CollectStemasImpostProfil16(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-141",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), ProfileType++, true);
            }
            if (ShervudOrdersDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = ShervudOrdersDT.Copy();
                for (int i = 0; i < ShervudOrdersDT.Rows.Count; i++)
                {
                    object x1 = ShervudOrdersDT.Rows[i]["Height"];
                    object x2 = ShervudOrdersDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                CollectStemasProfil16(TempPR1OrdersDT, ref DestinationDT, "Шервуд П-042-4",
                    Convert.ToInt32(FrontMargins.ShervudWidth), Convert.ToInt32(FrontMinSizes.ShervudMinWidth), ProfileType++, true);
            }
            if (PR3OrdersDT.Rows.Count > 0)
                CollectStemasPR3Profil16(PR3OrdersDT, ref DestinationDT, "Техно-2 П-216",
                    Convert.ToInt32(FrontMargins.Techno2Width), Convert.ToInt32(FrontMinSizes.PR3MinWidth), ProfileType++, true);
            if (PRU8OrdersDT.Rows.Count > 0)
                CollectStemasProfil16(PRU8OrdersDT, ref DestinationDT, "Техно П-116",
                    Convert.ToInt32(FrontMargins.Techno1Width), Convert.ToInt32(FrontMinSizes.Techno1MinWidth), ProfileType++, true);
            if (Marsel3OrdersDT.Rows.Count > 0)
                CollectStemasImpostProfil16(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-141",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), ProfileType++, true);
            if (Marsel4OrdersDT.Rows.Count > 0)
                CollectStemasImpostProfil16(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), ProfileType++, true);
        }

        private void U(ref DataTable DestinationDT)
        {
            if (Marsel1OrdersDT.Rows.Count > 0)
            {
                TotalSum(Marsel1OrdersDT, ref DestinationDT, "Марсель П-016", "Марсель П-018",
                    Convert.ToInt32(FrontMargins.Marsel1Width), Convert.ToInt32(FrontMinSizes.Marsel1MinWidth), Convert.ToInt32(FrontMargins.Marsel1Height));
            }
            if (Marsel5OrdersDT.Rows.Count > 0)
            {
                TotalSum(Marsel5OrdersDT, ref DestinationDT, "Марсель-5 П-117", "Марсель-5 П-017",
                    Convert.ToInt32(FrontMargins.Marsel5Width), Convert.ToInt32(FrontMinSizes.Marsel5MinWidth), Convert.ToInt32(FrontMargins.Marsel5Height));
            }
            if (PortoOrdersDT.Rows.Count > 0)
            {
                TotalSum(PortoOrdersDT, ref DestinationDT, "Порто П-111", "Порто П-0111",
                    Convert.ToInt32(FrontMargins.PortoWidth), Convert.ToInt32(FrontMinSizes.PortoMinWidth), Convert.ToInt32(FrontMargins.PortoHeight));
            }
            if (MonteOrdersDT.Rows.Count > 0)
            {
                TotalSum(MonteOrdersDT, ref DestinationDT, "Монте П-112", "Монте П-0112",
                    Convert.ToInt32(FrontMargins.MonteWidth), Convert.ToInt32(FrontMinSizes.MonteMinWidth), Convert.ToInt32(FrontMargins.MonteHeight));
            }
            if (Marsel3OrdersDT.Rows.Count > 0)
            {
                TotalSum(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), Convert.ToInt32(FrontMargins.Marsel3Height));
            }
            if (Marsel4OrdersDT.Rows.Count > 0)
            {
                TotalSum(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166", "Марсель-4 П-066",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), Convert.ToInt32(FrontMargins.Marsel4Height));
            }
            if (Jersy110OrdersDT.Rows.Count > 0)
            {
                TotalSum(Jersy110OrdersDT, ref DestinationDT, "Джерси П-110", "Джерси П-0110",
                    Convert.ToInt32(FrontMargins.Jersy110Width), Convert.ToInt32(FrontMinSizes.Jersy110MinWidth), Convert.ToInt32(FrontMargins.Jersy110Height));
            }
            if (Techno1OrdersDT.Rows.Count > 0)
            {
                TotalSum(Techno1OrdersDT, ref DestinationDT, "Техно П-116", "Техно П-106",
                    Convert.ToInt32(FrontMargins.Techno1Width), Convert.ToInt32(FrontMinSizes.Techno1MinWidth), Convert.ToInt32(FrontMargins.Techno1Height));
            }
            if (Techno2OrdersDT.Rows.Count > 0)
            {
                TotalSum(Techno2OrdersDT, ref DestinationDT, "Техно-2 П-216", "Техно-2 П-206",
                    Convert.ToInt32(FrontMargins.Techno2Width), Convert.ToInt32(FrontMinSizes.Techno2MinWidth), Convert.ToInt32(FrontMargins.Techno2Height));
            }

            if (Techno4OrdersDT.Rows.Count > 0)
                TotalSumTechno4(Techno4OrdersDT, ref DestinationDT, "Техно-4 П-416", "Техно-4 П-406",
                    Convert.ToInt32(FrontMargins.Techno4Width), Convert.ToInt32(FrontMinSizes.Techno4MinWidth), Convert.ToInt32(FrontMargins.Techno4Height),
                    Convert.ToInt32(FrontMargins.Techno4NarrowHeight));
            if (pFoxOrdersDT.Rows.Count > 0)
                TotalSum(pFoxOrdersDT, ref DestinationDT, "Фокс П-042-4", "Фокс П-042-4",
                    Convert.ToInt32(FrontMargins.pFoxWidth), Convert.ToInt32(FrontMinSizes.pFoxMinWidth), Convert.ToInt32(FrontMargins.pFoxHeight));
            if (Techno5OrdersDT.Rows.Count > 0)
            {
                TotalSum(Techno5OrdersDT, ref DestinationDT, "Техно-5 П-516", "Техно-5 П-506",
                    Convert.ToInt32(FrontMargins.Techno5Width), Convert.ToInt32(FrontMinSizes.Techno5MinWidth), Convert.ToInt32(FrontMargins.Techno5Height));
            }

            if (PR1OrdersDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1OrdersDT.Copy();
                for (int i = 0; i < PR1OrdersDT.Rows.Count; i++)
                {
                    object x1 = PR1OrdersDT.Rows[i]["Height"];
                    object x2 = PR1OrdersDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                TotalSum(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), Convert.ToInt32(FrontMargins.Marsel3Height));
            }
            if (ShervudOrdersDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = ShervudOrdersDT.Copy();
                for (int i = 0; i < ShervudOrdersDT.Rows.Count; i++)
                {
                    object x1 = ShervudOrdersDT.Rows[i]["Height"];
                    object x2 = ShervudOrdersDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                TotalSum(TempPR1OrdersDT, ref DestinationDT, "Шервуд П-042-4", "Шервуд П-043-4",
                    Convert.ToInt32(FrontMargins.ShervudWidth), Convert.ToInt32(FrontMinSizes.ShervudMinWidth), Convert.ToInt32(FrontMargins.ShervudHeight));
            }
            if (PR3OrdersDT.Rows.Count > 0)
            {
                TotalSum(PR3OrdersDT, ref DestinationDT, "Техно-2 П-216", "Техно-2 П-206",
                    Convert.ToInt32(FrontMargins.Techno2Width), Convert.ToInt32(FrontMinSizes.PR3MinWidth), Convert.ToInt32(FrontMargins.Techno2Height));
            }
            if (PRU8OrdersDT.Rows.Count > 0)
            {
                TotalSum(PRU8OrdersDT, ref DestinationDT, "Техно-1 П-116", "Техно-1 П-106",
                    Convert.ToInt32(FrontMargins.Techno1Width), Convert.ToInt32(FrontMinSizes.Techno1MinWidth), Convert.ToInt32(FrontMargins.Techno1Height));
            }
            //DT.Dispose();

            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Front, Color";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }

        }

        private void Martin1Fronts(ref DataTable DestinationDT)
        {
            //DataTable DT = Marsel1OrdersDT.Clone();
            //DataRow[] rows = Marsel1OrdersDT.Select("(Width-" + Convert.ToInt32(FrontMargins.Marsel1Width) + ")>100");
            //foreach (DataRow item in rows)
            //    DT.Rows.Add(item.ItemArray);
            //if (DT.Rows.Count > 0)
            //    CollectMarselRapidProfil(DT, ref DestinationDT, "Марсель П-016", "Марсель П-018",
            //        Convert.ToInt32(FrontMargins.Marsel1Width), Convert.ToInt32(FrontMinSizes.Marsel1MinWidth), Convert.ToInt32(FrontMargins.Marsel1Height), false);

            //DT.Clear();
            //rows = Marsel3OrdersDT.Select("(Width-" + Convert.ToInt32(FrontMargins.Marsel3Width) + ")>100");
            //foreach (DataRow item in rows)
            //    DT.Rows.Add(item.ItemArray);
            //if (DT.Rows.Count > 0)
            //    CollectMarselRapidProfil(DT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
            //        Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), Convert.ToInt32(FrontMargins.Marsel3Height), false);

            //DT.Clear();
            //rows = Marsel4OrdersDT.Select("(Width-" + Convert.ToInt32(FrontMargins.Marsel4Width) + ")>100");
            //foreach (DataRow item in rows)
            //    DT.Rows.Add(item.ItemArray);
            //if (DT.Rows.Count > 0)
            //    CollectRapidMarsel4Profil(DT, ref DestinationDT, "Марсель-4 П-166", "Марсель-4 П-066",
            //        Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), Convert.ToInt32(FrontMargins.Marsel4Height), Convert.ToInt32(FrontMargins.Marsel4Height1), false);

            if (Marsel1OrdersDT.Rows.Count > 0)
            {
                CollectRapidProfil(Marsel1OrdersDT, ref DestinationDT, "Марсель П-016", "Марсель П-018",
                    Convert.ToInt32(FrontMargins.Marsel1Width), Convert.ToInt32(FrontMinSizes.Marsel1MinWidth), Convert.ToInt32(FrontMargins.Marsel1Height), false);
            }
            if (Marsel5OrdersDT.Rows.Count > 0)
            {
                CollectRapidProfil(Marsel5OrdersDT, ref DestinationDT, "Марсель-5 П-117", "Марсель-5 П-017",
                    Convert.ToInt32(FrontMargins.Marsel5Width), Convert.ToInt32(FrontMinSizes.Marsel5MinWidth), Convert.ToInt32(FrontMargins.Marsel5Height), false);
            }
            if (PortoOrdersDT.Rows.Count > 0)
            {
                CollectRapidProfil(PortoOrdersDT, ref DestinationDT, "Порто П-111", "Порто П-0111",
                    Convert.ToInt32(FrontMargins.PortoWidth), Convert.ToInt32(FrontMinSizes.PortoMinWidth), Convert.ToInt32(FrontMargins.PortoHeight), false);
            }
            if (MonteOrdersDT.Rows.Count > 0)
            {
                CollectRapidProfil(MonteOrdersDT, ref DestinationDT, "Монте П-112", "Монте П-0112",
                    Convert.ToInt32(FrontMargins.MonteWidth), Convert.ToInt32(FrontMinSizes.MonteMinWidth), Convert.ToInt32(FrontMargins.MonteHeight), false);
            }
            if (Marsel3OrdersDT.Rows.Count > 0)
            {
                CollectRapidMarsel3Profil(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), Convert.ToInt32(FrontMargins.Marsel3Height), false);
                CollectRapidImpostProfil(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), Convert.ToInt32(FrontMargins.Marsel3Height), false);
            }
            if (Marsel4OrdersDT.Rows.Count > 0)
            {
                CollectRapidMarsel4Profil(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166", "Марсель-4 П-066",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), Convert.ToInt32(FrontMargins.Marsel4Height), Convert.ToInt32(FrontMargins.Marsel4Height1), false);
                CollectRapidImpostProfil(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166", "Марсель-4 П-066",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), Convert.ToInt32(FrontMargins.Marsel4Height), false);
            }
            if (Jersy110OrdersDT.Rows.Count > 0)
            {
                CollectRapidMarsel4Profil(Jersy110OrdersDT, ref DestinationDT, "Джерси П-110", "Джерси П-0110",
                    Convert.ToInt32(FrontMargins.Jersy110Width), Convert.ToInt32(FrontMinSizes.Jersy110MinWidth), Convert.ToInt32(FrontMargins.Jersy110Height), Convert.ToInt32(FrontMargins.Jersy110Height1), false);
            }
            if (Techno1OrdersDT.Rows.Count > 0)
            {
                CollectRapidProfil(Techno1OrdersDT, ref DestinationDT, "Техно П-116", "Техно П-106",
                    Convert.ToInt32(FrontMargins.Techno1Width), Convert.ToInt32(FrontMinSizes.Techno1MinWidth), Convert.ToInt32(FrontMargins.Techno1Height), false);
            }
            if (Techno2OrdersDT.Rows.Count > 0)
            {
                CollectRapidProfil(Techno2OrdersDT, ref DestinationDT, "Техно-2 П-216", "Техно-2 П-206",
                    Convert.ToInt32(FrontMargins.Techno2Width), Convert.ToInt32(FrontMinSizes.Techno2MinWidth), Convert.ToInt32(FrontMargins.Techno2Height), false);
            }

            if (Techno4OrdersDT.Rows.Count > 0)
                CollectRapidTechnoProfil(Techno4OrdersDT, ref DestinationDT, "Техно-4 П-416", "Техно-4 П-406",
                    Convert.ToInt32(FrontMargins.Techno4Width), Convert.ToInt32(FrontMinSizes.Techno4MinWidth), Convert.ToInt32(FrontMargins.Techno4Height),
                    Convert.ToInt32(FrontMargins.Techno4NarrowHeight), false);
            if (pFoxOrdersDT.Rows.Count > 0)
                CollectRapidProfil(pFoxOrdersDT, ref DestinationDT, "Фокс П-042-4", "Фокс П-042-4",
                    Convert.ToInt32(FrontMargins.pFoxWidth), Convert.ToInt32(FrontMinSizes.pFoxMinWidth), Convert.ToInt32(FrontMargins.pFoxHeight), false);
            if (Techno5OrdersDT.Rows.Count > 0)
            {
                CollectRapidProfil(Techno5OrdersDT, ref DestinationDT, "Техно-5 П-516", "Техно-5 П-506",
                    Convert.ToInt32(FrontMargins.Techno5Width), Convert.ToInt32(FrontMinSizes.Techno5MinWidth), Convert.ToInt32(FrontMargins.Techno5Height), false);
            }

            if (PR1OrdersDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1OrdersDT.Copy();
                for (int i = 0; i < PR1OrdersDT.Rows.Count; i++)
                {
                    object x1 = PR1OrdersDT.Rows[i]["Height"];
                    object x2 = PR1OrdersDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                CollectPR1RapidProfil(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), Convert.ToInt32(FrontMargins.Marsel3Height), false);
                CollectRapidImpostProfil(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), Convert.ToInt32(FrontMargins.Marsel3Height), false);
            }
            if (ShervudOrdersDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = ShervudOrdersDT.Copy();
                for (int i = 0; i < ShervudOrdersDT.Rows.Count; i++)
                {
                    object x1 = ShervudOrdersDT.Rows[i]["Height"];
                    object x2 = ShervudOrdersDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                CollectRapidProfil(TempPR1OrdersDT, ref DestinationDT, "Шервуд П-043-4", "Шервуд П-042-4",
                    Convert.ToInt32(FrontMargins.ShervudWidth), Convert.ToInt32(FrontMinSizes.ShervudMinWidth), Convert.ToInt32(FrontMargins.ShervudHeight), false);
            }
            if (PR3OrdersDT.Rows.Count > 0)
            {
                CollectPR3RapidProfil(PR3OrdersDT, ref DestinationDT, "Техно-2 П-216", "Техно-2 П-206",
                    Convert.ToInt32(FrontMargins.Techno2Width), Convert.ToInt32(FrontMinSizes.PR3MinWidth), Convert.ToInt32(FrontMargins.Techno2Height), false);
            }
            if (PRU8OrdersDT.Rows.Count > 0)
            {
                CollectRapidProfil(PRU8OrdersDT, ref DestinationDT, "Техно-1 П-116", "Техно-1 П-106",
                    Convert.ToInt32(FrontMargins.Techno1Width), Convert.ToInt32(FrontMinSizes.Techno1MinWidth), Convert.ToInt32(FrontMargins.Techno1Height), false);
            }
            //DT.Dispose();

            string PrevName = string.Empty;
            if (DestinationDT.Rows.Count > 0)
                PrevName = DestinationDT.Rows[0]["Front"].ToString();
            for (int i = 0; i < DestinationDT.Rows.Count; i++)
            {
                if (DestinationDT.Rows[i]["VitrinaCount"] != DBNull.Value && Convert.ToInt32(DestinationDT.Rows[i]["VitrinaCount"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = Convert.ToInt32(DestinationDT.Rows[i]["VitrinaCount"]) + " витр.";
            }
            for (int i = 0; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["iCount"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = Convert.ToInt32(DestinationDT.Rows[i]["iCount"]) + "-узкий проф";
                if (DestinationDT.Rows[i]["PR1Count"] != DBNull.Value && (DestinationDT.Rows[i]["PR2Count"] == DBNull.Value || Convert.ToInt32(DestinationDT.Rows[i]["PR2Count"]) == 0) && Convert.ToInt32(DestinationDT.Rows[i]["PR1Count"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = "ПР-1 - " + Convert.ToInt32(DestinationDT.Rows[i]["PR1Count"]) + "шт";
                if ((DestinationDT.Rows[i]["PR1Count"] == DBNull.Value || Convert.ToInt32(DestinationDT.Rows[i]["PR1Count"]) == 0) && DestinationDT.Rows[i]["PR2Count"] != DBNull.Value && Convert.ToInt32(DestinationDT.Rows[i]["PR2Count"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = "ПР-2 - " + Convert.ToInt32(DestinationDT.Rows[i]["PR2Count"]) + "шт";
                if (DestinationDT.Rows[i]["PR1Count"] != DBNull.Value && DestinationDT.Rows[i]["PR2Count"] != DBNull.Value &&
                    Convert.ToInt32(DestinationDT.Rows[i]["PR1Count"]) > 0 && Convert.ToInt32(DestinationDT.Rows[i]["PR2Count"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = "ПР-1 - " + Convert.ToInt32(DestinationDT.Rows[i]["PR1Count"]) + "шт/" + "ПР-2 - " + Convert.ToInt32(DestinationDT.Rows[i]["PR2Count"]) + "шт";

                if (DestinationDT.Rows[i]["VitrinaCount"] != DBNull.Value && Convert.ToInt32(DestinationDT.Rows[i]["VitrinaCount"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = Convert.ToInt32(DestinationDT.Rows[i]["VitrinaCount"]) + " витр."; 
                if (i == 0)
                    continue;
                string CurrentName = DestinationDT.Rows[i]["Front"].ToString();
                if (PrevName == CurrentName)
                {
                    if (Convert.ToInt32(DestinationDT.Rows[i]["ProfileType"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ProfileType"]) &&
                        Convert.ToInt32(DestinationDT.Rows[i]["ColorType"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ColorType"]))
                    {
                        PrevName = DestinationDT.Rows[i]["Front"].ToString();
                        DestinationDT.Rows[i]["Front"] = string.Empty;
                        DestinationDT.Rows[i]["Color"] = string.Empty;
                    }
                }
                else
                {
                    PrevName = DestinationDT.Rows[i]["Front"].ToString();
                }
            }
        }

        private void AllInsets(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool NeedSwap, bool OrderASC, bool Impost)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                if (Impost)
                    DV.RowFilter = "TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    if (Impost)
                        DV.RowFilter = "TechnoColorID<>-1";
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        if (Impost)
                            DV.RowFilter = "TechnoColorID<>-1";
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            if (Impost)
                                DV.RowFilter = "TechnoColorID<>-1";
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) + 
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            if (Impost)
                                Height = Convert.ToInt32(DT4.Rows[y]["Height"]) / 2 - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]))[0]["GroupID"]);
                            if (GroupID == 7 || GroupID == 8)
                            {
                                //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");

                                if (Height > 100 && Width > 100)
                                    continue;
                            }
                            if (Impost)
                            {
                                InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            }

                            if (Width > 910)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                if (NeedSwap)
                                {
                                    NewRow["Width"] = Height;
                                    NewRow["Height"] = Width;
                                }
                                else
                                {
                                    NewRow["Height"] = Height;
                                    NewRow["Width"] = Width;
                                }
                                if (Impost)
                                    NewRow["Count"] = Count * 2;
                                else
                                    NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                if (Impost)
                                    rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                                else
                                    rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void AllInsetsMarsel3(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool NeedSwap, bool OrderASC, bool Impost)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                if (Impost)
                    DV.RowFilter = "TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    if (Impost)
                        DV.RowFilter = "TechnoColorID<>-1";
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        if (Impost)
                            DV.RowFilter = "TechnoColorID<>-1";
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            if (Impost)
                                DV.RowFilter = "TechnoColorID<>-1";
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            if (Impost)
                                Height = Convert.ToInt32(DT4.Rows[y]["Height"]) / 2 - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]))[0]["GroupID"]);
                            //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            if (GroupID == 7 || GroupID == 8)
                            {
                                //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");

                                if (Height > 100 && Width > 100)
                                    continue;
                            }
                            //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            //if (Impost)
                            //{
                            //    InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            //}

                            if (Width > 910)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                if (NeedSwap)
                                {
                                    NewRow["Width"] = Height;
                                    NewRow["Height"] = Width;
                                }
                                else
                                {
                                    NewRow["Height"] = Height;
                                    NewRow["Width"] = Width;
                                }
                                if (Impost)
                                    NewRow["Count"] = Count * 2;
                                else
                                    NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                if (Impost)
                                    rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                                else
                                    rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void AllInsetsMarsel4(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int HeightMargin1, int InsetHeightMargin, int InsetHeightBoxMargin, int InsetWidthMargin, int InsetHeightMin, int InsetWidthMin, bool NeedSwap, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            if ((Convert.ToInt32(DT4.Rows[y]["Height"]) - 1) <= HeightMargin)
                            {
                                InsetHeightMargin = InsetHeightBoxMargin;
                            }

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]))[0]["GroupID"]);
                            //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");

                            if (Height > HeightMargin1)
                            {
                                Height = Height - InsetHeightMargin;
                            }
                            else
                            {
                                if (Height <= HeightMargin + 1)
                                    Height = HeightMargin - InsetHeightMargin;
                                if (Height > HeightMargin + 1 && Height <= HeightMargin1)
                                    Height = HeightMargin1 - InsetHeightMargin;
                            }
                            if (Width > HeightMargin1)
                            {
                                Width = Width - InsetWidthMargin;
                            }
                            else
                            {
                                if (Width <= HeightMargin + 1)
                                    Width = HeightMargin - InsetWidthMargin;
                                if (Width > HeightMargin + 1 && Width <= HeightMargin1)
                                    Width = HeightMargin1 - InsetWidthMargin;
                            }

                            if (GroupID == 7 || GroupID == 8)
                            {
                                //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");

                                if (Height > 100 && Width > 100)
                                    continue;
                            }
                            InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");

                            if (Width > 910)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            //if (Height <= InsetHeightMin)
                            //    Height = InsetHeightMin;
                            if (Width <= InsetWidthMin)
                                Width = InsetWidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                if (NeedSwap)
                                {
                                    NewRow["Width"] = Height;
                                    NewRow["Height"] = Width;
                                }
                                else
                                {
                                    NewRow["Height"] = Height;
                                    NewRow["Width"] = Width;
                                }
                                    NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                    rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void AllInsetsMarsel4Impost(DataTable SourceDT, ref DataTable DestinationDT,
            int InsetHeightMargin, int InsetWidthMargin, int InsetHeightMin, int InsetWidthMin, bool NeedSwap, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DV.RowFilter = "TechnoColorID<>-1";
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DV.RowFilter = "TechnoColorID<>-1";
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DV.RowFilter = "TechnoColorID<>-1";
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) / 2 - InsetHeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - InsetWidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]))[0]["GroupID"]);
                            //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            if (GroupID == 7 || GroupID == 8)
                            {
                                //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");

                                if (Height > 100 && Width > 100)
                                    continue;
                            }
                            InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            //if (Impost)
                            //{
                            //    InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            //}

                            if (Width > 910)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= InsetHeightMin)
                                Height = InsetHeightMin;
                            if (Width <= InsetWidthMin)
                                Width = InsetWidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                if (NeedSwap)
                                {
                                    NewRow["Width"] = Height;
                                    NewRow["Height"] = Width;
                                }
                                else
                                {
                                    NewRow["Height"] = Height;
                                    NewRow["Width"] = Width;
                                }
                                NewRow["Count"] = Count * 2;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                            }
                        }
                    }
                }
            }
        }

        private void InsetsPressOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);
                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            if (Height < 10 || Width < 10)
                                continue;

                            if (Height <= HeightMin || Width <= WidthMin)
                                continue;

                            if (Width <= 910)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void Marsel3PressOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC, bool Impost)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height1 = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;

                            if (Impost)
                                Height = Convert.ToInt32(DT4.Rows[y]["Height"]) / 2 - HeightMargin;

                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);
                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            //if (Height < 10  || Width < 10)
                            //    continue;

                            if (Height <= HeightMin || Width <= WidthMin)
                                continue;

                            if (Height <= 900 && Width <= 900)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Width;
                                NewRow["Width"] = Height;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void InsetsFilenkaOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531)", "InsetTypeID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);
                            string InsetColor = "фил " + GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            if (Height <= 100 || Width <= 100)
                                continue;

                            if (Height <= HeightMin || Width <= WidthMin)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void InsetsGridsOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < 10 || Width < 10)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;
                            string Name = string.Empty;
                            if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 685 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 688 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 29470)
                                Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " 45 " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 686 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 687 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 29471)
                                Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " 90 " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = Name;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void LuxOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;

                            if (Convert.ToInt32(DT4.Rows[y]["Height"]) <= HeightMin || Convert.ToInt32(DT4.Rows[y]["Width"]) < WidthMin)
                                continue;

                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);
                            int LuxCount = 0;
                            string InsetColor = "люкс " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            LuxCount = Convert.ToInt32(Math.Truncate(Height / 65m));
                            if (LuxCount == 0)
                                LuxCount = 1;
                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["GlassCount"] = LuxCount * Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                                rows[0]["GlassCount"] = Convert.ToInt32(rows[0]["GlassCount"]) + LuxCount * Count;
                            }
                        }
                    }
                }
            }
        }

        private void MegaOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            //if (Convert.ToInt32(DT4.Rows[y]["Height"]) <= HeightMin)
                            //    continue;

                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            //if (Height < 20 || Width < 20)
                            //    continue;

                            int Count = 0;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);
                            int GlassCount = 0;
                            int MegaCount = 0;
                            string InsetColor = "мега " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            foreach (DataRow item in Srows)
                            {
                                Count += Convert.ToInt32(item["Count"]);
                            }

                            GetMegaInsetStickCount(Height, ref GlassCount, ref MegaCount);

                            if (TechnoInsetColorID == 3943)
                            {
                                GlassCount = 0;
                                InsetColor += " вит";
                            }
                            else
                                InsetColor += "/" + GetInsetColorName(TechnoInsetColorID);

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["GlassCount"] = GlassCount * Count;
                                NewRow["MegaCount"] = MegaCount * Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                                rows[0]["GlassCount"] = Convert.ToInt32(rows[0]["GlassCount"]) + GlassCount * Count;
                                rows[0]["MegaCount"] = Convert.ToInt32(rows[0]["MegaCount"]) + MegaCount * Count;
                            }
                        }
                    }
                }
            }
        }

        private void GlassOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightProfilMargin, int WidthProfilMargin, 
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TempHeightMargin = HeightMargin;
                            int TempWidthMargin = WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - TempHeightMargin;
                            Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - TempWidthMargin;

                            int GlassCount = 0;
                            int MegaCount = 0;
                            string InsetColor = "стекло Лакомат";

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            foreach (DataRow item in Srows)
                            {
                                Count += Convert.ToInt32(item["Count"]);
                            }

                            GetMegaInsetStickCount(Height, ref GlassCount, ref MegaCount);

                            DataRow[] rows = DestinationDT.Select("Height=" + 30 + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = 30;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["GlassCount"] = GlassCount * Count;
                                NewRow["MegaCount"] = MegaCount * Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                                rows[0]["GlassCount"] = Convert.ToInt32(rows[0]["GlassCount"]) + GlassCount * Count;
                                rows[0]["MegaCount"] = Convert.ToInt32(rows[0]["MegaCount"]) + MegaCount * Count;
                            }
                        }
                    }
                }
            }
        }

        private void GlassOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightProfilMargin, int WidthProfilMargin, int HeightNarrowMargin, int WidthNarrowMargin,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TempHeightMargin = HeightMargin;
                            int TempWidthMargin = WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < HeightProfilMargin)
                                TempHeightMargin = HeightNarrowMargin;
                            if (Width < WidthProfilMargin)
                                TempWidthMargin = WidthNarrowMargin;

                            Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - TempHeightMargin;
                            Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - TempWidthMargin;

                            int GlassCount = 0;
                            int MegaCount = 0;
                            string InsetColor = "стекло Лакомат";

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            foreach (DataRow item in Srows)
                            {
                                Count += Convert.ToInt32(item["Count"]);
                            }

                            GetMegaInsetStickCount(Height, ref GlassCount, ref MegaCount);

                            DataRow[] rows = DestinationDT.Select("Height=" + 30 + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = 30;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["GlassCount"] = GlassCount * Count;
                                NewRow["MegaCount"] = MegaCount * Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                                rows[0]["GlassCount"] = Convert.ToInt32(rows[0]["GlassCount"]) + GlassCount * Count;
                                rows[0]["MegaCount"] = Convert.ToInt32(rows[0]["MegaCount"]) + MegaCount * Count;
                            }
                        }
                    }
                }
            }
        }

        private void Techno4AllInsets(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightProfilMargin, int WidthProfilMargin, int HeightNarrowMargin, int WidthNarrowMargin, int HeightMargin, int WidthMargin,
            int HeightMin, int WidthMin, bool NeedSwap, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TempHeightMargin = HeightMargin;
                            int TempWidthMargin = WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < HeightProfilMargin)
                                TempHeightMargin = HeightNarrowMargin;
                            if (Width < WidthProfilMargin)
                                TempWidthMargin = WidthNarrowMargin;

                            Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - TempHeightMargin;
                            Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - TempWidthMargin;

                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]))[0]["GroupID"]);
                            if (GroupID == 7 || GroupID == 8)
                            {
                                InsetColor = InsetColor.Insert(0, "фил ");
                                if ((Height > HeightMin && Width > WidthMin))
                                    continue;
                            }

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            //if (TechnoInsetColorID == 128)
                            //{
                            //    InsetColor = "мега " + InsetColor + " вит";
                            //}

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                if (NeedSwap)
                                {
                                    NewRow["Width"] = Height;
                                    NewRow["Height"] = Width;
                                }
                                else
                                {
                                    NewRow["Height"] = Height;
                                    NewRow["Width"] = Width;
                                }
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void Techno4InsetsGridsOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightProfilMargin, int WidthProfilMargin, int HeightNarrowMargin, int WidthNarrowMargin,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TempHeightMargin = HeightMargin;
                            int TempWidthMargin = WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < HeightProfilMargin)
                                TempHeightMargin = HeightNarrowMargin;
                            if (Width < WidthProfilMargin)
                                TempWidthMargin = WidthNarrowMargin;

                            Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - TempHeightMargin;
                            Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - TempWidthMargin;

                            if (Height < 10 || Width < 10)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            string Name = string.Empty;
                            if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 685 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 688 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 29470)
                                Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " 45 " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 686 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 687 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 29471)
                                Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " 90 " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = Name;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void Techno4LuxOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightProfilMargin, int WidthProfilMargin, int HeightNarrowMargin, int WidthNarrowMargin,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TempHeightMargin = HeightMargin;
                            int TempWidthMargin = WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < HeightProfilMargin)
                                TempHeightMargin = HeightNarrowMargin;
                            if (Width < WidthProfilMargin)
                                TempWidthMargin = WidthNarrowMargin;

                            Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - TempHeightMargin;
                            Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - TempWidthMargin;

                            int LuxCount = 0;
                            string InsetColor = "люкс " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            LuxCount = Convert.ToInt32(Math.Truncate(Height / 65m));
                            if (LuxCount == 0)
                                LuxCount = 1;
                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["GlassCount"] = LuxCount * Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                                rows[0]["GlassCount"] = Convert.ToInt32(rows[0]["GlassCount"]) + LuxCount * Count;
                            }
                        }
                    }
                }
            }
        }

        private void Techno4MegaOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightProfilMargin, int WidthProfilMargin, int HeightNarrowMargin, int WidthNarrowMargin,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TempHeightMargin = HeightMargin;
                            int TempWidthMargin = WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < HeightProfilMargin)
                                TempHeightMargin = HeightNarrowMargin;
                            if (Width < WidthProfilMargin)
                                TempWidthMargin = WidthNarrowMargin;

                            Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - TempHeightMargin;
                            Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - TempWidthMargin;

                            int GlassCount = 0;
                            int MegaCount = 0;
                            string InsetColor = "мега " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            foreach (DataRow item in Srows)
                            {
                                Count += Convert.ToInt32(item["Count"]);
                            }

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            GetMegaInsetStickCount(Height, ref GlassCount, ref MegaCount);

                            if (TechnoInsetColorID == 3943)
                            {
                                GlassCount = 0;
                                InsetColor += " вит";
                            }
                            else
                                InsetColor += "/" + GetInsetColorName(TechnoInsetColorID);

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["GlassCount"] = GlassCount * Count;
                                NewRow["MegaCount"] = MegaCount * Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                                rows[0]["GlassCount"] = Convert.ToInt32(rows[0]["GlassCount"]) + GlassCount * Count;
                                rows[0]["MegaCount"] = Convert.ToInt32(rows[0]["MegaCount"]) + MegaCount * Count;
                            }
                        }
                    }
                }
            }
        }

        private void CollectAllInsets(ref DataTable DestinationDT)
        {
            if (Marsel1SimpleDT.Rows.Count > 0)
                AllInsets(Marsel1SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel1InsetHeight), Convert.ToInt32(FrontMargins.Marsel1InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel1InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel1InsetMinWidth), false, true, false);

            if (Marsel5SimpleDT.Rows.Count > 0)
                AllInsets(Marsel5SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel5InsetHeight), Convert.ToInt32(FrontMargins.Marsel5InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel5InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel5InsetMinWidth), false, true, false);

            if (PortoSimpleDT.Rows.Count > 0)
                AllInsets(PortoSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.PortoInsetHeight), Convert.ToInt32(FrontMargins.PortoInsetWidth),
                    Convert.ToInt32(FrontMinSizes.PortoInsetMinHeight), Convert.ToInt32(FrontMinSizes.PortoInsetMinWidth), false, true, false);

            if (MonteSimpleDT.Rows.Count > 0)
                AllInsets(MonteSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.MonteInsetHeight), Convert.ToInt32(FrontMargins.MonteInsetWidth),
                    Convert.ToInt32(FrontMinSizes.MonteInsetMinHeight), Convert.ToInt32(FrontMinSizes.MonteInsetMinWidth), false, true, false);

            if (Techno1SimpleDT.Rows.Count > 0)
                AllInsets(Techno1SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno1InsetHeight), Convert.ToInt32(FrontMargins.Techno1InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno1InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno1InsetMinWidth), false, true, false);
            if (Techno2SimpleDT.Rows.Count > 0)
                AllInsets(Techno2SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno2InsetHeight), Convert.ToInt32(FrontMargins.Techno2InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno2InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno2InsetMinWidth), false, true, false);
            if (Techno4SimpleDT.Rows.Count > 0)
                Techno4AllInsets(Techno4SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno4Height), Convert.ToInt32(FrontMargins.Techno4Width),
                    Convert.ToInt32(FrontMargins.Techno4NarrowInsetHeight), Convert.ToInt32(FrontMargins.Techno4NarrowInsetWidth),
                    Convert.ToInt32(FrontMargins.Techno4InsetHeight), Convert.ToInt32(FrontMargins.Techno4InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno4InsetMinWidth), false, true);
            if (pFoxSimpleDT.Rows.Count > 0)
                AllInsets(pFoxSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.pFoxInsetHeight), Convert.ToInt32(FrontMargins.pFoxInsetWidth),
                    Convert.ToInt32(FrontMinSizes.pFoxInsetMinHeight), Convert.ToInt32(FrontMinSizes.pFoxInsetMinWidth), false, true, false);
            if (Techno5SimpleDT.Rows.Count > 0)
                AllInsets(Techno5SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno5InsetHeight), Convert.ToInt32(FrontMargins.Techno5InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno5InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno5InsetMinWidth), false, true, false);

            if (PR1SimpleDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1SimpleDT.Copy();
                for (int i = 0; i < PR1SimpleDT.Rows.Count; i++)
                {
                    object x1 = PR1SimpleDT.Rows[i]["Height"];
                    object x2 = PR1SimpleDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                AllInsets(TempPR1OrdersDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.PR1InsetMinWidth), Convert.ToInt32(FrontMinSizes.PR1InsetMinHeight), false, true, false);
            }
            if (ShervudSimpleDT.Rows.Count > 0)
            {
                AllInsets(ShervudSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.ShervudInsetHeight), Convert.ToInt32(FrontMargins.ShervudInsetWidth),
                    Convert.ToInt32(FrontMinSizes.ShervudInsetMinWidth), Convert.ToInt32(FrontMinSizes.ShervudInsetMinHeight), false, true, false);
            }

            if (PR3SimpleDT.Rows.Count > 0)
                AllInsets(PR3SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.PR3InsetHeight) + 80, Convert.ToInt32(FrontMargins.Techno2InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno2InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno2InsetMinWidth), false, true, false);

            if (PRU8SimpleDT.Rows.Count > 0)
                AllInsets(PRU8SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno1InsetHeight) + 36, Convert.ToInt32(FrontMargins.Techno1InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno1InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno1InsetMinWidth), false, true, false);

            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }

            DataTable DT = Marsel3SimpleDT.Clone();
            DataRow[] rows = Marsel3SimpleDT.Select("Height<1088 AND TechnoColorID=-1");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                AllInsetsMarsel3(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel3InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel3InsetMinWidth), true, true, false);
            DT.Clear();
            rows = Marsel3SimpleDT.Select("TechnoColorID<>-1");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                AllInsetsMarsel3(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetImpostHeight), Convert.ToInt32(FrontMargins.Marsel3InsetImpostWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel3InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel3InsetMinWidth), true, true, true);
            DT.Clear();
            rows = Marsel4SimpleDT.Select("TechnoColorID=-1");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                AllInsetsMarsel4(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.Marsel4Height), Convert.ToInt32(FrontMargins.Marsel4Height1),
                    Convert.ToInt32(FrontMargins.Marsel4InsetHeight), Convert.ToInt32(FrontMargins.Marsel4BoxInsetHeight), Convert.ToInt32(FrontMargins.Marsel4InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel4InsetMinWidth), false, true);
            DT.Clear();
            rows = Marsel4SimpleDT.Select("TechnoColorID<>-1");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                AllInsetsMarsel4Impost(DT, ref DestinationDT, 
                    Convert.ToInt32(FrontMargins.Marsel4InsetImpostHeight), Convert.ToInt32(FrontMargins.Marsel4InsetImpostWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel4InsetMinWidth), false, true);

            if (Jersy110SimpleDT.Rows.Count > 0)
            {
                AllInsetsMarsel4(Jersy110SimpleDT, ref DestinationDT, Convert.ToInt32(FrontMargins.Jersy110Height), Convert.ToInt32(FrontMargins.Jersy110Height1),
                    Convert.ToInt32(FrontMargins.Jersy110InsetHeight), Convert.ToInt32(FrontMargins.Jersy110BoxInsetHeight), Convert.ToInt32(FrontMargins.Jersy110InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Jersy110InsetMinHeight), Convert.ToInt32(FrontMinSizes.Jersy110InsetMinWidth), false, true);
            }
            DT.Dispose();

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void CollectInsetsGridsOnly(ref DataTable DestinationDT)
        {
            if (Marsel1GridsDT.Rows.Count > 0)
                InsetsGridsOnly(Marsel1GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel1InsetHeight), Convert.ToInt32(FrontMargins.Marsel1InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel1InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel1InsetMinWidth), true);
            if (Marsel5GridsDT.Rows.Count > 0)
                InsetsGridsOnly(Marsel5GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel5InsetHeight), Convert.ToInt32(FrontMargins.Marsel5InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel5InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel5InsetMinWidth), true);
            if (PortoGridsDT.Rows.Count > 0)
                InsetsGridsOnly(PortoGridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.PortoInsetHeight), Convert.ToInt32(FrontMargins.PortoInsetWidth),
                    Convert.ToInt32(FrontMinSizes.PortoInsetMinHeight), Convert.ToInt32(FrontMinSizes.PortoInsetMinWidth), true);
            if (MonteGridsDT.Rows.Count > 0)
                InsetsGridsOnly(MonteGridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.MonteInsetHeight), Convert.ToInt32(FrontMargins.MonteInsetWidth),
                    Convert.ToInt32(FrontMinSizes.MonteInsetMinHeight), Convert.ToInt32(FrontMinSizes.MonteInsetMinWidth), true);
            if (Marsel3GridsDT.Rows.Count > 0)
                InsetsGridsOnly(Marsel3GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel3InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel3InsetMinWidth), true);
            if (Marsel4GridsDT.Rows.Count > 0)
                InsetsGridsOnly(Marsel4GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel4InsetHeight), Convert.ToInt32(FrontMargins.Marsel4InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel4InsetMinWidth), true);
            if (Jersy110GridsDT.Rows.Count > 0)
                InsetsGridsOnly(Jersy110GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Jersy110InsetHeight), Convert.ToInt32(FrontMargins.Jersy110InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Jersy110InsetMinHeight), Convert.ToInt32(FrontMinSizes.Jersy110InsetMinWidth), true);
            if (Techno1GridsDT.Rows.Count > 0)
                InsetsGridsOnly(Techno1GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno1InsetHeight), Convert.ToInt32(FrontMargins.Techno1InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno1InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno1InsetMinWidth), true);
            if (Techno2GridsDT.Rows.Count > 0)
                InsetsGridsOnly(Techno2GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno2InsetHeight), Convert.ToInt32(FrontMargins.Techno2InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno2InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno2InsetMinWidth), true);
            if (Techno4GridsDT.Rows.Count > 0)
                Techno4InsetsGridsOnly(Techno4GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno4Height), Convert.ToInt32(FrontMargins.Techno4Width),
                    Convert.ToInt32(FrontMargins.Techno4NarrowInsetHeight), Convert.ToInt32(FrontMargins.Techno4NarrowInsetWidth),
                    Convert.ToInt32(FrontMargins.Techno4InsetHeight), Convert.ToInt32(FrontMargins.Techno4InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno4InsetMinWidth), true);
            if (pFoxGridsDT.Rows.Count > 0)
                InsetsGridsOnly(pFoxGridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.pFoxInsetHeight), Convert.ToInt32(FrontMargins.pFoxInsetWidth),
                    Convert.ToInt32(FrontMinSizes.pFoxInsetMinHeight), Convert.ToInt32(FrontMinSizes.pFoxInsetMinWidth), true);
            if (Techno5GridsDT.Rows.Count > 0)
                InsetsGridsOnly(Techno5GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno5InsetHeight), Convert.ToInt32(FrontMargins.Techno5InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno5InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno5InsetMinWidth), true);
            if (PR1GridsDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1GridsDT.Copy();
                for (int i = 0; i < PR1GridsDT.Rows.Count; i++)
                {
                    object x1 = PR1GridsDT.Rows[i]["Height"];
                    object x2 = PR1GridsDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                InsetsGridsOnly(TempPR1OrdersDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.PR1InsetMinWidth), Convert.ToInt32(FrontMinSizes.PR1InsetMinHeight), true);
            }
            if (PR3GridsDT.Rows.Count > 0)
                InsetsGridsOnly(PR3GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.PR3InsetHeight), Convert.ToInt32(FrontMargins.Techno2InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno2InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno2InsetMinWidth), true);
            if (PRU8GridsDT.Rows.Count > 0)
                InsetsGridsOnly(PRU8GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno1InsetHeight), Convert.ToInt32(FrontMargins.Techno1InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno1InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno1InsetMinWidth), true);

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["FrontID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["TechnoInsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["TechnoInsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void CollectInsetsLuxOnly(ref DataTable DestinationDT)
        {
            //DataTable DT = Techno1LuxDT.Clone();
            //DataRow[] rows = Techno1LuxDT.Select("(Height>=" + Convert.ToInt32(FrontMargins.Techno1Height) + ")");
            //DT.Clear();
            //foreach (DataRow item in rows)
            //    DT.Rows.Add(item.ItemArray);
            //if (DT.Rows.Count > 0)
            //    LuxOnly(DT, ref DestinationDT,
            //        Convert.ToInt32(FrontMargins.Techno1InsetHeight), Convert.ToInt32(FrontMargins.Techno1InsetWidth),
            //        Convert.ToInt32(FrontMargins.LuxInsetHeight), Convert.ToInt32(FrontMargins.LuxInsetWidth), true);
            //rows = Techno2LuxDT.Select("(Height>=" + Convert.ToInt32(FrontMargins.Techno2Height) + ")");
            //DT.Clear();
            //foreach (DataRow item in rows)
            //    DT.Rows.Add(item.ItemArray);
            //if (DT.Rows.Count > 0)
            //    LuxOnly(DT, ref DestinationDT,
            //        Convert.ToInt32(FrontMargins.Techno2InsetHeight), Convert.ToInt32(FrontMargins.Techno2InsetWidth),
            //        Convert.ToInt32(FrontMargins.LuxInsetHeight), Convert.ToInt32(FrontMargins.LuxInsetWidth), true);
            //rows = Techno4LuxDT.Select("(Height>=" + Convert.ToInt32(FrontMargins.Techno4Height) + ")");
            //DT.Clear();
            //foreach (DataRow item in rows)
            //    DT.Rows.Add(item.ItemArray);
            //if (DT.Rows.Count > 0)
            //    Techno4LuxOnly(DT, ref DestinationDT,
            //        Convert.ToInt32(FrontMargins.Techno4Height), Convert.ToInt32(FrontMargins.Techno4Width),
            //        Convert.ToInt32(FrontMargins.Techno4NarrowInsetHeight), Convert.ToInt32(FrontMargins.Techno4NarrowInsetWidth),
            //        Convert.ToInt32(FrontMargins.Techno4InsetHeight), Convert.ToInt32(FrontMargins.Techno4InsetWidth),
            //        Convert.ToInt32(FrontMinSizes.Techno4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno4InsetMinWidth), true);
            //rows = Techno5LuxDT.Select("(Height>=" + Convert.ToInt32(FrontMargins.Techno1Height) + ")");
            //DT.Clear();
            //foreach (DataRow item in rows)
            //    DT.Rows.Add(item.ItemArray);
            //if (DT.Rows.Count > 0)
            //    LuxOnly(DT, ref DestinationDT,
            //        Convert.ToInt32(FrontMargins.Techno5InsetHeight), Convert.ToInt32(FrontMargins.Techno5InsetWidth),
            //        Convert.ToInt32(FrontMargins.LuxInsetHeight), Convert.ToInt32(FrontMargins.LuxInsetWidth), true);

            //rows = PR3LuxDT.Select("(Height>=" + Convert.ToInt32(FrontMargins.Techno2Height) + ")");
            //DT.Clear();
            //foreach (DataRow item in rows)
            //    DT.Rows.Add(item.ItemArray);
            //if (DT.Rows.Count > 0)
            //    LuxOnly(DT, ref DestinationDT,
            //        Convert.ToInt32(FrontMargins.Techno2InsetHeight), Convert.ToInt32(FrontMargins.Techno2InsetWidth),
            //        Convert.ToInt32(FrontMargins.LuxInsetHeight), Convert.ToInt32(FrontMargins.LuxInsetWidth), true);

            LuxOnly(Techno1LuxDT, ref DestinationDT,
                Convert.ToInt32(FrontMargins.Techno1InsetHeight), Convert.ToInt32(FrontMargins.Techno1InsetWidth),
                Convert.ToInt32(FrontMinSizes.Techno1InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno1InsetMinWidth), true);
            
            LuxOnly(Techno2LuxDT, ref DestinationDT,
                Convert.ToInt32(FrontMargins.Techno2InsetHeight), Convert.ToInt32(FrontMargins.Techno2InsetWidth),
                Convert.ToInt32(FrontMinSizes.Techno2InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno2InsetMinWidth), true);

            Techno4LuxOnly(Techno4LuxDT, ref DestinationDT,
                Convert.ToInt32(FrontMargins.Techno4Height), Convert.ToInt32(FrontMargins.Techno4Width),
                Convert.ToInt32(FrontMargins.Techno4NarrowInsetHeight), Convert.ToInt32(FrontMargins.Techno4NarrowInsetWidth),
                Convert.ToInt32(FrontMargins.Techno4InsetHeight), Convert.ToInt32(FrontMargins.Techno4InsetWidth),
                Convert.ToInt32(FrontMinSizes.Techno4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno4InsetMinWidth), true);

            LuxOnly(Techno5LuxDT, ref DestinationDT,
                Convert.ToInt32(FrontMargins.Techno5InsetHeight), Convert.ToInt32(FrontMargins.Techno5InsetWidth),
                Convert.ToInt32(FrontMinSizes.Techno5InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno5InsetMinWidth), true);

            LuxOnly(PR3LuxDT, ref DestinationDT,
                Convert.ToInt32(FrontMargins.PR3InsetHeight), Convert.ToInt32(FrontMargins.Techno2InsetWidth),
                Convert.ToInt32(FrontMinSizes.Techno2InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno2InsetMinWidth), true);

            //if (Techno2LuxDT.Rows.Count > 0)
            //    LuxOnly(Techno2LuxDT, ref DestinationDT,
            //        Convert.ToInt32(FrontMargins.Techno2InsetHeight), Convert.ToInt32(FrontMargins.Techno2InsetWidth),
            //        Convert.ToInt32(FrontMargins.LuxInsetHeight), Convert.ToInt32(FrontMargins.LuxInsetWidth), true);
            //if (Techno4LuxDT.Rows.Count > 0)
            //    LuxOnly(Techno4LuxDT, ref DestinationDT,
            //        Convert.ToInt32(FrontMargins.Techno4InsetHeight), Convert.ToInt32(FrontMargins.Techno4InsetWidth),
            //        Convert.ToInt32(FrontMargins.LuxInsetHeight), Convert.ToInt32(FrontMargins.LuxInsetWidth), true);
            //if (Techno5LuxDT.Rows.Count > 0)
            //    LuxOnly(Techno5LuxDT, ref DestinationDT,
            //        Convert.ToInt32(FrontMargins.Techno5InsetHeight), Convert.ToInt32(FrontMargins.Techno5InsetWidth),
            //        Convert.ToInt32(FrontMargins.LuxInsetHeight), Convert.ToInt32(FrontMargins.LuxInsetWidth), true);

            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["TechnoInsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["TechnoInsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void CollectInsetsVitrinaOnly(ref DataTable DestinationDT)
        {
            DataTable DT = Techno4MegaDT.Clone();
            DataRow[] rows = Techno4MegaDT.Select("TechnoInsetColorID=128 AND (Height>=" + Convert.ToInt32(FrontMargins.Techno4Height) + ")");
            DT.Clear();
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                Techno4MegaOnly(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno4Height), Convert.ToInt32(FrontMargins.Techno4Width),
                    Convert.ToInt32(FrontMargins.Techno4NarrowInsetHeight), Convert.ToInt32(FrontMargins.Techno4NarrowInsetWidth),
                    Convert.ToInt32(FrontMargins.Techno4InsetHeight), Convert.ToInt32(FrontMargins.Techno4InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno4InsetMinWidth), true);
            DT.Dispose();

            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["TechnoInsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["TechnoInsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void CollectInsetsGlassOnly(ref DataTable DestinationDT)
        {
            DataTable DT = Techno4MegaDT.Clone();
            DataRow[] rows = Techno4MegaDT.Select("TechnoInsetColorID=3943 AND (Height>=" + Convert.ToInt32(FrontMargins.Techno4Height) + ")");
            DT.Clear();
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                GlassOnly(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno4Height), Convert.ToInt32(FrontMargins.Techno4Width),
                    Convert.ToInt32(FrontMargins.Techno4NarrowInsetHeight), Convert.ToInt32(FrontMargins.Techno4NarrowInsetWidth),
                    Convert.ToInt32(FrontMargins.Techno4InsetHeight), Convert.ToInt32(FrontMargins.Techno4InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno4InsetMinWidth), true);

            DT.Clear();
            rows = Techno1MegaDT.Select("TechnoInsetColorID=3943 AND (Height>=" + Convert.ToInt32(FrontMargins.Techno1Height) + ")");
            DT.Clear();
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                GlassOnly(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno1Height), Convert.ToInt32(FrontMargins.Techno1Width),
                    Convert.ToInt32(FrontMargins.Techno1InsetHeight), Convert.ToInt32(FrontMargins.Techno1InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno1InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno1InsetMinWidth), true);

            DT.Clear();
            rows = Techno2MegaDT.Select("TechnoInsetColorID=3943 AND (Height>=" + Convert.ToInt32(FrontMargins.Techno2Height) + ")");
            DT.Clear();
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                GlassOnly(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno2Height), Convert.ToInt32(FrontMargins.Techno2Width),
                    Convert.ToInt32(FrontMargins.Techno2InsetHeight), Convert.ToInt32(FrontMargins.Techno2InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno2InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno2InsetMinWidth), true);

            DT.Dispose();

            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["TechnoInsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["TechnoInsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void CollectInsetsMegaOnly(ref DataTable DestinationDT)
        {
            if (Techno1MegaDT.Rows.Count > 0)
                MegaOnly(Techno1MegaDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno1InsetHeight), Convert.ToInt32(FrontMargins.Techno1InsetWidth),
                Convert.ToInt32(FrontMinSizes.Techno1InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno1InsetMinWidth), true);
            if (Techno2MegaDT.Rows.Count > 0)
                MegaOnly(Techno2MegaDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno2InsetHeight), Convert.ToInt32(FrontMargins.Techno2InsetWidth),
                Convert.ToInt32(FrontMinSizes.Techno2InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno2InsetMinWidth), true);

            //DataTable DT = Techno4MegaDT.Clone();
            //DataRow[] rows = Techno4MegaDT.Select("TechnoInsetColorID<>128 AND (Height>=" + (Convert.ToInt32(FrontMargins.Techno4Height) + 131) + ")");
            //DT.Clear();
            //foreach (DataRow item in rows)
            //    DT.Rows.Add(item.ItemArray);
            //if (DT.Rows.Count > 0)
            //    Techno4MegaOnly(DT, ref DestinationDT,
            //        Convert.ToInt32(FrontMargins.Techno4Height), Convert.ToInt32(FrontMargins.Techno4Width),
            //        Convert.ToInt32(FrontMargins.Techno4NarrowInsetHeight), Convert.ToInt32(FrontMargins.Techno4NarrowInsetWidth),
            //        Convert.ToInt32(FrontMargins.Techno4InsetHeight), Convert.ToInt32(FrontMargins.Techno4InsetWidth),
            //        Convert.ToInt32(FrontMinSizes.Techno4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno4InsetMinWidth), true);
            Techno4MegaOnly(Techno4MegaDT, ref DestinationDT,
                Convert.ToInt32(FrontMargins.Techno4Height), Convert.ToInt32(FrontMargins.Techno4Width),
                Convert.ToInt32(FrontMargins.Techno4NarrowInsetHeight), Convert.ToInt32(FrontMargins.Techno4NarrowInsetWidth),
                Convert.ToInt32(FrontMargins.Techno4InsetHeight), Convert.ToInt32(FrontMargins.Techno4InsetWidth),
                Convert.ToInt32(FrontMinSizes.Techno4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno4InsetMinWidth), true);

            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 0; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["MegaCount"]) == 0)
                    DestinationDT.Rows[i]["MegaCount"] = DBNull.Value;
                if (i == 0)
                    continue;
                if (Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["TechnoInsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["TechnoInsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void CollectInsetsFilenkaOnly(ref DataTable DestinationDT)
        {
            if (Marsel1SimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(Marsel1SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel1InsetHeight), Convert.ToInt32(FrontMargins.Marsel1InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel1InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel1InsetMinWidth), true);

            if (Marsel5SimpleDT.Rows.Count > 0)
                InsetsFilenkaOnly(Marsel5SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel5InsetHeight), Convert.ToInt32(FrontMargins.Marsel5InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel5InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel5InsetMinWidth), true);

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["FrontID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["TechnoInsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["TechnoInsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void CollectInsetsPressOnly(ref DataTable DestinationDT)
        {
            DataTable DT = Marsel3SimpleDT.Clone();
            DataRow[] rows = Marsel3SimpleDT.Select("TechnoColorID=-1");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                Marsel3PressOnly(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel3InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel3InsetMinWidth), true, false);
            DT.Clear();
            rows = Marsel3SimpleDT.Select("TechnoColorID<>-1");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                Marsel3PressOnly(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel3InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel3InsetMinWidth), true, true);

            //if (Marsel3SimpleDT.Rows.Count > 0)
            //    Marsel3PressOnly(Marsel3SimpleDT, ref DestinationDT,
            //        Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
            //        Convert.ToInt32(FrontMinSizes.Marsel3InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel3InsetMinWidth), true);
            if (Marsel4SimpleDT.Rows.Count > 0)
                InsetsPressOnly(Marsel4SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel4InsetHeight), Convert.ToInt32(FrontMargins.Marsel4InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel4InsetMinWidth), true);
            if (Jersy110SimpleDT.Rows.Count > 0)
                InsetsPressOnly(Jersy110SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Jersy110InsetHeight), Convert.ToInt32(FrontMargins.Jersy110InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Jersy110InsetMinHeight), Convert.ToInt32(FrontMinSizes.Jersy110InsetMinWidth), true);
            if (Techno1SimpleDT.Rows.Count > 0)
                InsetsPressOnly(Techno1SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno1InsetHeight), Convert.ToInt32(FrontMargins.Techno1InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno1InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno1InsetMinWidth), true);
            if (Techno2SimpleDT.Rows.Count > 0)
                InsetsPressOnly(Techno2SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno2InsetHeight), Convert.ToInt32(FrontMargins.Techno2InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno2InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno2InsetMinWidth), true);
            if (Techno4SimpleDT.Rows.Count > 0)
                InsetsPressOnly(Techno4SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno4InsetHeight), Convert.ToInt32(FrontMargins.Techno4InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno4InsetMinWidth), true);
            if (pFoxSimpleDT.Rows.Count > 0)
                InsetsPressOnly(pFoxSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno4InsetHeight), Convert.ToInt32(FrontMargins.Techno4InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno4InsetMinWidth), true);
            if (Techno5SimpleDT.Rows.Count > 0)
                InsetsPressOnly(Techno5SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno5InsetHeight), Convert.ToInt32(FrontMargins.Techno5InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno5InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno5InsetMinWidth), true);
            if (PR1SimpleDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1SimpleDT.Copy();
                for (int i = 0; i < PR1SimpleDT.Rows.Count; i++)
                {
                    object x1 = PR1SimpleDT.Rows[i]["Height"];
                    object x2 = PR1SimpleDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                InsetsPressOnly(TempPR1OrdersDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.PR1InsetMinWidth), Convert.ToInt32(FrontMinSizes.PR1InsetMinHeight), true);
            }
            if (ShervudSimpleDT.Rows.Count > 0)
            {
                InsetsPressOnly(ShervudSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.ShervudInsetHeight), Convert.ToInt32(FrontMargins.ShervudInsetWidth),
                    Convert.ToInt32(FrontMinSizes.ShervudInsetMinWidth), Convert.ToInt32(FrontMinSizes.ShervudInsetMinHeight), true);
            }
            if (PR3SimpleDT.Rows.Count > 0)
                InsetsPressOnly(PR3SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.PR3InsetHeight), Convert.ToInt32(FrontMargins.Techno2InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno2InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno2InsetMinWidth), true);
            if (PRU8SimpleDT.Rows.Count > 0)
                InsetsPressOnly(PRU8SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Techno1InsetHeight), Convert.ToInt32(FrontMargins.Techno1InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Techno1InsetMinHeight), Convert.ToInt32(FrontMinSizes.Techno1InsetMinWidth), true);

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["TechnoInsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["TechnoInsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void SummaryPR1Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryMarsel1Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryMarsel3Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, true);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, true);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, true);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryTechno1Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, DataTable LuxDT, DataTable MegaDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            CollectOrders(DistinctSizesDT, LuxDT, ref SummOrdersDT, 4, FrontName, false);
            CollectOrders(DistinctSizesDT, MegaDT, ref SummOrdersDT, 5, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryShervudOrders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryTechno2Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, DataTable LuxDT, DataTable MegaDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            CollectOrders(DistinctSizesDT, LuxDT, ref SummOrdersDT, 4, FrontName, false);
            CollectOrders(DistinctSizesDT, MegaDT, ref SummOrdersDT, 5, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryTechno4Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, DataTable LuxDT, DataTable MegaDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            CollectOrders(DistinctSizesDT, LuxDT, ref SummOrdersDT, 4, FrontName, false);
            CollectOrders(DistinctSizesDT, MegaDT, ref SummOrdersDT, 5, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummarypFoxOrders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryTechno5Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, DataTable LuxDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            CollectOrders(DistinctSizesDT, LuxDT, ref SummOrdersDT, 5, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        public void ClearOrders()
        {
            FrontsID.Clear();
            Marsel1OrdersDT.Clear();
            Marsel5OrdersDT.Clear();
            PortoOrdersDT.Clear();
            MonteOrdersDT.Clear();
            Marsel3OrdersDT.Clear();
            Marsel4OrdersDT.Clear();
            Jersy110OrdersDT.Clear();
            ShervudOrdersDT.Clear();
            Techno1OrdersDT.Clear();
            Techno2OrdersDT.Clear();
            Techno4OrdersDT.Clear();
            pFoxOrdersDT.Clear();
            Techno5OrdersDT.Clear();
            PR1OrdersDT.Clear();
            PR3OrdersDT.Clear();
            PRU8OrdersDT.Clear();
        }

        public ArrayList GetFrontsID
        {
            set
            {
                FrontsID = value;
            }
        }

        public bool GetOrders(int WorkAssignmentID, int FactoryID)
        {
            bImpostMargin = false;
            ProfileNamesDT.Clear();
            //InsetTypeNamesDT.Clear();
            for (int i = 0; i < FrontsID.Count; i++)
            {
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Marsel1))
                {
                    GetFrontsOrders(ref Marsel1OrdersDT, WorkAssignmentID, FactoryID, Fronts.Marsel1);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Marsel1);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Marsel1);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Marsel5))
                {
                    GetFrontsOrders(ref Marsel5OrdersDT, WorkAssignmentID, FactoryID, Fronts.Marsel5);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Marsel5);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Marsel5);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Porto))
                {
                    GetFrontsOrders(ref PortoOrdersDT, WorkAssignmentID, FactoryID, Fronts.Porto);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Marsel5);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Porto);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Monte))
                {
                    GetFrontsOrders(ref MonteOrdersDT, WorkAssignmentID, FactoryID, Fronts.Monte);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Monte);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Monte);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Marsel3))
                {
                    GetFrontsOrders(ref Marsel3OrdersDT, WorkAssignmentID, FactoryID, Fronts.Marsel3);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Marsel3);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Marsel3);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Marsel4))
                {
                    GetFrontsOrders(ref Marsel4OrdersDT, WorkAssignmentID, FactoryID, Fronts.Marsel4);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Marsel4);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Jersy110))
                {
                    GetFrontsOrders(ref Jersy110OrdersDT, WorkAssignmentID, FactoryID, Fronts.Jersy110);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Jersy110);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Techno1))
                {
                    GetFrontsOrders(ref Techno1OrdersDT, WorkAssignmentID, FactoryID, Fronts.Techno1);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Techno1);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Techno1);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Shervud))
                {
                    GetFrontsOrders(ref ShervudOrdersDT, WorkAssignmentID, FactoryID, Fronts.Shervud);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Techno1);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Shervud);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Techno2))
                {
                    GetFrontsOrders(ref Techno2OrdersDT, WorkAssignmentID, FactoryID, Fronts.Techno2);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Techno2);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Techno2);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Techno4))
                {
                    GetFrontsOrders(ref Techno4OrdersDT, WorkAssignmentID, FactoryID, Fronts.Techno4);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Techno4);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Techno4);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.pFox))
                {
                    GetFrontsOrders(ref pFoxOrdersDT, WorkAssignmentID, FactoryID, Fronts.pFox);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.pFox);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.pFox);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Techno5))
                {
                    GetFrontsOrders(ref Techno5OrdersDT, WorkAssignmentID, FactoryID, Fronts.Techno5);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Techno5);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Techno5);
                }
            }
            
            if (Marsel1OrdersDT.Rows.Count == 0 && Marsel5OrdersDT.Rows.Count == 0 && PortoOrdersDT.Rows.Count == 0 && MonteOrdersDT.Rows.Count == 0 && 
                Marsel3OrdersDT.Rows.Count == 0 && Marsel4OrdersDT.Rows.Count == 0 &&
                Jersy110OrdersDT.Rows.Count == 0 &&
                ShervudOrdersDT.Rows.Count == 0 && Techno1OrdersDT.Rows.Count == 0 && Techno2OrdersDT.Rows.Count == 0 &&
                Techno4OrdersDT.Rows.Count == 0 && pFoxOrdersDT.Rows.Count == 0 && Techno5OrdersDT.Rows.Count == 0 && 
                PR3OrdersDT.Rows.Count == 0)
                return false;
            else
                return true;
        }

        public bool GetPR1Orders(int WorkAssignmentID, int FactoryID)
        {
            ProfileNamesDT.Clear();
            //InsetTypeNamesDT.Clear();
            for (int i = 0; i < FrontsID.Count; i++)
            {
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.PR1))
                {
                    GetFrontsOrders(ref PR1OrdersDT, WorkAssignmentID, FactoryID, Fronts.PR1);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.PR1);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.PR1);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.PR2))
                {
                    GetFrontsOrders(ref PR1OrdersDT, WorkAssignmentID, FactoryID, Fronts.PR2);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.PR2);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.PR2);
                }
            }

            if (PR1OrdersDT.Rows.Count == 0)
                return false;
            else
                return true;
        }

        public bool GetPR3Orders(int WorkAssignmentID, int FactoryID)
        {
            ProfileNamesDT.Clear();
            //InsetTypeNamesDT.Clear();
            for (int i = 0; i < FrontsID.Count; i++)
            {
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.PR3))
                {
                    GetFrontsOrders(ref PR3OrdersDT, WorkAssignmentID, FactoryID, Fronts.PR3);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.PR3);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.PR3);
                }
            }

            if (PR3OrdersDT.Rows.Count == 0)
                return false;
            else
                return true;
        }

        public bool GetPRU8Orders(int WorkAssignmentID, int FactoryID)
        {
            ProfileNamesDT.Clear();
            //InsetTypeNamesDT.Clear();
            for (int i = 0; i < FrontsID.Count; i++)
            {
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.PRU8))
                {
                    GetFrontsOrders(ref PRU8OrdersDT, WorkAssignmentID, FactoryID, Fronts.PRU8);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.PRU8);
                }
            }

            if (PRU8OrdersDT.Rows.Count == 0)
                return false;
            else
                return true;
        }

        public void GetCurrentDate()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.UsersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    CurrentDate = Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        public void CreateExcel(int WorkAssignmentID, int FactoryID, string BatchName, string ClientName, ref string sSourceFileName)
        {
            GetCurrentDate();

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont Calibri11F = hssfworkbook.CreateFont();
            Calibri11F.FontHeightInPoints = 11;
            Calibri11F.FontName = "Calibri";

            HSSFFont CalibriBold11F = hssfworkbook.CreateFont();
            CalibriBold11F.FontHeightInPoints = 11;
            CalibriBold11F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold11F.FontName = "Calibri";

            HSSFFont CalibriBold15F = hssfworkbook.CreateFont();
            CalibriBold15F.FontHeightInPoints = 15;
            CalibriBold15F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold15F.FontName = "Calibri";

            HSSFFont Serif8F = hssfworkbook.CreateFont();
            Serif8F.FontHeightInPoints = 8;
            Serif8F.FontName = "MS Sans Serif";

            HSSFFont Serif10F = hssfworkbook.CreateFont();
            Serif10F.FontHeightInPoints = 10;
            Serif10F.FontName = "MS Sans Serif";

            HSSFFont SerifBold10F = hssfworkbook.CreateFont();
            SerifBold10F.FontHeightInPoints = 10;
            SerifBold10F.FontName = "MS Sans Serif";
            SerifBold10F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;

            HSSFCellStyle Calibri11CS = hssfworkbook.CreateCellStyle();
            Calibri11CS.SetFont(Calibri11F);

            HSSFCellStyle CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.SetFont(CalibriBold11F);

            HSSFCellStyle CalibriBold15CS = hssfworkbook.CreateCellStyle();
            CalibriBold15CS.SetFont(CalibriBold15F);

            HSSFCellStyle TableHeaderCS = hssfworkbook.CreateCellStyle();
            TableHeaderCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.SetFont(Serif8F);

            HSSFCellStyle TableHeaderDecCS = hssfworkbook.CreateCellStyle();
            TableHeaderDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.SetFont(Serif8F);

            HSSFCellStyle TableContentCS = hssfworkbook.CreateCellStyle();
            TableContentCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableContentCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableContentCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableContentCS.RightBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableContentCS.TopBorderColor = HSSFColor.BLACK.index;
            TableContentCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountCS = hssfworkbook.CreateCellStyle();
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountDecCS = hssfworkbook.CreateCellStyle();
            TotamAmountDecCS.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            #endregion

            PR1SimpleDT.Clear();
            PR1VitrinaDT.Clear();
            PR1GridsDT.Clear();

            Marsel1SimpleDT.Clear();
            Marsel5SimpleDT.Clear();
            PortoSimpleDT.Clear();
            MonteSimpleDT.Clear();
            Marsel3SimpleDT.Clear();
            Marsel4SimpleDT.Clear();
            Jersy110SimpleDT.Clear();
            ShervudSimpleDT.Clear();
            Techno1SimpleDT.Clear();
            Techno2SimpleDT.Clear();
            Techno4SimpleDT.Clear();
            pFoxSimpleDT.Clear();
            Techno5SimpleDT.Clear();
            PR3SimpleDT.Clear();
            PRU8SimpleDT.Clear();

            Marsel1VitrinaDT.Clear();
            Marsel5VitrinaDT.Clear();
            PortoVitrinaDT.Clear();
            MonteVitrinaDT.Clear();
            Marsel3VitrinaDT.Clear();
            Marsel4VitrinaDT.Clear();
            Jersy110VitrinaDT.Clear();
            ShervudVitrinaDT.Clear();
            Techno1VitrinaDT.Clear();
            Techno2VitrinaDT.Clear();
            pFoxVitrinaDT.Clear();
            Techno4VitrinaDT.Clear();
            Techno5VitrinaDT.Clear();
            PR3VitrinaDT.Clear();
            PRU8VitrinaDT.Clear();

            Marsel1GridsDT.Clear();
            Marsel5GridsDT.Clear();
            PortoGridsDT.Clear();
            MonteGridsDT.Clear();
            Marsel3GridsDT.Clear();
            Marsel4GridsDT.Clear();
            Jersy110GridsDT.Clear();
            Techno1GridsDT.Clear();
            Techno2GridsDT.Clear();
            Techno4GridsDT.Clear();
            pFoxGridsDT.Clear();
            Techno5GridsDT.Clear();
            PR3GridsDT.Clear();
            PRU8GridsDT.Clear();

            Techno1LuxDT.Clear();
            Techno2LuxDT.Clear();
            Techno4LuxDT.Clear();
            Techno5LuxDT.Clear();
            PR3LuxDT.Clear();

            Techno1MegaDT.Clear();
            Techno2MegaDT.Clear();
            Techno4MegaDT.Clear();

            if (Marsel1OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(Marsel1OrdersDT, ref Marsel1SimpleDT);
                GetVitrinaFronts(Marsel1OrdersDT, ref Marsel1VitrinaDT);
                GetGridFronts(Marsel1OrdersDT, ref Marsel1GridsDT);
            }
            if (Marsel5OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(Marsel5OrdersDT, ref Marsel5SimpleDT);
                GetVitrinaFronts(Marsel5OrdersDT, ref Marsel5VitrinaDT);
                GetGridFronts(Marsel5OrdersDT, ref Marsel5GridsDT);
            }
            if (PortoOrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(PortoOrdersDT, ref PortoSimpleDT);
                GetVitrinaFronts(PortoOrdersDT, ref PortoVitrinaDT);
                GetGridFronts(PortoOrdersDT, ref PortoGridsDT);
            }
            if (MonteOrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(MonteOrdersDT, ref MonteSimpleDT);
                GetVitrinaFronts(MonteOrdersDT, ref MonteVitrinaDT);
                GetGridFronts(MonteOrdersDT, ref MonteGridsDT);
            }
            if (Marsel3OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(Marsel3OrdersDT, ref Marsel3SimpleDT);
                GetVitrinaFronts(Marsel3OrdersDT, ref Marsel3VitrinaDT);
                GetGridFronts(Marsel3OrdersDT, ref Marsel3GridsDT);
            }
            if (Marsel4OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(Marsel4OrdersDT, ref Marsel4SimpleDT);
                GetVitrinaFronts(Marsel4OrdersDT, ref Marsel4VitrinaDT);
                GetGridFronts(Marsel4OrdersDT, ref Marsel4GridsDT);
            }
            if (Jersy110OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(Jersy110OrdersDT, ref Jersy110SimpleDT);
                GetVitrinaFronts(Jersy110OrdersDT, ref Jersy110VitrinaDT);
                GetGridFronts(Jersy110OrdersDT, ref Jersy110GridsDT);
            }
            if (Techno1OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(Techno1OrdersDT, ref Techno1SimpleDT);
                GetVitrinaFronts(Techno1OrdersDT, ref Techno1VitrinaDT);
                GetGridFronts(Techno1OrdersDT, ref Techno1GridsDT);
                GetLuxFronts(Techno1OrdersDT, ref Techno1LuxDT);
                GetMegaFronts(Techno1OrdersDT, ref Techno1MegaDT);
            }
            if (ShervudOrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(ShervudOrdersDT, ref ShervudSimpleDT);
                GetVitrinaFronts(ShervudOrdersDT, ref ShervudVitrinaDT);
            }
            if (Techno2OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(Techno2OrdersDT, ref Techno2SimpleDT);
                GetVitrinaFronts(Techno2OrdersDT, ref Techno2VitrinaDT);
                GetGridFronts(Techno2OrdersDT, ref Techno2GridsDT);
                GetLuxFronts(Techno2OrdersDT, ref Techno2LuxDT);
                GetMegaFronts(Techno2OrdersDT, ref Techno2MegaDT);
            }
            if (Techno4OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(Techno4OrdersDT, ref Techno4SimpleDT);
                GetVitrinaFronts(Techno4OrdersDT, ref Techno4VitrinaDT);
                GetGridFronts(Techno4OrdersDT, ref Techno4GridsDT);
                GetLuxFronts(Techno4OrdersDT, ref Techno4LuxDT);
                GetMegaFronts(Techno4OrdersDT, ref Techno4MegaDT);
            }
            if (pFoxOrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(pFoxOrdersDT, ref pFoxSimpleDT);
                GetVitrinaFronts(pFoxOrdersDT, ref pFoxVitrinaDT);
                GetGridFronts(pFoxOrdersDT, ref pFoxGridsDT);
            }
            if (Techno5OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(Techno5OrdersDT, ref Techno5SimpleDT);
                GetVitrinaFronts(Techno5OrdersDT, ref Techno5VitrinaDT);
                GetGridFronts(Techno5OrdersDT, ref Techno5GridsDT);
                GetLuxFronts(Techno5OrdersDT, ref Techno5LuxDT);
            }

            if (Marsel1OrdersDT.Rows.Count == 0 && Marsel5OrdersDT.Rows.Count == 0 && PortoOrdersDT.Rows.Count == 0 && MonteOrdersDT.Rows.Count == 0 && 
                Marsel3OrdersDT.Rows.Count == 0 && Marsel4OrdersDT.Rows.Count == 0 &&
                Jersy110OrdersDT.Rows.Count == 0 && ShervudOrdersDT.Rows.Count == 0 && 
                Techno1OrdersDT.Rows.Count == 0 && Techno2OrdersDT.Rows.Count == 0 && Techno4OrdersDT.Rows.Count == 0 && pFoxOrdersDT.Rows.Count == 0 &&
                Techno5OrdersDT.Rows.Count == 0)
                return;

            string DispatchDate = string.Empty;
            if (ClientName == "ЗОВ" || ClientName == "Маркетинг + ЗОВ")
            {
                string FrontsFilterString = "(SELECT MainOrderID FROM FrontsOrders WHERE FactoryID=1 AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel1) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel3) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel4) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Jersy110) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel5) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Porto) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Monte) +
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno1) + 
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Shervud) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno2) +
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno4) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.pFox) + 
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno5) + "))";
                string SelectCommand = @"SELECT DispatchDate, MegaOrderID FROM MegaOrders
                    WHERE MegaOrderID IN (SELECT MegaOrderID FROM MainOrders
                    WHERE MainOrderID IN" + FrontsFilterString + " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")))";
                
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                    ConnectionStrings.ZOVOrdersConnectionString))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0 && DT.Rows[0]["DispatchDate"] != DBNull.Value)
                            DispatchDate = Convert.ToDateTime(DT.Rows[0]["DispatchDate"]).ToString("dd.MM.yyyy");
                    }
                }
            }

            TotalInfoToExcel(ref hssfworkbook,
                CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName);

            StemasToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, false);

            RapidToExcel(ref hssfworkbook,
                CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, false);

            InsetToExcel(ref hssfworkbook,
                CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, false);

            AssemblyToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, false);

            OrdersSummaryInfoToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, false, false);


            GetMainOrdersSummary(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, false, false, false);

            //string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            //string tempFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);

            string FileName = WorkAssignmentID + " " + BatchName + "  Угол 90";
            string tempFolder = @"\\192.168.1.6\Public\USERS_2016\_ДЕЙСТВУЮЩИЕ\ПРОИЗВОДСТВО\ПРОФИЛЬ\инфиниум\";
            string CurrentMonthName = DateTime.Now.ToString("MMMM");
            tempFolder = Path.Combine(tempFolder, CurrentMonthName);
            if (!(Directory.Exists(tempFolder)))
            {
                Directory.CreateDirectory(tempFolder);
            }
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            sw.Stop();
            System.Diagnostics.Process.Start(file.FullName);
        }

        public void CreateExcelPR1(int WorkAssignmentID, int FactoryID, string BatchName, string ClientName, ref string sSourceFileName)
        {
            GetCurrentDate();

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont Calibri11F = hssfworkbook.CreateFont();
            Calibri11F.FontHeightInPoints = 11;
            Calibri11F.FontName = "Calibri";

            HSSFFont CalibriBold11F = hssfworkbook.CreateFont();
            CalibriBold11F.FontHeightInPoints = 11;
            CalibriBold11F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold11F.FontName = "Calibri";

            HSSFFont CalibriBold15F = hssfworkbook.CreateFont();
            CalibriBold15F.FontHeightInPoints = 15;
            CalibriBold15F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold15F.FontName = "Calibri";

            HSSFFont Serif8F = hssfworkbook.CreateFont();
            Serif8F.FontHeightInPoints = 8;
            Serif8F.FontName = "MS Sans Serif";

            HSSFFont Serif10F = hssfworkbook.CreateFont();
            Serif10F.FontHeightInPoints = 10;
            Serif10F.FontName = "MS Sans Serif";

            HSSFFont SerifBold10F = hssfworkbook.CreateFont();
            SerifBold10F.FontHeightInPoints = 10;
            SerifBold10F.FontName = "MS Sans Serif";
            SerifBold10F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;

            HSSFCellStyle Calibri11CS = hssfworkbook.CreateCellStyle();
            Calibri11CS.SetFont(Calibri11F);

            HSSFCellStyle CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.SetFont(CalibriBold11F);

            HSSFCellStyle CalibriBold15CS = hssfworkbook.CreateCellStyle();
            CalibriBold15CS.SetFont(CalibriBold15F);

            HSSFCellStyle TableHeaderCS = hssfworkbook.CreateCellStyle();
            TableHeaderCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.SetFont(Serif8F);

            HSSFCellStyle TableHeaderDecCS = hssfworkbook.CreateCellStyle();
            TableHeaderDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.SetFont(Serif8F);

            HSSFCellStyle TableContentCS = hssfworkbook.CreateCellStyle();
            TableContentCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableContentCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableContentCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableContentCS.RightBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableContentCS.TopBorderColor = HSSFColor.BLACK.index;
            TableContentCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountCS = hssfworkbook.CreateCellStyle();
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountDecCS = hssfworkbook.CreateCellStyle();
            TotamAmountDecCS.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            #endregion

            PR1SimpleDT.Clear();

            PR1VitrinaDT.Clear();

            PR1GridsDT.Clear();

            Marsel1SimpleDT.Clear();
            Marsel5SimpleDT.Clear();
            PortoSimpleDT.Clear();
            MonteSimpleDT.Clear();
            Marsel3SimpleDT.Clear();
            Marsel4SimpleDT.Clear();
            Jersy110SimpleDT.Clear();
            ShervudSimpleDT.Clear();
            Techno1SimpleDT.Clear();
            Techno2SimpleDT.Clear();
            Techno4SimpleDT.Clear();
            pFoxSimpleDT.Clear();
            Techno5SimpleDT.Clear();
            PR3SimpleDT.Clear();
            PRU8SimpleDT.Clear();

            Marsel1VitrinaDT.Clear();
            Marsel5VitrinaDT.Clear();
            PortoVitrinaDT.Clear();
            MonteVitrinaDT.Clear();
            Marsel3VitrinaDT.Clear();
            Marsel4VitrinaDT.Clear();
            Jersy110VitrinaDT.Clear();
            ShervudVitrinaDT.Clear();
            Techno1VitrinaDT.Clear();
            Techno2VitrinaDT.Clear();
            Techno4VitrinaDT.Clear();
            pFoxVitrinaDT.Clear();
            Techno5VitrinaDT.Clear();
            PR3VitrinaDT.Clear();
            PRU8VitrinaDT.Clear();

            Marsel1GridsDT.Clear();
            Marsel5GridsDT.Clear();
            PortoGridsDT.Clear();
            MonteGridsDT.Clear();
            Marsel3GridsDT.Clear();
            Marsel4GridsDT.Clear();
            Jersy110GridsDT.Clear();
            Techno1GridsDT.Clear();
            Techno2GridsDT.Clear();
            Techno4GridsDT.Clear();
            pFoxGridsDT.Clear();
            Techno5GridsDT.Clear();
            PR3GridsDT.Clear();
            PRU8GridsDT.Clear();

            Techno1LuxDT.Clear();
            Techno2LuxDT.Clear();
            Techno4LuxDT.Clear();
            Techno5LuxDT.Clear();
            PR3LuxDT.Clear();

            Techno1MegaDT.Clear();
            Techno2MegaDT.Clear();
            Techno4MegaDT.Clear();

            if (PR1OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(PR1OrdersDT, ref PR1SimpleDT);
                GetVitrinaFronts(PR1OrdersDT, ref PR1VitrinaDT);
                GetGridFronts(PR1OrdersDT, ref PR1GridsDT);
            }

            if (PR1OrdersDT.Rows.Count == 0 )
                return;

            string DispatchDate = string.Empty;
            if (ClientName == "ЗОВ" || ClientName == "Маркетинг + ЗОВ")
            {
                string FrontsFilterString = "(SELECT MainOrderID FROM FrontsOrders WHERE FactoryID=1 AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PR1) +
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PR2) + "))";
                string SelectCommand = @"SELECT DispatchDate, MegaOrderID FROM MegaOrders
                    WHERE MegaOrderID IN (SELECT MegaOrderID FROM MainOrders
                    WHERE MainOrderID IN" + FrontsFilterString + " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")))";
                
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                    ConnectionStrings.ZOVOrdersConnectionString))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0 && DT.Rows[0]["DispatchDate"] != DBNull.Value)
                            DispatchDate = Convert.ToDateTime(DT.Rows[0]["DispatchDate"]).ToString("dd.MM.yyyy");
                    }
                }
            }

            StemasToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, true, false, false);

            RapidToExcel(ref hssfworkbook,
                CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, true, false, false);

            InsetToExcel(ref hssfworkbook,
                CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, true, false, false);

            AssemblyToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, true, false, false);

            OrdersSummaryInfoToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, true, true, false, false);

            GetMainOrdersSummary(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, true, false, false);

            //string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            //string tempFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);


            string FileName = WorkAssignmentID + " " + BatchName + "  ПР-1 и ПР-2";
            //string tempFolder = @"\\192.168.1.6\Public\Профиль\Infinium\Задания\";
            string tempFolder = @"\\192.168.1.6\Public\USERS_2016\_ДЕЙСТВУЮЩИЕ\ПРОИЗВОДСТВО\ПРОФИЛЬ\инфиниум\";
            string CurrentMonthName = DateTime.Now.ToString("MMMM");
            tempFolder = Path.Combine(tempFolder, CurrentMonthName);
            if (!(Directory.Exists(tempFolder)))
            {
                Directory.CreateDirectory(tempFolder);
            }
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            sw.Stop();
            System.Diagnostics.Process.Start(file.FullName);

        }

        public void CreateExcelPR3(int WorkAssignmentID, int FactoryID, string BatchName, string ClientName, ref string sSourceFileName)
        {
            GetCurrentDate();

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont Calibri11F = hssfworkbook.CreateFont();
            Calibri11F.FontHeightInPoints = 11;
            Calibri11F.FontName = "Calibri";

            HSSFFont CalibriBold11F = hssfworkbook.CreateFont();
            CalibriBold11F.FontHeightInPoints = 11;
            CalibriBold11F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold11F.FontName = "Calibri";

            HSSFFont CalibriBold15F = hssfworkbook.CreateFont();
            CalibriBold15F.FontHeightInPoints = 15;
            CalibriBold15F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold15F.FontName = "Calibri";

            HSSFFont Serif8F = hssfworkbook.CreateFont();
            Serif8F.FontHeightInPoints = 8;
            Serif8F.FontName = "MS Sans Serif";

            HSSFFont Serif10F = hssfworkbook.CreateFont();
            Serif10F.FontHeightInPoints = 10;
            Serif10F.FontName = "MS Sans Serif";

            HSSFFont SerifBold10F = hssfworkbook.CreateFont();
            SerifBold10F.FontHeightInPoints = 10;
            SerifBold10F.FontName = "MS Sans Serif";
            SerifBold10F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;

            HSSFCellStyle Calibri11CS = hssfworkbook.CreateCellStyle();
            Calibri11CS.SetFont(Calibri11F);

            HSSFCellStyle CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.SetFont(CalibriBold11F);

            HSSFCellStyle CalibriBold15CS = hssfworkbook.CreateCellStyle();
            CalibriBold15CS.SetFont(CalibriBold15F);

            HSSFCellStyle TableHeaderCS = hssfworkbook.CreateCellStyle();
            TableHeaderCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.SetFont(Serif8F);

            HSSFCellStyle TableHeaderDecCS = hssfworkbook.CreateCellStyle();
            TableHeaderDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.SetFont(Serif8F);

            HSSFCellStyle TableContentCS = hssfworkbook.CreateCellStyle();
            TableContentCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableContentCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableContentCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableContentCS.RightBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableContentCS.TopBorderColor = HSSFColor.BLACK.index;
            TableContentCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountCS = hssfworkbook.CreateCellStyle();
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountDecCS = hssfworkbook.CreateCellStyle();
            TotamAmountDecCS.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            #endregion

            PR1SimpleDT.Clear();

            PR1VitrinaDT.Clear();

            PR1GridsDT.Clear();

            Marsel1SimpleDT.Clear();
            Marsel5SimpleDT.Clear();
            PortoSimpleDT.Clear();
            MonteSimpleDT.Clear();
            Marsel3SimpleDT.Clear();
            Marsel4SimpleDT.Clear();
            Jersy110SimpleDT.Clear();
            ShervudSimpleDT.Clear();
            Techno1SimpleDT.Clear();
            Techno2SimpleDT.Clear();
            Techno4SimpleDT.Clear();
            pFoxSimpleDT.Clear();
            Techno5SimpleDT.Clear();
            PR3SimpleDT.Clear();
            PRU8SimpleDT.Clear();

            Marsel1VitrinaDT.Clear();
            Marsel5VitrinaDT.Clear();
            PortoVitrinaDT.Clear();
            MonteVitrinaDT.Clear();
            Marsel3VitrinaDT.Clear();
            Marsel4VitrinaDT.Clear();
            Jersy110VitrinaDT.Clear();
            ShervudVitrinaDT.Clear();
            Techno1VitrinaDT.Clear();
            Techno2VitrinaDT.Clear();
            Techno4VitrinaDT.Clear();
            pFoxVitrinaDT.Clear();
            Techno5VitrinaDT.Clear();
            PR3VitrinaDT.Clear();
            PRU8VitrinaDT.Clear();

            Marsel1GridsDT.Clear();
            Marsel5GridsDT.Clear();
            PortoGridsDT.Clear();
            MonteGridsDT.Clear();
            Marsel3GridsDT.Clear();
            Marsel4GridsDT.Clear();
            Jersy110GridsDT.Clear();
            Techno1GridsDT.Clear();
            Techno2GridsDT.Clear();
            Techno4GridsDT.Clear();
            pFoxGridsDT.Clear();
            Techno5GridsDT.Clear();
            PR3GridsDT.Clear();
            PRU8GridsDT.Clear();

            Techno1LuxDT.Clear();
            Techno2LuxDT.Clear();
            Techno4LuxDT.Clear();
            Techno5LuxDT.Clear();
            PR3LuxDT.Clear();

            Techno1MegaDT.Clear();
            Techno2MegaDT.Clear();
            Techno4MegaDT.Clear();

            if (PR3OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(PR3OrdersDT, ref PR3SimpleDT);
                GetVitrinaFronts(PR3OrdersDT, ref PR3VitrinaDT);
                GetGridFronts(PR3OrdersDT, ref PR3GridsDT);
                GetLuxFronts(PR3OrdersDT, ref PR3LuxDT);
            }

            if (PR3OrdersDT.Rows.Count == 0)
                return;

            string DispatchDate = string.Empty;
            if (ClientName == "ЗОВ" || ClientName == "Маркетинг + ЗОВ")
            {
                string FrontsFilterString = "(SELECT MainOrderID FROM FrontsOrders WHERE FactoryID=1 AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PR3) + "))";
                string SelectCommand = @"SELECT DispatchDate, MegaOrderID FROM MegaOrders
                    WHERE MegaOrderID IN (SELECT MegaOrderID FROM MainOrders
                    WHERE MainOrderID IN" + FrontsFilterString + " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")))";
                
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                    ConnectionStrings.ZOVOrdersConnectionString))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0 && DT.Rows[0]["DispatchDate"] != DBNull.Value)
                            DispatchDate = Convert.ToDateTime(DT.Rows[0]["DispatchDate"]).ToString("dd.MM.yyyy");
                    }
                }
            }

            StemasToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, true, false);

            RapidToExcel(ref hssfworkbook,
                CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, true, false);

            InsetToExcel(ref hssfworkbook,
                CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, true, false);

            AssemblyToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, true, false);

            OrdersSummaryInfoToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, true, false);

            GetMainOrdersSummary(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, false, true, false);

            //string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");

            //string tempFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);

            string FileName = WorkAssignmentID + " " + BatchName + "  ПР-3";
            //string tempFolder = @"\\192.168.1.6\Public\Профиль\Infinium\Задания\";
            string tempFolder = @"\\192.168.1.6\Public\USERS_2016\_ДЕЙСТВУЮЩИЕ\ПРОИЗВОДСТВО\ПРОФИЛЬ\инфиниум\";
            string CurrentMonthName = DateTime.Now.ToString("MMMM");
            tempFolder = Path.Combine(tempFolder, CurrentMonthName);
            if (!(Directory.Exists(tempFolder)))
            {
                Directory.CreateDirectory(tempFolder);
            }
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            sw.Stop();
            System.Diagnostics.Process.Start(file.FullName);


            //string sSourceFolder = System.Environment.GetEnvironmentVariable("TEMP");
            //string sFolderPath = "Общие файлы/Производство/Задания в работу";
            //string sDestFolder = Configs.DocumentsPath + sFolderPath;
            //sSourceFileName = GetFileName(sDestFolder, BatchName);

            //FileInfo file = new FileInfo(sSourceFolder + @"\" + sSourceFileName);
            //FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            //hssfworkbook.Write(NewFile);
            //NewFile.Close();

        }

        public void CreateExcelPRU8(int WorkAssignmentID, int FactoryID, string BatchName, string ClientName, ref string sSourceFileName)
        {
            GetCurrentDate();

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont Calibri11F = hssfworkbook.CreateFont();
            Calibri11F.FontHeightInPoints = 11;
            Calibri11F.FontName = "Calibri";

            HSSFFont CalibriBold11F = hssfworkbook.CreateFont();
            CalibriBold11F.FontHeightInPoints = 11;
            CalibriBold11F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold11F.FontName = "Calibri";

            HSSFFont CalibriBold15F = hssfworkbook.CreateFont();
            CalibriBold15F.FontHeightInPoints = 15;
            CalibriBold15F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold15F.FontName = "Calibri";

            HSSFFont Serif8F = hssfworkbook.CreateFont();
            Serif8F.FontHeightInPoints = 8;
            Serif8F.FontName = "MS Sans Serif";

            HSSFFont Serif10F = hssfworkbook.CreateFont();
            Serif10F.FontHeightInPoints = 10;
            Serif10F.FontName = "MS Sans Serif";

            HSSFFont SerifBold10F = hssfworkbook.CreateFont();
            SerifBold10F.FontHeightInPoints = 10;
            SerifBold10F.FontName = "MS Sans Serif";
            SerifBold10F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;

            HSSFCellStyle Calibri11CS = hssfworkbook.CreateCellStyle();
            Calibri11CS.SetFont(Calibri11F);

            HSSFCellStyle CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.SetFont(CalibriBold11F);

            HSSFCellStyle CalibriBold15CS = hssfworkbook.CreateCellStyle();
            CalibriBold15CS.SetFont(CalibriBold15F);

            HSSFCellStyle TableHeaderCS = hssfworkbook.CreateCellStyle();
            TableHeaderCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.SetFont(Serif8F);

            HSSFCellStyle TableHeaderDecCS = hssfworkbook.CreateCellStyle();
            TableHeaderDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.SetFont(Serif8F);

            HSSFCellStyle TableContentCS = hssfworkbook.CreateCellStyle();
            TableContentCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableContentCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableContentCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableContentCS.RightBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableContentCS.TopBorderColor = HSSFColor.BLACK.index;
            TableContentCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountCS = hssfworkbook.CreateCellStyle();
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountDecCS = hssfworkbook.CreateCellStyle();
            TotamAmountDecCS.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            #endregion

            PR1SimpleDT.Clear();

            PR1VitrinaDT.Clear();

            PR1GridsDT.Clear();

            Marsel1SimpleDT.Clear();
            Marsel5SimpleDT.Clear();
            PortoSimpleDT.Clear();
            MonteSimpleDT.Clear();
            Marsel3SimpleDT.Clear();
            Marsel4SimpleDT.Clear();
            Jersy110SimpleDT.Clear();
            ShervudSimpleDT.Clear();
            Techno1SimpleDT.Clear();
            Techno2SimpleDT.Clear();
            Techno4SimpleDT.Clear();
            pFoxSimpleDT.Clear();
            Techno5SimpleDT.Clear();
            PR3SimpleDT.Clear();
            PRU8SimpleDT.Clear();

            Marsel1VitrinaDT.Clear();
            Marsel5VitrinaDT.Clear();
            PortoVitrinaDT.Clear();
            MonteVitrinaDT.Clear();
            Marsel3VitrinaDT.Clear();
            Marsel4VitrinaDT.Clear();
            Jersy110VitrinaDT.Clear();
            ShervudVitrinaDT.Clear();
            Techno1VitrinaDT.Clear();
            Techno2VitrinaDT.Clear();
            Techno4VitrinaDT.Clear();
            pFoxVitrinaDT.Clear();
            Techno5VitrinaDT.Clear();
            PR3VitrinaDT.Clear();
            PRU8VitrinaDT.Clear();

            Marsel1GridsDT.Clear();
            Marsel5GridsDT.Clear();
            PortoGridsDT.Clear();
            MonteGridsDT.Clear();
            Marsel3GridsDT.Clear();
            Marsel4GridsDT.Clear();
            Jersy110GridsDT.Clear();
            Techno1GridsDT.Clear();
            Techno2GridsDT.Clear();
            Techno4GridsDT.Clear();
            pFoxGridsDT.Clear();
            Techno5GridsDT.Clear();
            PR3GridsDT.Clear();
            PRU8GridsDT.Clear();

            Techno1LuxDT.Clear();
            Techno2LuxDT.Clear();
            Techno4LuxDT.Clear();
            Techno5LuxDT.Clear();
            PR3LuxDT.Clear();

            Techno1MegaDT.Clear();
            Techno2MegaDT.Clear();
            Techno4MegaDT.Clear();

            if (PRU8OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(PRU8OrdersDT, ref PRU8SimpleDT);
                GetVitrinaFronts(PRU8OrdersDT, ref PRU8VitrinaDT);
                GetGridFronts(PRU8OrdersDT, ref PRU8GridsDT);
            }

            if (PRU8OrdersDT.Rows.Count == 0)
                return;

            string DispatchDate = string.Empty;
            if (ClientName == "ЗОВ" || ClientName == "Маркетинг + ЗОВ")
            {
                string FrontsFilterString = "(SELECT MainOrderID FROM FrontsOrders WHERE FactoryID=1 AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.PRU8) + "))";
                string SelectCommand = @"SELECT DispatchDate, MegaOrderID FROM MegaOrders
                    WHERE MegaOrderID IN (SELECT MegaOrderID FROM MainOrders
                    WHERE MainOrderID IN" + FrontsFilterString + " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")))";

                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                    ConnectionStrings.ZOVOrdersConnectionString))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0 && DT.Rows[0]["DispatchDate"] != DBNull.Value)
                            DispatchDate = Convert.ToDateTime(DT.Rows[0]["DispatchDate"]).ToString("dd.MM.yyyy");
                    }
                }
            }

            StemasToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, true);

            RapidToExcel(ref hssfworkbook,
                CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, true);

            InsetToExcel(ref hssfworkbook,
                CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, true);

            AssemblyToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, true);

            OrdersSummaryInfoToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, false, true);

            GetMainOrdersSummary(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, false, false, true);

            //string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");

            //string tempFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);

            string FileName = WorkAssignmentID + " " + BatchName + "  ПРУ-8";
            //string tempFolder = @"\\192.168.1.6\Public\Профиль\Infinium\Задания\";
            string tempFolder = @"\\192.168.1.6\Public\USERS_2016\_ДЕЙСТВУЮЩИЕ\ПРОИЗВОДСТВО\ПРОФИЛЬ\инфиниум\";
            string CurrentMonthName = DateTime.Now.ToString("MMMM");
            tempFolder = Path.Combine(tempFolder, CurrentMonthName);if (!(Directory.Exists(tempFolder)))
            {
                Directory.CreateDirectory(tempFolder);
            }
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            sw.Stop();
            System.Diagnostics.Process.Start(file.FullName);
        }

        private string GetFileName(string sDestFolder, string ExcelName)
        {
            string sExtension = ".xls";
            string sFileName = ExcelName;

            int j = 1;
            while (FM.FileExist(sDestFolder + "/" + sFileName + sExtension, Configs.FTPType))
            {
                sFileName = ExcelName + "(" + j++ + ")";
            }
            sFileName = sFileName + sExtension;
            return sFileName;
        }

        public void GetMainOrdersSummary(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            int MainOrderID = 0;
            int OrderNumber = 0;
            string ClientName = string.Empty;
            string DispatchDate = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;
            string SelectCommand = string.Empty;
            DataTable DistClientNamesDT = new DataTable();
            DataTable DistMainOrdersDT = new DataTable();
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.ClientID, MegaOrders.OrderNumber, MainOrders.MainOrderID, MainOrders.Notes AS MNotes,
                FrontsOrders.* FROM FrontsOrders 
                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
                INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID
                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" + string.Join(",", FrontsID.OfType<int>().ToArray()) + @")  AND (FrontConfigID IN (SELECT FrontConfigID FROM infiniu2_catalog.dbo.FrontsConfig AS F INNER JOIN
                         infiniu2_catalog.dbo.TechStore AS T ON F.TechnoProfileID = T.TechStoreID AND((F.TechnoProfileID <> -1 AND SUBSTRING(T.TechStoreName, 1, 2) <> 'ПН' AND SUBSTRING(T.TechStoreName, 1, 1) <> 'Г'))) OR FrontsOrders.TechnoProfileID = -1)";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            if (DT.Rows.Count > 0)
            {
                DataTable TempFrontsOrdersDT = DT.Clone();
                using (DataView DV = new DataView(DT))
                {
                    DV.Sort = "ClientName";
                    DistClientNamesDT = DV.ToTable(true, new string[] { "ClientName", "ClientID" });
                }

                for (int i = 0; i < DistClientNamesDT.Rows.Count; i++)
                {
                    ClientName = DistClientNamesDT.Rows[i]["ClientName"].ToString();

                    int RowIndex = 0;
                    HSSFSheet sheet1 = hssfworkbook.CreateSheet(ClientName.Replace("/", "-"));
                    sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                    sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                    sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                    sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                    sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                    sheet1.SetColumnWidth(0, 25 * 256);
                    sheet1.SetColumnWidth(1, 11 * 256);
                    sheet1.SetColumnWidth(2, 25 * 256);
                    sheet1.SetColumnWidth(3, 15 * 256);
                    sheet1.SetColumnWidth(4, 6 * 256);
                    sheet1.SetColumnWidth(5, 6 * 256);
                    sheet1.SetColumnWidth(6, 6 * 256);

                    using (DataView DV = new DataView(DT, "ClientID=" + DistClientNamesDT.Rows[i]["ClientID"], "MainOrderID", DataViewRowState.CurrentRows))
                    {
                        DistMainOrdersDT = DV.ToTable(true, new string[] { "MainOrderID" });
                    }

                    for (int j = 0; j < DistMainOrdersDT.Rows.Count; j++)
                    {
                        MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[j]["MainOrderID"]);
                        DataRow[] Frows = DT.Select("MainOrderID=" + MainOrderID);
                        if (Frows.Count() == 0)
                            continue;
                        OrderNumber = Convert.ToInt32(Frows[0]["OrderNumber"]);
                        Notes = Frows[0]["MNotes"].ToString();
                        OrderName = "№" + OrderNumber.ToString() + "-" + MainOrderID;

                        TempFrontsOrdersDT.Clear();
                        FrontsOrdersDT.Clear();
                        foreach (DataRow row in Frows)
                            TempFrontsOrdersDT.Rows.Add(row.ItemArray);
                        CollectMainOrders(TempFrontsOrdersDT, ref FrontsOrdersDT);

                        MainOrdersSummaryInfoToExcel(ref hssfworkbook, ref sheet1,
                               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, FrontsOrdersDT,
                               WorkAssignmentID, DispatchDate, BatchName, ClientName, OrderName, Notes, ref RowIndex, IsPR1, IsPR3, IsPRU8);
                        RowIndex++;
                    }

                }
            }

            DistMainOrdersDT.Clear();
            DistClientNamesDT.Clear();
            DT.Clear();

            SelectCommand = @"SELECT infiniu2_zovreference.dbo.Clients.ClientName, MainOrders.ClientID, MainOrders.DocNumber, MegaOrders.DispatchDate, MainOrders.Notes AS MNotes,
                FrontsOrdersID, FrontsOrders.MainOrderID, FrontID, TechnoColorID, InsetTypeID,
                ColorID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, FrontsOrders.Notes FROM FrontsOrders
                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
                INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID
                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" + string.Join(",", FrontsID.OfType<int>().ToArray()) + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            if (DT.Rows.Count > 0)
            {
                DataTable TempFrontsOrdersDT = DT.Clone();
                using (DataView DV = new DataView(DT))
                {
                    DV.Sort = "ClientName";
                    DistClientNamesDT = DV.ToTable(true, new string[] { "ClientName", "ClientID" });
                }

                for (int i = 0; i < DistClientNamesDT.Rows.Count; i++)
                {
                    ClientName = DistClientNamesDT.Rows[i]["ClientName"].ToString();

                    int RowIndex = 0;
                    HSSFSheet sheet1 = hssfworkbook.CreateSheet(ClientName.Replace("/", "-"));
                    sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;
                    sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                    sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                    sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                    sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                    sheet1.SetColumnWidth(0, 25 * 256);
                    sheet1.SetColumnWidth(1, 11 * 256);
                    sheet1.SetColumnWidth(2, 25 * 256);
                    sheet1.SetColumnWidth(3, 15 * 256);
                    sheet1.SetColumnWidth(4, 6 * 256);
                    sheet1.SetColumnWidth(5, 6 * 256);
                    sheet1.SetColumnWidth(6, 6 * 256);

                    using (DataView DV = new DataView(DT, "ClientID=" + DistClientNamesDT.Rows[i]["ClientID"], "MainOrderID", DataViewRowState.CurrentRows))
                    {
                        DistMainOrdersDT = DV.ToTable(true, new string[] { "MainOrderID" });
                    }

                    for (int j = 0; j < DistMainOrdersDT.Rows.Count; j++)
                    {
                        MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[j]["MainOrderID"]);
                        DataRow[] Frows = DT.Select("MainOrderID=" + MainOrderID);
                        if (Frows.Count() == 0)
                            continue;
                        if (Frows[0]["DispatchDate"] != DBNull.Value)
                            DispatchDate = Convert.ToDateTime(Frows[0]["DispatchDate"]).ToString("dd.MM.yyyy");
                        Notes = Frows[0]["MNotes"].ToString();
                        OrderName = Frows[0]["DocNumber"].ToString();

                        TempFrontsOrdersDT.Clear();
                        FrontsOrdersDT.Clear();
                        foreach (DataRow row in Frows)
                            TempFrontsOrdersDT.Rows.Add(row.ItemArray);
                        CollectMainOrders(TempFrontsOrdersDT, ref FrontsOrdersDT);

                        MainOrdersSummaryInfoToExcel(ref hssfworkbook, ref sheet1,
                           CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, FrontsOrdersDT,
                            WorkAssignmentID, DispatchDate, BatchName, ClientName, OrderName, Notes, ref RowIndex, IsPR1, IsPR3, IsPRU8);
                        RowIndex++;
                    }

                }
            }
        }

        public void OrdersSummaryInfoToExcel(ref HSSFWorkbook hssfworkbook,
           HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, bool IsPR1, bool IsPR2, bool IsPR3, bool IsPRU8)
        {
            int RowIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Заказы");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            decimal AllSquare = 0;
            string FrontName = string.Empty;
            if (Marsel1OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(Marsel1OrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryMarsel1Orders(Marsel1OrdersDT, Marsel1SimpleDT, Marsel1VitrinaDT, Marsel1GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                     CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (Marsel5OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(Marsel5OrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryMarsel1Orders(Marsel5OrdersDT, Marsel5SimpleDT, Marsel5VitrinaDT, Marsel5GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                     CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (PortoOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(PortoOrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryMarsel1Orders(PortoOrdersDT, PortoSimpleDT, PortoVitrinaDT, PortoGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                     CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (MonteOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(MonteOrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryMarsel1Orders(MonteOrdersDT, MonteSimpleDT, MonteVitrinaDT, MonteGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                     CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (Marsel3OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(Marsel3OrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryMarsel3Orders(Marsel3OrdersDT, Marsel3SimpleDT, Marsel3VitrinaDT, Marsel3GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                       CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (Marsel4OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(Marsel4OrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryMarsel3Orders(Marsel4OrdersDT, Marsel4SimpleDT, Marsel4VitrinaDT, Marsel4GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                       CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (Jersy110OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(Jersy110OrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryMarsel3Orders(Jersy110OrdersDT, Jersy110SimpleDT, Jersy110VitrinaDT, Jersy110GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                       CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (ShervudOrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(ShervudOrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryShervudOrders(ShervudOrdersDT, ShervudSimpleDT, ShervudVitrinaDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                   CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (Techno1OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(Techno1OrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryTechno1Orders(Techno1OrdersDT, Techno1SimpleDT, Techno1VitrinaDT, Techno1GridsDT, Techno1LuxDT, Techno1MegaDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                   CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (Techno2OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(Techno2OrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryTechno2Orders(Techno2OrdersDT, Techno2SimpleDT, Techno2VitrinaDT, Techno2GridsDT, Techno2LuxDT, Techno2MegaDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                   CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (Techno4OrdersDT.Rows.Count > 0)
            {
                if (Techno4OrdersDT.Rows.Count > 0)
                    FrontName = ProfileName(Convert.ToInt32(Techno4OrdersDT.Rows[0]["FrontConfigID"]), 1);
                //if (Techno4MegaOrdersDT.Rows.Count > 0)
                //    FrontName = ProfileName(Convert.ToInt32(Techno4MegaOrdersDT.Rows[0]["FrontConfigID"]));

                DataTable DT = Techno4OrdersDT.Copy();
                //foreach (DataRow item in Techno4MegaOrdersDT.Rows)
                //    DT.Rows.Add(item.ItemArray);
                SummaryTechno4Orders(DT, Techno4SimpleDT, Techno4VitrinaDT, Techno4GridsDT, Techno4LuxDT, Techno4MegaDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                   CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (pFoxOrdersDT.Rows.Count > 0)
            {
                if (pFoxOrdersDT.Rows.Count > 0)
                    FrontName = ProfileName(Convert.ToInt32(pFoxOrdersDT.Rows[0]["FrontConfigID"]), 1);
                
                SummarypFoxOrders(pFoxOrdersDT, pFoxSimpleDT, pFoxVitrinaDT, pFoxGridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                   CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            //if (Techno4MegaOrdersDT.Rows.Count > 0)
            //{
            //    FrontName = ProfileName(Convert.ToInt32(Techno4MegaOrdersDT.Rows[0]["FrontConfigID"]));
            //    SummaryTechno4MegaOrders(Techno4MegaOrdersDT, Techno4MegaDT, FrontName);
            //    OrdersToExcelSingly(ref hssfworkbook,
            //       CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR3);
            //    RowIndex++;
            //    RowIndex++;
            //}
            if (Techno5OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(Techno5OrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryTechno5Orders(Techno5OrdersDT, Techno5SimpleDT, Techno5VitrinaDT, Techno5GridsDT, Techno5LuxDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                      CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            if (PR1OrdersDT.Rows.Count > 0)
            {
                DataTable DT = PR1OrdersDT.Clone();
                DataTable DT1 = PR1SimpleDT.Clone();
                DataTable DT2 = PR1VitrinaDT.Clone();
                DataTable DT3 = PR1GridsDT.Clone();
                DataRow[] rows = PR1OrdersDT.Select("FrontID=3631");
                foreach (DataRow item in rows)
                    DT.Rows.Add(item.ItemArray);
                rows = PR1SimpleDT.Select("FrontID=3631");
                foreach (DataRow item in rows)
                    DT1.Rows.Add(item.ItemArray);
                rows = PR1VitrinaDT.Select("FrontID=3631");
                foreach (DataRow item in rows)
                    DT2.Rows.Add(item.ItemArray);
                rows = PR1GridsDT.Select("FrontID=3631");
                foreach (DataRow item in rows)
                    DT3.Rows.Add(item.ItemArray);
                if (DT.Rows.Count > 0)
                {
                    FrontName = ProfileName(Convert.ToInt32(DT.Rows[0]["FrontConfigID"]), 1);
                    SummaryPR1Orders(DT, DT1, DT2, DT3, FrontName, ref AllSquare);
                    OrdersToExcelSingly(ref hssfworkbook,
                         CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, true, false, IsPR3, IsPRU8);
                    RowIndex++;
                    RowIndex++;
                }
                DT.Clear();
                DT1.Clear();
                DT2.Clear();
                DT3.Clear();
                rows = PR1OrdersDT.Select("FrontID=3632");
                foreach (DataRow item in rows)
                    DT.Rows.Add(item.ItemArray);
                rows = PR1SimpleDT.Select("FrontID=3632");
                foreach (DataRow item in rows)
                    DT1.Rows.Add(item.ItemArray);
                rows = PR1VitrinaDT.Select("FrontID=3632");
                foreach (DataRow item in rows)
                    DT2.Rows.Add(item.ItemArray);
                rows = PR1GridsDT.Select("FrontID=3632");
                foreach (DataRow item in rows)
                    DT3.Rows.Add(item.ItemArray);
                if (DT.Rows.Count > 0)
                {
                    FrontName = ProfileName(Convert.ToInt32(DT.Rows[0]["FrontConfigID"]), 1);
                    SummaryPR1Orders(DT, DT1, DT2, DT3, FrontName, ref AllSquare);
                    OrdersToExcelSingly(ref hssfworkbook,
                         CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, false, true, IsPR3, IsPRU8);
                    RowIndex++;
                    RowIndex++;
                }
            }
            if (PR3OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(PR3OrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryTechno5Orders(PR3OrdersDT, PR3SimpleDT, PR3VitrinaDT, PR3GridsDT, PR3LuxDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                      CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, false, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (PRU8OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(PRU8OrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryMarsel1Orders(PRU8OrdersDT, PRU8SimpleDT, PRU8VitrinaDT, PRU8GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                     CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, false, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            AllSquare = Decimal.Round(AllSquare, 3, MidpointRounding.AwayFromZero);
            OrdersToExcelSingly(ref hssfworkbook, CalibriBold11CS, CalibriBold11CS, ref sheet1, AllSquare, ref RowIndex);
        }

        public void StemasToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            StemasDT.Clear();
            StemasFrontsByHeight(ref StemasDT);
            if (StemasDT.Rows.Count == 0)
                return;

            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Stemas");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 6 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 11 * 256);
            sheet1.SetColumnWidth(5, 11 * 256);
            sheet1.SetColumnWidth(6, 11 * 256);
            sheet1.SetColumnWidth(7, 11 * 256);

            DataTable DT = StemasDT.Copy();
            DataColumn Col1 = new DataColumn();
            DataColumn Col2 = new DataColumn();
            DataColumn Col3 = new DataColumn();
            DataColumn Col4 = new DataColumn();

            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
            Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
            Col4 = DT.Columns.Add("Col4", System.Type.GetType("System.String"));

            if (bImpostMargin)
            {
                Col1.SetOrdinal(5);
                Col2.SetOrdinal(6);
                Col3.SetOrdinal(7);
                Col4.SetOrdinal(8);
            }
            else
            {
                Col1.SetOrdinal(4);
                Col2.SetOrdinal(5);
                Col3.SetOrdinal(6);
                Col4.SetOrdinal(7);
            }
            //DT.Columns["IsBox"].SetOrdinal(8);

            if (DT.Rows.Count > 0)
            {
                Stemas1ToExcelSingly(ref hssfworkbook,
                       CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            StemasDT.Clear();
            StemasFrontsByWidth(ref StemasDT);

            DT.Dispose();
            Col1.Dispose();
            Col2.Dispose();
            Col3.Dispose();
            DT = StemasDT.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
            Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);
            Col2.SetOrdinal(5);
            Col3.SetOrdinal(6);
            DT.Columns["IsBox"].SetOrdinal(7);

            if (DT.Rows.Count > 0)
            {
                Stemas2ToExcelSingly(ref hssfworkbook,
                      CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, false, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
        }

        public void RapidToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("MARTIN");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 6 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 16 * 256);
            sheet1.SetColumnWidth(6, 9 * 256);

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            RapidDT.Clear();
            Martin1Fronts(ref RapidDT);

            if (RapidDT.Rows.Count > 0)
            {
                MartinToExcel1(ref hssfworkbook, ref sheet1, ref RowIndex,
                    CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, RapidDT, WorkAssignmentID, DispatchDate, BatchName, ClientName);
            }

            //RapidDT.Clear();
            //Martin2Fronts(ref RapidDT);

            //if (RapidDT.Rows.Count > 0)
            //{
            //    RowIndex++;
            //    RowIndex++;
            //    MartinToExcel2(ref hssfworkbook, ref sheet1, ref RowIndex,
            //        CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, RapidDT, WorkAssignmentID, DispatchDate, BatchName, ClientName);
            //}

            if (PR3OrdersDT.Rows.Count > 0)
            {
                RapidDT.Clear();
                CollectPR3Hands(PR3OrdersDT, ref RapidDT,
                    Convert.ToInt32(FrontMargins.Techno2Width), Convert.ToInt32(FrontMinSizes.PR3MinWidth), Convert.ToInt32(FrontMargins.Techno2Height), false);

                for (int i = 0; i < RapidDT.Rows.Count; i++)
                {
                    if (i == 0)
                        continue;
                    if (RapidDT.Rows[i]["Color"].ToString() == RapidDT.Rows[i - 1]["Color"].ToString())
                    {
                        RapidDT.Rows[i]["Color"] = string.Empty;
                    }
                }

                PR3HandsToExcel(ref hssfworkbook, ref sheet1, ref RowIndex,
                    CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, RapidDT, WorkAssignmentID, DispatchDate, BatchName, ClientName);
            }

            RowIndex++;
            if (PRU8OrdersDT.Rows.Count > 0)
            {
                RapidDT.Clear();
                CollectPRU8Hands(PRU8OrdersDT, ref RapidDT,
                    Convert.ToInt32(FrontMargins.Techno1Width), Convert.ToInt32(FrontMinSizes.Techno1MinWidth), Convert.ToInt32(FrontMargins.Techno1Height), false);
                PRU8HandsToExcel(ref hssfworkbook, ref sheet1, ref RowIndex,
                   CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, RapidDT, WorkAssignmentID, DispatchDate, BatchName, ClientName);
            }
        }

        public void TotalInfoToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            TotalInfoDT.Clear();
            U(ref TotalInfoDT);

            if (TotalInfoDT.Rows.Count == 0)
                return;

            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Общая информация");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 6 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 16 * 256);

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "Сводка по заданию");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            for (int x = 0; x < TotalInfoDT.Rows.Count; x++)
            {
                for (int y = 0; y < TotalInfoDT.Columns.Count; y++)
                {
                    Type t = TotalInfoDT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(TotalInfoDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(TotalInfoDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(TotalInfoDT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                RowIndex++;
            }
        }

        public void MartinToExcel1(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1, ref int RowIndex,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            if (DT.Rows.Count == 0)
                return;

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "MARTIN");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal SticksCount = 0;
            int CType = 0;
            int PType = 0;
            int TotalAmount = 0;
            int AllTotalAmount = 0;
            int Count = 0;
            int Height = 0;

            if (RapidDT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(RapidDT.Rows[0]["ColorType"]);
                PType = Convert.ToInt32(RapidDT.Rows[0]["ProfileType"]);
            }

            for (int x = 0; x < RapidDT.Rows.Count; x++)
            {
                if (RapidDT.Rows[x]["Count"] != DBNull.Value && RapidDT.Rows[x]["Height"] != DBNull.Value)
                {
                    Count = Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                    Height = Convert.ToInt32(RapidDT.Rows[x]["Height"]);
                    SticksCount += (Height + 4) * Count;
                    TotalAmount += Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                    AllTotalAmount += Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                    Count = Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                }

                for (int y = 0; y < RapidDT.Columns.Count; y++)
                {
                    if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                        || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                        continue;
                    Type t = RapidDT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(RapidDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(RapidDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(RapidDT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= RapidDT.Rows.Count - 1 && (PType != Convert.ToInt32(RapidDT.Rows[x + 1]["ProfileType"]) || CType != Convert.ToInt32(RapidDT.Rows[x + 1]["ColorType"])))
                {
                    RowIndex++;
                    for (int y = 0; y < RapidDT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    CType = Convert.ToInt32(RapidDT.Rows[x + 1]["ColorType"]);
                    PType = Convert.ToInt32(RapidDT.Rows[x + 1]["ProfileType"]);
                    Count = 0;
                    Height = 0;
                    SticksCount = 0;
                    TotalAmount = 0;
                }

                if (x == RapidDT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < RapidDT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;
                    for (int y = 0; y < RapidDT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

        }

        public void MartinToExcel2(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1, ref int RowIndex,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "француз<100");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal SticksCount = 0;
            int CType = 0;
            int PType = 0;
            int TotalAmount = 0;
            int AllTotalAmount = 0;
            int Count = 0;
            int Height = 0;

            if (RapidDT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(RapidDT.Rows[0]["ColorType"]);
                PType = Convert.ToInt32(RapidDT.Rows[0]["ProfileType"]);
            }

            for (int x = 0; x < RapidDT.Rows.Count; x++)
            {
                if (RapidDT.Rows[x]["Count"] != DBNull.Value && RapidDT.Rows[x]["Height"] != DBNull.Value)
                {
                    Count = Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                    Height = Convert.ToInt32(RapidDT.Rows[x]["Height"]);
                    SticksCount += (Height + 4) * Count;
                    TotalAmount += Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                    AllTotalAmount += Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                    Count = Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                }

                for (int y = 0; y < RapidDT.Columns.Count; y++)
                {
                    if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                        || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                        continue;
                    Type t = RapidDT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(RapidDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(RapidDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(RapidDT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= RapidDT.Rows.Count - 1 && (PType != Convert.ToInt32(RapidDT.Rows[x + 1]["ProfileType"]) || CType != Convert.ToInt32(RapidDT.Rows[x + 1]["ColorType"])))
                {
                    RowIndex++;
                    for (int y = 0; y < RapidDT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    CType = Convert.ToInt32(RapidDT.Rows[x + 1]["ColorType"]);
                    PType = Convert.ToInt32(RapidDT.Rows[x + 1]["ProfileType"]);
                    Count = 0;
                    Height = 0;
                    SticksCount = 0;
                    TotalAmount = 0;
                }

                if (x == RapidDT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < RapidDT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;
                    for (int y = 0; y < RapidDT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

        }

        public void PR3HandsToExcel(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1, ref int RowIndex,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            if (DT.Rows.Count == 0)
                return;

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
            cell.CellStyle = CalibriBold15CS;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "MARTIN");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "терм");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "vitap");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "шкантование");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int AllTotalAmount = 0;
            int Height = 0;

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value && DT.Rows[x]["Height"] != DBNull.Value)
                {
                    Height = Convert.ToInt32(DT.Rows[x]["Height"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType"
                        || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType"
                            || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

        }

        public void PRU8HandsToExcel(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1, ref int RowIndex,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            if (DT.Rows.Count == 0)
                return;

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
            cell.CellStyle = CalibriBold15CS;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "MARTIN");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int AllTotalAmount = 0;
            int Height = 0;

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value && DT.Rows[x]["Height"] != DBNull.Value)
                {
                    Height = Convert.ToInt32(DT.Rows[x]["Height"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                        || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount" || RapidDT.Columns[y].ColumnName == "Notes")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount" || RapidDT.Columns[y].ColumnName == "Notes")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

        }

        public void InsetToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Вставка");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 11 * 256);
            sheet1.SetColumnWidth(3, 7 * 256);
            sheet1.SetColumnWidth(4, 12 * 256);

            InsetDT.Clear();
            CollectAllInsets(ref InsetDT);

            DataTable DT = InsetDT.Copy();
            DataColumn Col1 = new DataColumn();
            DataColumn Col2 = new DataColumn();

            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            if (InsetDT.Rows.Count > 0)
            {
                AllInsetsToExcelSingly(ref hssfworkbook,
                     CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            InsetDT.Clear();
            CollectInsetsLuxOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();

            if (DT.Rows.Count > 0)
            {
                LuxToExcelSingly(ref hssfworkbook,
                  CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            InsetDT.Clear();
            CollectInsetsMegaOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();

            if (DT.Rows.Count > 0)
            {
                MegaToExcelSingly(ref hssfworkbook,
                      CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            //InsetDT.Clear();
            //CollectInsetsVitrinaOnly(ref InsetDT);

            //DT.Dispose();
            //Col1.Dispose();
            //DT = InsetDT.Copy();

            //if (DT.Rows.Count > 0)
            //{
            //    Lacomat1ToExcelSingly(ref hssfworkbook,
            //          CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3);
            //    RowIndex++;
            //    RowIndex++;
            //}

            InsetDT.Clear();
            CollectInsetsGridsOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            if (InsetDT.Rows.Count > 0)
            {
                GridsToExcelSingly(ref hssfworkbook,
                       CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            InsetDT.Clear();
            CollectInsetsGlassOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();

            if (DT.Rows.Count > 0)
            {
                Lacomat2ToExcelSingly(ref hssfworkbook,
                      CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            InsetDT.Clear();
            CollectInsetsFilenkaOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            if (DT.Rows.Count > 0)
            {
                FilenkaToExcelSingly(ref hssfworkbook,
                        CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            InsetDT.Clear();
            CollectInsetsPressOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            if (DT.Rows.Count > 0)
            {
                PressToExcelSingly(ref hssfworkbook,
                  CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            RowIndex++;
        }

        public void AssemblyToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            DataTable DistFrameColorsDT = DistFrameColorsTable(Marsel1OrdersDT, true);
            DataTable DT1 = AssemblyDT.Clone();
            DataTable DT2 = AssemblyDT.Clone();
            AssemblyDT.Clear();
            FrontType = 0;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel1SimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel1VitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel1GridsDT, ref DT1, FrontType, ColorType, false);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Marsel5OrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel5SimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel5VitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel5GridsDT, ref DT1, FrontType, ColorType, false);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(PortoOrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PortoSimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PortoVitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PortoGridsDT, ref DT1, FrontType, ColorType, false);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(MonteOrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), MonteSimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), MonteVitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), MonteGridsDT, ref DT1, FrontType, ColorType, false);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Marsel3OrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel3SimpleDT, ref DT1, FrontType, ColorType, true);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel3VitrinaDT, ref DT2, FrontType, ColorType, true);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel3GridsDT, ref DT1, FrontType, ColorType, true);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Techno1OrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno1SimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno1VitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno1GridsDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyLux(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno1LuxDT, ref DT1, FrontType, ColorType);
                CollectAssemblyMega(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno1MegaDT, ref DT1, FrontType, ColorType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Techno2OrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno2SimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno2VitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno2GridsDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyLux(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno2LuxDT, ref DT1, FrontType, ColorType);
                CollectAssemblyMega(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno2MegaDT, ref DT1, FrontType, ColorType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Techno4OrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno4SimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno4VitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno4GridsDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyLux(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno4LuxDT, ref DT1, FrontType, ColorType);
                CollectAssemblyMega(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno4MegaDT, ref DT1, FrontType, ColorType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(pFoxOrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), pFoxSimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), pFoxVitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), pFoxGridsDT, ref DT1, FrontType, ColorType, false);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Techno5OrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno5SimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno5VitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno5GridsDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyLux(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Techno5LuxDT, ref DT1, FrontType, ColorType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(PR1OrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PR1SimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PR1VitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PR1GridsDT, ref DT1, FrontType, ColorType, false);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(PR3OrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PR3SimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PR3VitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PR3GridsDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyLux(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PR3LuxDT, ref DT1, FrontType, ColorType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(PRU8OrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PRU8SimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PRU8VitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PRU8GridsDT, ref DT1, FrontType, ColorType, false);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Marsel4OrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel4SimpleDT, ref DT1, FrontType, ColorType, true);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel4VitrinaDT, ref DT2, FrontType, ColorType, true);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel4GridsDT, ref DT1, FrontType, ColorType, true);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Jersy110OrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Jersy110SimpleDT, ref DT1, FrontType, ColorType, true);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Jersy110VitrinaDT, ref DT2, FrontType, ColorType, true);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Jersy110GridsDT, ref DT1, FrontType, ColorType, true);
            }

            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(ShervudOrdersDT, true);
            FrontType++;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ShervudSimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ShervudVitrinaDT, ref DT2, FrontType, ColorType, false);
            }
            int RowIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Зачистка");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 22 * 256);
            sheet1.SetColumnWidth(3, 9 * 256);
            sheet1.SetColumnWidth(4, 6 * 256);
            sheet1.SetColumnWidth(5, 6 * 256);
            sheet1.SetColumnWidth(6, 6 * 256);
            sheet1.SetColumnWidth(7, 13 * 256);
            sheet1.SetColumnWidth(8, 13 * 256);
            sheet1.SetColumnWidth(9, 13 * 256);

            DataTable DT = DT1.Copy();
            DataColumn Col1 = new DataColumn();
            DataColumn Col2 = new DataColumn();
            DataColumn Col3 = new DataColumn();

            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
            Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
            Col1.SetOrdinal(7);
            Col2.SetOrdinal(8);
            Col3.SetOrdinal(9);

            if (DT.Rows.Count > 0)
            {
                Assembly1ToExcelSingly(ref hssfworkbook, ref sheet1,
                   CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Зачистка", ref RowIndex, true, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            DT.Dispose();
            Col1.Dispose();
            Col2.Dispose();
            Col3.Dispose();
            DT = DT2.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
            Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
            Col1.SetOrdinal(7);
            Col2.SetOrdinal(8);
            Col3.SetOrdinal(9);

            if (DT.Rows.Count > 0)
            {
                Assembly1ToExcelSingly(ref hssfworkbook, ref sheet1,
                    CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Зачистка", ref RowIndex, false, IsPR1, IsPR3, IsPRU8);
            }

            RowIndex = 0;
            HSSFSheet sheet2 = hssfworkbook.CreateSheet("Сборка");
            sheet2.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet2.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet2.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet2.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet2.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet2.SetColumnWidth(0, 20 * 256);
            sheet2.SetColumnWidth(1, 11 * 256);
            sheet2.SetColumnWidth(2, 22 * 256);
            sheet2.SetColumnWidth(3, 9 * 256);
            sheet2.SetColumnWidth(4, 6 * 256);
            sheet2.SetColumnWidth(5, 6 * 256);
            sheet2.SetColumnWidth(6, 6 * 256);
            sheet2.SetColumnWidth(7, 13 * 256);
            sheet2.SetColumnWidth(8, 13 * 256);

            DT.Dispose();
            Col1.Dispose();
            DT = DT1.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(7);

            if (DT.Rows.Count > 0)
            {
                Assembly2ToExcelSingly(ref hssfworkbook, ref sheet2,
                    CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Сборка", ref RowIndex, true, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            DT.Dispose();
            Col1.Dispose();
            DT = DT2.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(7);

            if (DT.Rows.Count > 0)
            {
                Assembly2ToExcelSingly(ref hssfworkbook, ref sheet2,
                   CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Сборка", ref RowIndex, false, IsPR1, IsPR3, IsPRU8);
            }
        }

        public void Stemas1ToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }
            int DisplayIndex = 0;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "18");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            if (bImpostMargin)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Смещ. имп.");
                cell.CellStyle = TableHeaderCS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "окл");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "фрез");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "сверл");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "франц");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int CType = 0;
            int PType = 0;

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);
                PType = Convert.ToInt32(DT.Rows[0]["ProfileType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                        continue;
                    if (!bImpostMargin && DT.Columns[y].ColumnName == "ImpostMargin")
                        continue;

                    if (bImpostMargin && DT.Columns[y].ColumnName == "ImpostMargin" && DT.Rows[x][y] != DBNull.Value)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = CalibriBold11CS;
                        continue;
                    }

                    if (Convert.ToBoolean(DT.Rows[x]["IsBox"]))
                    {
                        //HSSFCellStyle GreyCellStyle = hssfworkbook.CreateCellStyle();
                        //GreyCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
                        //GreyCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
                        //GreyCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
                        //GreyCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
                        //GreyCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
                        //GreyCellStyle.RightBorderColor = HSSFColor.BLACK.index;
                        //GreyCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
                        //GreyCellStyle.TopBorderColor = HSSFColor.BLACK.index;
                        //GreyCellStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.BLACK.index;
                        //GreyCellStyle.FillPattern = HSSFCellStyle.THIN_FORWARD_DIAG;
                        //GreyCellStyle.FillBackgroundColor = NPOI.HSSF.Util.HSSFColor.GREY_25_PERCENT.index;

                        //cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        //cell.CellStyle = GreyCellStyle;
                        //cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        //cell.CellStyle = GreyCellStyle;

                    }

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1 && (PType != Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]) || CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"])))
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                            continue;
                        if (!bImpostMargin && DT.Columns[y].ColumnName == "ImpostMargin")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                    PType = Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]);
                    TotalAmount = 0;
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                            continue;
                        if (!bImpostMargin && DT.Columns[y].ColumnName == "ImpostMargin")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                            continue;
                        if (!bImpostMargin && DT.Columns[y].ColumnName == "ImpostMargin")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void Stemas2ToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, ref int RowIndex, bool NeedHeader, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;
            if (NeedHeader)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;
                if (IsPR1)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                    cell.CellStyle = CalibriBold15CS;
                }
                if (IsPR3)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                    cell.CellStyle = CalibriBold15CS;
                }
                if (IsPRU8)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                    cell.CellStyle = CalibriBold15CS;
                }

                if (DispatchDate.Length > 0)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                    cell.CellStyle = CalibriBold11CS;
                }

                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
                cell.CellStyle = Calibri11CS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "16");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "шкантование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "терм");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "франц");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int CType = 0;
            int PType = 0;

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);
                PType = Convert.ToInt32(DT.Rows[0]["ProfileType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ImpostMargin" || DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1 && (PType != Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]) || CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"])))
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ImpostMargin" || DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                    PType = Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]);
                    TotalAmount = 0;
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ImpostMargin" || DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ImpostMargin" || DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void MainOrdersSummaryInfoToExcel(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string OrderName, string Notes, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }
            RowIndex++;
            if (IsPR1)
            {
                RowIndex++;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "Заказы");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, OrderName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Цвет наполнителя-2");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Квадратура");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal TotalSquare = 0;
            int TotalAmount = 0;

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void AllInsetsToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int TotalAmount = 0;
            int AllTotalAmount = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalAmount = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void GridsToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal TotalSquare = 0;
            decimal AllTotalSquare = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        if (DT.Rows[x][y].ToString().IndexOf("3х4") != -1)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(DT.Rows[x][y].ToString());
                            cell.CellStyle = CalibriBold11CS;
                        }
                        else
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(DT.Rows[x][y].ToString());
                            cell.CellStyle = TableHeaderCS;
                        }
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 2, MidpointRounding.AwayFromZero);

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void LuxToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "70 мм");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int TotalAmount = 0;
            int GlassCount = 0;
            int AllTotalAmount = 0;
            int AllGlassCount = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    GlassCount += Convert.ToInt32(DT.Rows[x]["GlassCount"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllGlassCount += Convert.ToInt32(DT.Rows[x]["GlassCount"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        if (GlassCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(GlassCount);
                            cell.CellStyle = TableHeaderCS;
                        }

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalAmount = 0;
                        GlassCount = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        if (GlassCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(GlassCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    if (AllGlassCount > 0)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(AllGlassCount);
                        cell.CellStyle = TableHeaderCS;
                    }

                }
                RowIndex++;
            }
        }

        public void MegaToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "30 мм");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "78 мм");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int TotalAmount = 0;
            int GlassCount = 0;
            int MegaCount = 0;
            int AllTotalAmount = 0;
            int AllGlassCount = 0;
            int AllMegaCount = 0;
            string str = string.Empty;

            int AType = -1;
            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                AType = Convert.ToInt32(DT.Rows[0]["TechnoInsetColorID"]);
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    GlassCount += Convert.ToInt32(DT.Rows[x]["GlassCount"]);
                    if (DT.Rows[x]["MegaCount"] != DBNull.Value)
                        MegaCount += Convert.ToInt32(DT.Rows[x]["MegaCount"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllGlassCount += Convert.ToInt32(DT.Rows[x]["GlassCount"]);
                    if (DT.Rows[x]["MegaCount"] != DBNull.Value)
                        AllMegaCount += Convert.ToInt32(DT.Rows[x]["MegaCount"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]) || AType != Convert.ToInt32(DT.Rows[x + 1]["TechnoInsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        if (GlassCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(GlassCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                        else
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            //continue;
                        }

                        if (MegaCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                            cell.SetCellValue(MegaCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                        else
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            //continue;
                        }

                        AType = Convert.ToInt32(DT.Rows[x + 1]["TechnoInsetColorID"]);
                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalAmount = 0;
                        GlassCount = 0;
                        MegaCount = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        if (GlassCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(GlassCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                        else
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            //continue;
                        }

                        if (MegaCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                            cell.SetCellValue(MegaCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                        else
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            //continue;
                        }
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    if (AllGlassCount > 0)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(AllGlassCount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    else
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (AllMegaCount > 0)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(AllMegaCount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    else
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                RowIndex++;
            }
        }

        public void Lacomat1ToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "78 мм");
            cell.CellStyle = TableHeaderCS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "30 мм");
            //cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int ColumnIndex = 0;
            int TotalAmount = 0;
            int MegaCount = 0;
            int AllTotalAmount = 0;
            int AllGlassCount = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                ColumnIndex = -1;
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    MegaCount += Convert.ToInt32(DT.Rows[x]["MegaCount"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllGlassCount += Convert.ToInt32(DT.Rows[x]["MegaCount"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                         || DT.Columns[y].ColumnName == "GlassCount")
                        continue;
                    ColumnIndex++;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    ColumnIndex = -1;
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                                 || DT.Columns[y].ColumnName == "GlassCount")
                                continue;
                            ColumnIndex++;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        if (MegaCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(MegaCount);
                            cell.CellStyle = TableHeaderCS;
                        }

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalAmount = 0;
                        MegaCount = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    ColumnIndex = -1;
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                                 || DT.Columns[y].ColumnName == "GlassCount")
                                continue;
                            ColumnIndex++;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        if (MegaCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(MegaCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                    }
                    RowIndex++;

                    ColumnIndex = -1;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                             || DT.Columns[y].ColumnName == "GlassCount")
                            continue;
                        ColumnIndex++;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    if (AllGlassCount > 0)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(AllGlassCount);
                        cell.CellStyle = TableHeaderCS;
                    }

                }
                RowIndex++;
            }
        }

        public void Lacomat2ToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "30 мм");
            //cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int ColumnIndex = 0;
            int TotalAmount = 0;
            int GlassCount = 0;
            int AllTotalAmount = 0;
            int AllGlassCount = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                ColumnIndex = -1;
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    GlassCount += Convert.ToInt32(DT.Rows[x]["GlassCount"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllGlassCount += Convert.ToInt32(DT.Rows[x]["GlassCount"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                         || DT.Columns[y].ColumnName == "MegaCount" || DT.Columns[y].ColumnName == "Count")
                        continue;
                    ColumnIndex++;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    ColumnIndex = -1;
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                                 || DT.Columns[y].ColumnName == "MegaCount" || DT.Columns[y].ColumnName == "Count")
                                continue;
                            ColumnIndex++;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        //cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        //cell.SetCellValue(GlassCount);
                        //cell.CellStyle = TableHeaderCS;

                        if (GlassCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                            cell.SetCellValue(GlassCount);
                            cell.CellStyle = TableHeaderCS;
                        }

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalAmount = 0;
                        GlassCount = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    ColumnIndex = -1;
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                                 || DT.Columns[y].ColumnName == "MegaCount" || DT.Columns[y].ColumnName == "Count")
                                continue;
                            ColumnIndex++;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        //cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        //cell.SetCellValue(TotalAmount);
                        //cell.CellStyle = TableHeaderCS;

                        if (GlassCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                            cell.SetCellValue(GlassCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                    }
                    RowIndex++;

                    ColumnIndex = -1;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                             || DT.Columns[y].ColumnName == "MegaCount" || DT.Columns[y].ColumnName == "Count")
                            continue;
                        ColumnIndex++;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    //cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    //cell.SetCellValue(AllTotalAmount);
                    //cell.CellStyle = TableHeaderCS;

                    if (AllGlassCount > 0)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(AllGlassCount);
                        cell.CellStyle = TableHeaderCS;
                    }

                }
                RowIndex++;
            }
        }

        public void PressToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal TotalSquare = 0;
            decimal AllTotalSquare = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 2, MidpointRounding.AwayFromZero);

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void FilenkaToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal TotalSquare = 0;
            decimal AllTotalSquare = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 2, MidpointRounding.AwayFromZero);

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void Assembly1ToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
           HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string PageName, ref int RowIndex, bool NeedHeader, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            if (NeedHeader)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;
                if (IsPR1)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                    cell.CellStyle = CalibriBold15CS;
                }
                if (IsPR3)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                    cell.CellStyle = CalibriBold15CS;
                }
                if (IsPRU8)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                    cell.CellStyle = CalibriBold15CS;
                }

                if (DispatchDate.Length > 0)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                    cell.CellStyle = CalibriBold11CS;
                }

                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
                cell.CellStyle = Calibri11CS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Цвет наполнителя-2");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Зачистка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, "Запил витрин");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 9, "Обклад витрин");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int FType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            if (DT.Rows.Count > 0)
            {
                FType = Convert.ToInt32(DT.Rows[0]["FrontType"]);
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "Square")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        //cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        //cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        //cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    //cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    //cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    //cell.CellStyle = TableHeaderDecCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    //cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    //cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    //cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void Assembly2ToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string PageName, ref int RowIndex, bool NeedHeader, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            if (NeedHeader)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;
                if (IsPR1)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                    cell.CellStyle = CalibriBold15CS;
                }
                if (IsPR3)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                    cell.CellStyle = CalibriBold15CS;
                }
                if (IsPRU8)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                    cell.CellStyle = CalibriBold15CS;
                }

                if (DispatchDate.Length > 0)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                    cell.CellStyle = CalibriBold11CS;
                }

                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
                cell.CellStyle = Calibri11CS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Цвет наполнителя-2");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Сборка");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int FType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            if (DT.Rows.Count > 0)
            {
                FType = Convert.ToInt32(DT.Rows[0]["FrontType"]);
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "Square")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        //cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        //cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        //cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    //cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    //cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    //cell.CellStyle = TableHeaderDecCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    //cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    //cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    //cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void OrdersToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, ref int RowIndex, bool IsPR1, bool IsPR2, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR2)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }
            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "Заказы");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 2), 1, "УТВЕРЖДАЮ_____________");
            //cell.CellStyle = Calibri11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            //cell.CellStyle = Calibri11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 4), 0, "Клиент:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 4), 1, ClientName);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 5), 0, "Партия:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 5), 1, BatchName);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 3), 0, "Задание №" + WorkAssignmentID.ToString());
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 3), 1, "Заказы");
            //cell.CellStyle = CalibriBold11CS;
            //RowIndex += 6;

            int ColumnIndex = -1;
            string ColumnName = string.Empty;

            for (int x = 0; x < SummOrdersDT.Columns.Count; x++)
            {
                if (SummOrdersDT.Columns[x].ColumnName == "Height" || SummOrdersDT.Columns[x].ColumnName == "Width"
                     || SummOrdersDT.Columns[x].ColumnName == "PR1Count" || SummOrdersDT.Columns[x].ColumnName == "PR2Count" || SummOrdersDT.Columns[x].ColumnName == "VitrinaCount")
                    continue;
                ColumnIndex++;
                ColumnName = SummOrdersDT.Columns[x].ColumnName;
                if (Contains(ColumnName, "_", StringComparison.OrdinalIgnoreCase))
                {
                    ColumnName = ColumnName.Substring(0, ColumnName.Length - 2);
                }
                if (ColumnName == "Sizes")
                {
                    ColumnName = "Размер";
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), ColumnIndex, ColumnName);
                    cell.CellStyle = TableHeaderCS;
                    //sheet1.SetColumnWidth(ColumnIndex, 12 * 256);
                    continue;
                }
                if (ColumnName == "TotalAmount")
                {
                    ColumnName = "Итого";
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), ColumnIndex, ColumnName);
                    cell.CellStyle = TableHeaderCS;
                    //sheet1.SetColumnWidth(ColumnIndex, 8 * 256);
                    continue;
                }
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), ColumnIndex, ColumnName);
                cell.CellStyle = TableHeaderCS;
                sheet1.SetColumnWidth(ColumnIndex, 19 * 256);
            }
            RowIndex++;
            TableHeaderCS.Alignment = HSSFCellStyle.ALIGN_LEFT;
            TableHeaderDecCS.Alignment = HSSFCellStyle.ALIGN_LEFT;

            HSSFFont FirstColF = hssfworkbook.CreateFont();
            FirstColF.FontHeightInPoints = 12;
            FirstColF.FontName = "MS Sans Serif";

            HSSFCellStyle FirstColCS = hssfworkbook.CreateCellStyle();
            FirstColCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            FirstColCS.LeftBorderColor = HSSFColor.BLACK.index;
            FirstColCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            FirstColCS.RightBorderColor = HSSFColor.BLACK.index;
            FirstColCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            FirstColCS.TopBorderColor = HSSFColor.BLACK.index;
            FirstColCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            FirstColCS.BottomBorderColor = HSSFColor.BLACK.index;
            FirstColCS.SetFont(FirstColF);
            for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
            {
                ColumnIndex = -1;
                for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
                {
                    if (SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width"
                     || SummOrdersDT.Columns[y].ColumnName == "PR1Count" || SummOrdersDT.Columns[y].ColumnName == "PR2Count" || SummOrdersDT.Columns[y].ColumnName == "VitrinaCount")
                        continue;
                    Type t = SummOrdersDT.Rows[x][y].GetType();

                    ColumnIndex++;

                    if (x == SummOrdersDT.Rows.Count - 1 && int.TryParse(SummOrdersDT.Rows[x][y].ToString(), out int IntValue))
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(IntValue);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (x == SummOrdersDT.Rows.Count - 2 && double.TryParse(SummOrdersDT.Rows[x][y].ToString(), out double DecValue))
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(DecValue);
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }

                    if (int.TryParse(SummOrdersDT.Rows[x][y].ToString(), out IntValue))
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(IntValue);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(SummOrdersDT.Rows[x][y].ToString());
                        if (ColumnIndex == 0)
                            cell.CellStyle = FirstColCS;
                        else
                            cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
        }

        public void OrdersToExcelSingly(ref HSSFWorkbook hssfworkbook, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, decimal AllSquare, ref int RowIndex)
        {
            TableHeaderCS.Alignment = HSSFCellStyle.ALIGN_LEFT;
            TableHeaderDecCS.Alignment = HSSFCellStyle.ALIGN_LEFT;

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "ИТОГО:");
            cell.CellStyle = TableHeaderCS;

            cell = sheet1.CreateRow(RowIndex).CreateCell(1);
            cell.SetCellValue(Convert.ToDouble(AllSquare));
            cell.CellStyle = TableHeaderDecCS;
        }

        private bool Contains(string source, string toCheck, StringComparison comp)
        {
            return source.IndexOf(toCheck, comp) >= 0;
        }
    }

    public class ImpostAssignments : IFirstProfilName, IColorName, IInsetTypeName, IInsetColorName
    {
        ArrayList FrontsID;
        FileManager FM = new FileManager();
        DateTime CurrentDate;

        bool bImpostMargin = false;
        int ColorType = 0;
        int FrontType = 0;

        private DataTable FrontsDataTable = null;
        private DataTable FrameColorsDataTable = null;
        private DataTable PatinaDataTable = null;
        private DataTable InsetTypesDataTable = null;
        private DataTable InsetColorsDataTable = null;
        DataTable TotalInfoDT;
        DataTable WidthMegaInsetsDT;

        DataTable RapidDT;
        DataTable StemasDT;
        DataTable InsetDT;
        DataTable AssemblyDT;
        DataTable FrontsOrdersDT;
        DataTable SummOrdersDT;

        DataTable ProfileNamesDT;
        
        DataTable Marsel3VitrinaDT;
        DataTable Marsel4VitrinaDT;
        
        DataTable Marsel3GridsDT;
        DataTable Marsel4GridsDT;
        
        DataTable Marsel3SimpleDT;
        DataTable Marsel4SimpleDT;
        
        DataTable Marsel3OrdersDT;
        DataTable Marsel4OrdersDT;

        DataTable PR1VitrinaDT;
        DataTable PR1GridsDT;
        DataTable PR1SimpleDT;
        DataTable PR1OrdersDT;

        public ImpostAssignments()
        {

        }

        public void Initialize()
        {
            Create();
            Fill();
        }

        private void Create()
        {
            PR1VitrinaDT = new DataTable();
            PR1GridsDT = new DataTable();
            PR1SimpleDT = new DataTable();
            PR1OrdersDT = new DataTable();

            FrontsID = new ArrayList();
            ProfileNamesDT = new DataTable();
            
            Marsel3VitrinaDT = new DataTable();
            Marsel3GridsDT = new DataTable();
            Marsel3SimpleDT = new DataTable();

            Marsel4VitrinaDT = new DataTable();
            Marsel4GridsDT = new DataTable();
            Marsel4SimpleDT = new DataTable();
            
            TotalInfoDT = new DataTable();
            TotalInfoDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            TotalInfoDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            TotalInfoDT.Columns.Add(new DataColumn("SticksCount", Type.GetType("System.Decimal")));

            WidthMegaInsetsDT = new DataTable();
            WidthMegaInsetsDT.Columns.Add(new DataColumn("HeightMin", Type.GetType("System.Int32")));
            WidthMegaInsetsDT.Columns.Add(new DataColumn("HeightMax", Type.GetType("System.Int32")));
            WidthMegaInsetsDT.Columns.Add(new DataColumn("GlassCount", Type.GetType("System.Int32")));
            WidthMegaInsetsDT.Columns.Add(new DataColumn("MegaCount", Type.GetType("System.Int32")));

            RapidDT = new DataTable();
            RapidDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            RapidDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            RapidDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            RapidDT.Columns.Add(new DataColumn("iCount", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("PR1Count", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("PR2Count", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("VitrinaCount", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("ProfileType", Type.GetType("System.Int32")));
            RapidDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            StemasDT = new DataTable();
            StemasDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            StemasDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            StemasDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            StemasDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            StemasDT.Columns.Add(new DataColumn("ImpostMargin", Type.GetType("System.Int32")));
            StemasDT.Columns.Add(new DataColumn("IsBox", Type.GetType("System.Boolean")));
            StemasDT.Columns.Add(new DataColumn("ProfileType", Type.GetType("System.Int32")));
            StemasDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            InsetDT = new DataTable();
            InsetDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            InsetDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("GlassCount", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("MegaCount", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("FrontID", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("InsetColorID", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("TechnoInsetColorID", Type.GetType("System.Int32")));

            AssemblyDT = new DataTable();
            AssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("TechnoColor", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            AssemblyDT.Columns.Add(new DataColumn("FrontType", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            FrontsOrdersDT = new DataTable();
            FrontsOrdersDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            FrontsOrdersDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            FrontsOrdersDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            FrontsOrdersDT.Columns.Add(new DataColumn("TechnoColor", Type.GetType("System.String")));
            FrontsOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            FrontsOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            FrontsOrdersDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            FrontsOrdersDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));

            SummOrdersDT = new DataTable();
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable = new DataTable();
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = FrameColorsDataTable.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = FrameColorsDataTable.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            FrameColorsDataTable.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }
        
        private void GetInsetColorsDT()
        {
            InsetColorsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InsetColors.InsetColorID, InsetColors.GroupID, infiniu2_catalog.dbo.TechStore.TechStoreName AS InsetColorName FROM InsetColors" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON InsetColors.InsetColorID = infiniu2_catalog.dbo.TechStore.TechStoreID ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = -1;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "-";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = 0;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "на выбор";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }

            }

        }

        private void Fill()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.ProfileID",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(ProfileNamesDT);
                ProfileNamesDT.Columns.Add(new DataColumn("ProfileType", Type.GetType("System.Int32")));
            }
            string SelectCommand = @"SELECT DISTINCT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1) ORDER BY TechStoreName";
            FrontsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            PatinaDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            GetColorsDT();
            GetInsetColorsDT();
            InsetTypesDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetTypes",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 FrontsOrdersID, MainOrderID, FrontID, InsetTypeID,
                ColorID, TechnoColorID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, Notes, ImpostMargin FROM FrontsOrders",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                Marsel3OrdersDT = new DataTable();
                DA.Fill(Marsel3OrdersDT);
                Marsel3OrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));

                Marsel3SimpleDT = Marsel3OrdersDT.Clone();
                Marsel3VitrinaDT = Marsel3OrdersDT.Clone();
                Marsel3GridsDT = Marsel3OrdersDT.Clone();

                Marsel4OrdersDT = Marsel3OrdersDT.Clone();
                Marsel4SimpleDT = Marsel3OrdersDT.Clone();
                Marsel4VitrinaDT = Marsel3OrdersDT.Clone();
                Marsel4GridsDT = Marsel3OrdersDT.Clone();

                PR1OrdersDT = Marsel3OrdersDT.Clone();
                PR1SimpleDT = Marsel3OrdersDT.Clone();
                PR1VitrinaDT = Marsel3OrdersDT.Clone();
                PR1GridsDT = Marsel3OrdersDT.Clone();
            }
        }

        private void GetMegaInsetStickCount(int Height, ref int GlassCount, ref int MegaCount)
        {
            DataRow[] rows = WidthMegaInsetsDT.Select("HeightMin<=" + Height + " AND HeightMax>" + Height);
            if (rows.Count() > 0)
            {
                GlassCount = Convert.ToInt32(rows[0]["GlassCount"]);
                MegaCount = Convert.ToInt32(rows[0]["MegaCount"]);
            }
        }

        public string GetMarketClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_marketingorders.dbo.MegaOrders" +
                    " WHERE MegaOrderID=(SELECT TOP 1 MegaOrderID FROM infiniu2_marketingorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + "))",
                    ConnectionStrings.MarketingReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        public string GetZOVClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_zovorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + ")",
                    ConnectionStrings.ZOVReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        private string GetOrderName(int MainOrderID, int GroupType)
        {
            string name = string.Empty;
            string ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            if (GroupType == 1)
                ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            SelectCommand = @"SELECT MegaBatchID, BatchID FROM Batch WHERE BatchID IN (SELECT BatchID FROM BatchDetails WHERE MainOrderID = " + MainOrderID + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                if (DA.Fill(DT) > 0 && DT.Rows[0]["MegaBatchID"] != DBNull.Value && DT.Rows[0]["BatchID"] != DBNull.Value)
                    name = DT.Rows[0]["MegaBatchID"].ToString() + ", " + DT.Rows[0]["BatchID"] + ", " + MainOrderID;
            }
            return name;
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }

        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
                ColorName = Rows[0]["ColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        public string GetInsetTypeName(int InsetTypeID)
        {
            string InsetType = string.Empty;
            try
            {
                DataRow[] Rows = InsetTypesDataTable.Select("InsetTypeID = " + InsetTypeID);
                InsetType = Rows[0]["InsetTypeName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return InsetType;
        }

        public string GetInsetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = InsetColorsDataTable.Select("InsetColorID = " + ColorID);
                ColorName = Rows[0]["InsetColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        private string ProfileName(int ID, int ProfileType)
        {
            //ProfileType
            string name = string.Empty;
            DataRow[] rows = ProfileNamesDT.Select("FrontConfigID=" + ID + " AND ProfileType=" + ProfileType);
            if (rows.Count() > 0)
                name = rows[0]["TechStoreName"].ToString();
            return name;
        }

        private void TotalSum(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    decimal SticksCount = 0;
                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= HeightMargin)
                        Height = HeightMargin;

                    SticksCount = (Height + 4) * Count * 2;
                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "'");
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["SticksCount"] = SticksCount;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                        rows[0]["SticksCount"] = Convert.ToDecimal(rows[0]["SticksCount"]) + SticksCount;
                }

                SizesASC = "Width ASC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    decimal SticksCount = 0;
                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    SticksCount = (Height + 4) * Count * 2;
                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "'");
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["SticksCount"] = SticksCount;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                        rows[0]["SticksCount"] = Convert.ToDecimal(rows[0]["SticksCount"]) + SticksCount;
                }
            }
        }

        private void TotalSumTechno4(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, int HeightNarrowMargin)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    decimal SticksCount = 0;
                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    SticksCount = (Height + 4) * Count * 2;
                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "'");
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["SticksCount"] = SticksCount;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                        rows[0]["SticksCount"] = Convert.ToDecimal(rows[0]["SticksCount"]) + SticksCount;
                }

                SizesASC = "Width ASC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    decimal SticksCount = 0;
                    int Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height < HeightMargin)
                        Height = Height - HeightNarrowMargin;
                    else
                        Height = Height - WidthMargin;
                    if (Height <= WidthMin)
                        Height = WidthMin;

                    SticksCount = (Height + 4) * Count * 2;
                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "'");
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["SticksCount"] = SticksCount;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                        rows[0]["SticksCount"] = Convert.ToDecimal(rows[0]["SticksCount"]) + SticksCount;
                }
            }
        }

        private void GetProfileNames(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID, Fronts Front)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();
            {
                SelectCommand = @"SELECT infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID,1 FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.ProfileID AND infiniu2_catalog.dbo.FrontsConfig.FrontConfigID IN (SELECT FrontConfigID FROM FrontsOrders
                    WHERE FrontID=" + Convert.ToInt32(Front) +
                        " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")))";
                if (FactoryID == 2)
                    SelectCommand = @"SELECT infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID,1 FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.ProfileID AND infiniu2_catalog.dbo.FrontsConfig.FrontConfigID IN (SELECT FrontConfigID FROM FrontsOrders
                    WHERE FrontID=" + Convert.ToInt32(Front) +
                            " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + ")))";
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);
                }
                foreach (DataRow item in DT.Rows)
                {
                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow.ItemArray = item.ItemArray;
                    DestinationDT.Rows.Add(NewRow);
                }

                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);
                }
                foreach (DataRow item in DT.Rows)
                {
                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow.ItemArray = item.ItemArray;
                    DestinationDT.Rows.Add(NewRow);
                }
            }
            {
                SelectCommand = @"SELECT infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID,2 FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.TechnoProfileID AND infiniu2_catalog.dbo.FrontsConfig.FrontConfigID IN (SELECT FrontConfigID FROM FrontsOrders
                    WHERE FrontID=" + Convert.ToInt32(Front) +
                        " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")))";
                if (FactoryID == 2)
                    SelectCommand = @"SELECT infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID,2 FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.TechnoProfileID AND infiniu2_catalog.dbo.FrontsConfig.FrontConfigID IN (SELECT FrontConfigID FROM FrontsOrders
                    WHERE FrontID=" + Convert.ToInt32(Front) +
                            " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + ")))";
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);
                }
                foreach (DataRow item in DT.Rows)
                {
                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow.ItemArray = item.ItemArray;
                    DestinationDT.Rows.Add(NewRow);
                }

                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);
                }
                foreach (DataRow item in DT.Rows)
                {
                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow.ItemArray = item.ItemArray;
                    DestinationDT.Rows.Add(NewRow);
                }
            }
        }

        private void GetVitrinaFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID=1");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetGridFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID IN (685,686,687,688,29470,29471)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetLuxFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID=860");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetMegaFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID=862");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetSimpleFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID NOT IN (1,860,862,685,686,687,688,29470,29471)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetFrontsOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID, Fronts Front)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, InsetTypeID,
                ColorID, TechnoColorID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, Notes, ImpostMargin FROM FrontsOrders
                WHERE 
FrontConfigID IN (SELECT FrontConfigID FROM infiniu2_catalog.dbo.FrontsConfig AS F INNER JOIN
                         infiniu2_catalog.dbo.TechStore AS T ON F.TechnoProfileID = T.TechStoreID AND (SUBSTRING(T.TechStoreName, 1, 2) = 'ПН' OR SUBSTRING(T.TechStoreName, 1, 1) = 'Г') AND F.TechnoProfileID<>-1)
AND FrontID=" + Convert.ToInt32(Front) +
                " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, InsetTypeID,
                    ColorID, TechnoColorID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, Notes, ImpostMargin FROM FrontsOrders
                    WHERE FrontConfigID IN (SELECT FrontConfigID FROM infiniu2_catalog.dbo.FrontsConfig AS F INNER JOIN
                         infiniu2_catalog.dbo.TechStore AS T ON F.TechnoProfileID = T.TechStoreID AND (SUBSTRING(T.TechStoreName, 1, 2) = 'ПН' OR SUBSTRING(T.TechStoreName, 1, 1) = 'Г') AND F.TechnoProfileID<>-1)
AND FrontID=" + Convert.ToInt32(Front) +
                    " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                if (Convert.ToInt32(item["ImpostMargin"]) != 0)
                    bImpostMargin = true;
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private DataTable DistFrameColorsTable(DataTable SourceDT, bool OrderASC)
        {
            int ColorID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["ColorID"].ToString(), out ColorID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["ColorID"] = ColorID;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "ColorID ASC";
                else
                    DV.Sort = "ColorID DESC";
                DT = DV.ToTable(true, new string[] { "ColorID" });
            }
            return DT;
        }

        private DataTable DistInsetColorsTable(DataTable SourceDT, bool OrderASC)
        {
            int InsetColorID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("InsetColorID", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                //if (Convert.ToInt32(Row["InsetTypeID"]) != 2 && Convert.ToInt32(Row["InsetTypeID"]) != 5 && Convert.ToInt32(Row["InsetTypeID"]) != 6
                //    && Convert.ToInt32(Row["InsetTypeID"]) != 9 && Convert.ToInt32(Row["InsetTypeID"]) != 10 && Convert.ToInt32(Row["InsetTypeID"]) != 11)
                //    continue;

                if (int.TryParse(Row["InsetColorID"].ToString(), out InsetColorID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["InsetColorID"] = InsetColorID;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "InsetColorID ASC";
                else
                    DV.Sort = "InsetColorID DESC";
                DT = DV.ToTable(true, new string[] { "InsetColorID" });
            }
            return DT;
        }

        private DataTable DistMainOrdersTable(DataTable SourceDT, bool OrderASC)
        {
            int MainOrderID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("MainOrderID", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "MainOrderID ASC";
                else
                    DV.Sort = "MainOrderID DESC";
                DT = DV.ToTable(true, new string[] { "MainOrderID", "GroupType" });
            }
            return DT;
        }

        private void CollectAssemblySimple(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, int ColorType, bool Impost)
        {
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                string InsetColor = string.Empty;
                string TechnoColor = string.Empty;
                //витрины
                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT2.Rows[j]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT2.Rows[j]["TechnoInsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                InsetColor = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"]));
                if (Convert.ToInt32(rows[0]["InsetColorID"]) != -1)
                    InsetColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));

                TechnoColor = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"]));
                if (Convert.ToInt32(rows[0]["TechnoInsetColorID"]) != -1)
                    TechnoColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorType;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1);
                if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1)
                    NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1) + " ИМПОСТ";
                NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1 && Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));
                NewRow["InsetColor"] = InsetColor;
                NewRow["TechnoColor"] = TechnoColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectAssemblyVitrina(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, int ColorType, bool Impost)
        {
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                string InsetColor = "витрина";
                string TechnoColor = string.Empty;
                //витрины
                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT2.Rows[j]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT2.Rows[j]["TechnoInsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                TechnoColor = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"]));
                if (Convert.ToInt32(rows[0]["TechnoInsetColorID"]) != -1)
                    TechnoColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));

                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorType;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1);
                if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1)
                    NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1) + " ИМПОСТ";
                NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1 && Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));
                NewRow["InsetColor"] = InsetColor;
                NewRow["TechnoColor"] = TechnoColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectAssemblyGrids(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, int ColorType, bool Impost)
        {
            DataTable DT = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int i = 0; i < DT.Rows.Count; i++)
            {
                decimal Square = 0;
                int Count = 0;
                //филенки
                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetColorID"]) + " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                string TechnoColor = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"]));
                if (Convert.ToInt32(rows[0]["TechnoInsetColorID"]) != -1)
                    TechnoColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));

                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorType;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1);
                if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1)
                    NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1) + " ИМПОСТ";
                NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1 && Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"])) + " (РЕШ)";
                NewRow["TechnoColor"] = TechnoColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectAssemblyLux(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, int ColorType)
        {
            DataTable DT = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int i = 0; i < DT.Rows.Count; i++)
            {
                decimal Square = 0;
                int Count = 0;
                //филенки
                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetColorID"]) + " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                string TechnoColor = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"]));
                if (Convert.ToInt32(rows[0]["TechnoInsetColorID"]) != -1)
                    TechnoColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorType;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1);
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) != -1 && Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["TechnoColor"] = TechnoColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectAssemblyMega(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, int ColorType)
        {
            DataTable DT = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int i = 0; i < DT.Rows.Count; i++)
            {
                decimal Square = 0;
                int Count = 0;
                //филенки
                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetColorID"]) + " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                string TechnoColor = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"]));
                if (Convert.ToInt32(rows[0]["TechnoInsetColorID"]) != -1)
                    TechnoColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));

                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorType;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1);
                if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                {
                    if (Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                }
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["TechnoColor"] = TechnoColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectMainOrders(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT = new DataTable();

            using (DataView DV = new DataView(SourceDT, string.Empty, "FrontID, ColorID, TechnoColorID, InsetTypeID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT = DV.ToTable(true, new string[] { "FrontID", "ColorID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }
            for (int i = 0; i < DT.Rows.Count; i++)
            {
                decimal Square = 0;
                int Count = 0;

                DataRow[] rows = SourceDT.Select("FrontID=" + Convert.ToInt32(DT.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoColorID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT.Rows[i]["TechnoInsetColorID"]) +
                    " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                string TechnoColor = GetInsetTypeName(Convert.ToInt32(rows[0]["TechnoInsetTypeID"]));
                if (Convert.ToInt32(rows[0]["TechnoInsetColorID"]) != -1)
                    TechnoColor += " " + GetInsetColorName(Convert.ToInt32(rows[0]["TechnoInsetColorID"]));

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]), 1);
                NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                if (Convert.ToInt32(rows[0]["InsetTypeID"]) == 1)
                    NewRow["InsetColor"] = "витрина";
                else
                    NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["TechnoColor"] = TechnoColor;
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
            DestinationDT.DefaultView.Sort = "Name, FrameColor, InsetColor, TechnoColor, Height, Width";
        }

        private void CollectOrders(DataTable DistinctSizesDT, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, string FrontName, bool Impost)
        {
            int InsetTypeID = 0;
            string ColName = string.Empty;
            string FrameColor = string.Empty;
            string InsetColor = string.Empty;

            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            for (int y = 0; y < DistinctSizesDT.Rows.Count; y++)
            {
                using (DataView DV = new DataView(SourceDT))
                {
                    DT1 = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID" });
                }
                for (int i = 0; i < DT1.Rows.Count; i++)
                {
                    using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]), string.Empty, DataViewRowState.CurrentRows))
                    {
                        DT2 = DV.ToTable(true, new string[] { "InsetTypeID" });
                    }
                    for (int j = 0; j < DT2.Rows.Count; j++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]), string.Empty, DataViewRowState.CurrentRows))
                        {
                            DT3 = DV.ToTable(true, new string[] { "InsetColorID" });
                        }
                        for (int x = 0; x < DT3.Rows.Count; x++)
                        {
                            using (DataView DV = new DataView(SourceDT, "InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]), string.Empty, DataViewRowState.CurrentRows))
                            {
                                DT4 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                            }
                            for (int c = 0; c < DT4.Rows.Count; c++)
                            {
                                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                                    " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) + " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                    " AND TechnoInsetTypeID=" + Convert.ToInt32(DT4.Rows[c]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT4.Rows[c]["TechnoInsetColorID"]));

                                if (rows.Count() > 0)
                                {
                                    InsetTypeID = Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]);
                                    //if (Convert.ToInt32(rows[0]["ColorID"]) == Convert.ToInt32(rows[0]["TechnoColorID"]))
                                    //    FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                                    //else
                                    //    FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));

                                    FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                                    if (Convert.ToInt32(rows[0]["TechnoColorID"]) == -1)
                                        FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                                    if (Impost && Convert.ToInt32(rows[0]["TechnoColorID"]) != -1 && Convert.ToInt32(rows[0]["TechnoColorID"]) != Convert.ToInt32(rows[0]["ColorID"]))
                                        FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "/" + GetColorName(Convert.ToInt32(rows[0]["TechnoColorID"]));

                                    int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + InsetTypeID)[0]["GroupID"]);
                                    switch (GroupID)
                                    {
                                        case -1:
                                            InsetColor = "Витрина";
                                            break;
                                        case 7:
                                            InsetColor = "фил " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 8:
                                            InsetColor = "фил " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 3:
                                            InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 4:
                                            InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 16:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 17:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 18:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 19:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 12:
                                            InsetColor = "люкс " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 13:
                                            InsetColor = "мега " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"])) + "/" + GetInsetColorName(Convert.ToInt32(DT4.Rows[c]["TechnoInsetColorID"]));
                                            if (Convert.ToInt32(DT4.Rows[c]["TechnoInsetColorID"]) == 3943)
                                                InsetColor = "мега " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"])) + " Витрина";
                                            break;
                                        default:
                                            InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                    }

                                    ColName = FrameColor + "(" + InsetColor + ")_" + FrontType;
                                    if (Impost && Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) != -1)
                                        ColName = "Импост " + ColName;
                                    if (!DestinationDT.Columns.Contains(ColName))
                                        DestinationDT.Columns.Add(new DataColumn(ColName, Type.GetType("System.String")));

                                    DestinationDT.Rows[0][ColName] = FrontName;
                                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                                        " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) + " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                        " AND TechnoInsetTypeID=" + Convert.ToInt32(DT4.Rows[c]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT4.Rows[c]["TechnoInsetColorID"]) +
                                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[y]["Width"]));
                                    if (Srows.Count() > 0)
                                    {
                                        int Count = 0;
                                        foreach (DataRow item in Srows)
                                        {
                                            Count += Convert.ToInt32(item["Count"]);
                                        }

                                        DataRow[] Drows = DestinationDT.Select("Sizes='" + DistinctSizesDT.Rows[y]["Height"].ToString() + " X " + DistinctSizesDT.Rows[y]["Width"].ToString() + "'");
                                        if (Drows.Count() == 0)
                                        {
                                            DataRow NewRow = DestinationDT.NewRow();
                                            NewRow["Sizes"] = DistinctSizesDT.Rows[y]["Height"].ToString() + " X " + DistinctSizesDT.Rows[y]["Width"].ToString();
                                            NewRow["Height"] = DistinctSizesDT.Rows[y]["Height"];
                                            NewRow["Width"] = DistinctSizesDT.Rows[y]["Width"];
                                            NewRow[ColName] = Count;
                                            DestinationDT.Rows.Add(NewRow);
                                        }
                                        else
                                        {
                                            Drows[0][ColName] = Count;
                                        }
                                    }
                                }
                                else
                                    continue;

                            }
                        }
                    }
                }
            }
        }

        private void CollectPR1Orders(DataTable DistinctSizesDT, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, string FrontName)
        {
            int InsetTypeID = 0;
            string ColName = string.Empty;
            string FrameColor = string.Empty;
            string InsetColor = string.Empty;

            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            for (int y = 0; y < DistinctSizesDT.Rows.Count; y++)
            {
                using (DataView DV = new DataView(SourceDT))
                {
                    DT1 = DV.ToTable(true, new string[] { "ColorID", "TechnoColorID" });
                }
                for (int i = 0; i < DT1.Rows.Count; i++)
                {
                    using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]), string.Empty, DataViewRowState.CurrentRows))
                    {
                        DT2 = DV.ToTable(true, new string[] { "InsetTypeID" });
                    }
                    for (int j = 0; j < DT2.Rows.Count; j++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]), string.Empty, DataViewRowState.CurrentRows))
                        {
                            DT3 = DV.ToTable(true, new string[] { "InsetColorID" });
                        }
                        for (int x = 0; x < DT3.Rows.Count; x++)
                        {
                            using (DataView DV = new DataView(SourceDT, "InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]), string.Empty, DataViewRowState.CurrentRows))
                            {
                                DT4 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                            }
                            for (int c = 0; c < DT4.Rows.Count; c++)
                            {
                                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                                    " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) + " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                    " AND TechnoInsetTypeID=" + Convert.ToInt32(DT4.Rows[c]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT4.Rows[c]["TechnoInsetColorID"]));

                                if (rows.Count() > 0)
                                {
                                    InsetTypeID = Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]);
                                    FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                                    int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + InsetTypeID)[0]["GroupID"]);
                                    switch (GroupID)
                                    {
                                        case -1:
                                            InsetColor = "Витрина";
                                            break;
                                        case 7:
                                            InsetColor = "фил " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 8:
                                            InsetColor = "фил " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 3:
                                            InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 4:
                                            InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 16:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 17:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 18:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 19:
                                            InsetColor = "реш " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 12:
                                            InsetColor = "люкс " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                        case 13:
                                            InsetColor = "мега " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"])) + "/" + GetInsetColorName(Convert.ToInt32(DT4.Rows[c]["TechnoInsetColorID"]));
                                            if (Convert.ToInt32(DT4.Rows[c]["TechnoInsetColorID"]) == 3943)
                                                InsetColor = "мега " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"])) + " Витрина";
                                            break;
                                        default:
                                            InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                                            break;
                                    }
                                    ColName = FrameColor + "(" + InsetColor + ")_" + FrontType;
                                    if (!DestinationDT.Columns.Contains(ColName))
                                        DestinationDT.Columns.Add(new DataColumn(ColName, Type.GetType("System.String")));

                                    DestinationDT.Rows[0][ColName] = FrontName;
                                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                                        " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) + " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                        " AND TechnoInsetTypeID=" + Convert.ToInt32(DT4.Rows[c]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT4.Rows[c]["TechnoInsetColorID"]) +
                                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[y]["Width"]));
                                    if (Srows.Count() > 0)
                                    {
                                        int Count = 0;
                                        int PR1Count = 0;
                                        int PR2Count = 0;

                                        foreach (DataRow item in Srows)
                                        {
                                            if (Convert.ToInt32(item["FrontID"]) == 120)
                                                PR1Count += Convert.ToInt32(item["Count"]);
                                            if (Convert.ToInt32(item["FrontID"]) == 121)
                                                PR2Count += Convert.ToInt32(item["Count"]);
                                            Count += Convert.ToInt32(item["Count"]);
                                        }

                                        DataRow[] Drows = DestinationDT.Select("Sizes='" + DistinctSizesDT.Rows[y]["Height"].ToString() + " X " + DistinctSizesDT.Rows[y]["Width"].ToString() + "'");
                                        if (Drows.Count() == 0)
                                        {
                                            DataRow NewRow = DestinationDT.NewRow();
                                            NewRow["Sizes"] = DistinctSizesDT.Rows[y]["Height"].ToString() + " X " + DistinctSizesDT.Rows[y]["Width"].ToString();
                                            NewRow["Height"] = DistinctSizesDT.Rows[y]["Height"];
                                            NewRow["Width"] = DistinctSizesDT.Rows[y]["Width"];
                                            NewRow["PR1Count"] = PR1Count;
                                            NewRow["PR2Count"] = PR2Count;
                                            NewRow[ColName] = Count;
                                            DestinationDT.Rows.Add(NewRow);
                                        }
                                        else
                                        {
                                            Drows[0][ColName] = Count;
                                        }
                                    }
                                }
                                else
                                    continue;

                            }
                        }
                    }
                }
            }
        }

        private DataTable DistHeightTable(DataTable SourceDT, bool OrderASC)
        {
            int Height = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("ImpostMargin", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["Height"].ToString(), out Height))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["Height"] = Height;
                    NewRow["ImpostMargin"] = Row["ImpostMargin"];
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "Height ASC";
                else
                    DV.Sort = "Height DESC";
                DT = DV.ToTable(true, new string[] { "Height", "ImpostMargin" });
            }
            return DT;
        }

        private DataTable DistWidthTable(DataTable SourceDT, bool OrderASC)
        {
            int Height = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["Width"].ToString(), out Height))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["Height"] = Height;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "Height ASC";
                else
                    DV.Sort = "Height DESC";
                DT = DV.ToTable(true, new string[] { "Height" });
            }
            return DT;
        }

        private DataTable DistSizesTable(DataTable SourceDT, bool OrderASC)
        {
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                DataRow NewRow = DT.NewRow();
                NewRow["Height"] = Row["Height"];
                NewRow["Width"] = Row["Width"];
                DT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "Height ASC, Width ASC";
                else
                    DV.Sort = "Height DESC, Width DESC";
                DT = DV.ToTable(true, new string[] { "Height", "Width" });
            }
            return DT;
        }

        private void CollectRapidProfil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= HeightMargin)
                        Height = HeightMargin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }

                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }
            }
        }

        private void CollectRapidMarsel3Profil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int VitrinaCount = 0;
                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        if (Convert.ToInt32(item["InsetTypeID"]) == 1)
                            VitrinaCount += Convert.ToInt32(item["Count"]);
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= HeightMargin)
                        Height = HeightMargin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["VitrinaCount"] = VitrinaCount * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["VitrinaCount"] = Convert.ToInt32(rows[0]["VitrinaCount"]) + VitrinaCount * 2;
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }

                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int VitrinaCount = 0;
                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        if (Convert.ToInt32(item["InsetTypeID"]) == 1)
                            VitrinaCount += Convert.ToInt32(item["Count"]);
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["VitrinaCount"] = VitrinaCount * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["VitrinaCount"] = Convert.ToInt32(rows[0]["VitrinaCount"]) + VitrinaCount * 2;
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }
            }
        }

        private void CollectRapidMarsel4Profil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, int HeightMargin1, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height > HeightMargin1)
                    {

                    }
                    else
                    {
                        if (Height <= HeightMargin + 1)
                            Height = HeightMargin;
                        if (Height > HeightMargin + 1 && Height <= HeightMargin1)
                            Height = HeightMargin1;
                    }
                    //if (Height <= HeightMargin)
                    //    Height = HeightMargin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }

                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }
            }
        }

        private void CollectPR1RapidProfil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int PR1Count = 0;
                    int PR2Count = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        if (Convert.ToInt32(item["FrontID"]) == Convert.ToInt32(Fronts.PR1))
                            PR1Count += Convert.ToInt32(item["Count"]);
                        if (Convert.ToInt32(item["FrontID"]) == Convert.ToInt32(Fronts.PR2))
                            PR2Count += Convert.ToInt32(item["Count"]);
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= HeightMargin)
                        Height = HeightMargin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["PR1Count"] = PR1Count;
                        NewRow["PR2Count"] = PR2Count;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                        rows[0]["PR1Count"] = Convert.ToInt32(rows[0]["PR1Count"]) + PR1Count;
                        rows[0]["PR2Count"] = Convert.ToInt32(rows[0]["PR2Count"]) + PR2Count;
                    }
                }

                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }
            }
        }

        private void CollectRapidPRU8Profil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - 1;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= HeightMargin)
                        Height = HeightMargin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName2 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName2;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }

                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }
            }
        }

        private void CollectRapidM3ImpostHeightProfil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - 108;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    ProfileName1 = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count;
                        NewRow["iCount"] = iCount;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount;
                    }
                }
            }
        }

        private void CollectRapidM4ImpostHeightProfil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMin, int HeightMargin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND InsetColorID<>-1 AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Width"]) - 108;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    ProfileName1 = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count;
                        NewRow["iCount"] = iCount;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount;
                    }
                }
            }
        }

        private void CollectRapidM4ImpostHeightProfil400713(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "Height IN (400,713) AND TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "Height IN (400,713) AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("Height IN (400,713) AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND InsetColorID=-1 AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = (Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin - 10) / 2;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    ProfileName1 = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["iCount"] = iCount * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 2;
                    }
                }
            }
        }

        private void CollectRapidM4ImpostHeightProfil1300(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "Height IN (1300) AND TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "Height IN (1300) AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("Height IN (1300) AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND InsetColorID=-1 AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = (Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin - 10) / 2;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    ProfileName1 = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 6;
                        NewRow["iCount"] = iCount * 6;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 6;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 6;
                    }
                }
            }
        }

        private void CollectRapidM4ImpostHeightProfil910(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "Height IN (910) AND TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                ProfileType++;
                SizesASC = "Width ASC";
                if (!OrderASC)
                    SizesASC = "Width DESC";

                using (DataView DV = new DataView(SourceDT, "Height IN (910) AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("Height IN (910) AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND InsetColorID=-1 AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = (Convert.ToInt32(DT2.Rows[j]["Width"]) - WidthMargin - 10) / 2;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    ProfileName1 = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 4;
                        NewRow["iCount"] = iCount * 4;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 4;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount * 4;
                    }
                }
            }
        }
        
        private void CollectRapidM3ImpostWidthProfil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                ProfileType++;
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";

                using (DataView DV = new DataView(SourceDT, "TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    ProfileName1 = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count;
                        NewRow["iCount"] = iCount;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount;
                    }
                }
            }
        }

        private void CollectRapidM4ImpostWidthProfil(DataTable SourceDT, ref DataTable DestinationDT, string ProfileName1, string ProfileName2,
            int WidthMargin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            string SizesASC = string.Empty;

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            int ProfileType = 0;
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                ProfileType++;
                SizesASC = "Height ASC";
                if (!OrderASC)
                    SizesASC = "Height DESC";

                using (DataView DV = new DataView(SourceDT, "TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]), SizesASC, DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND InsetColorID=-1 AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int iCount = 0;
                    int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    string Notes = string.Empty;
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    ProfileName1 = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                    DataRow[] rows = DestinationDT.Select("Front='" + ProfileName1 + "' AND Color='" + FrameColor + "' AND Height=" + Height);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["Front"] = ProfileName1;
                        NewRow["Color"] = FrameColor;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count;
                        NewRow["iCount"] = iCount;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                        rows[0]["iCount"] = Convert.ToInt32(rows[0]["iCount"]) + iCount;
                    }
                }
            }
        }

        private void CollectStemasProfil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) + " AND ImpostMargin=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]));
                    if (Srows.Count() == 0)
                        continue;

                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    int ImpostMargin = Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= HeightMargin)
                    {
                        Height = HeightMargin;
                        IsBox = true;
                    }

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType + " AND ImpostMargin=" + ImpostMargin);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        if (bImpostMargin && ImpostMargin != 0)
                            NewRow["ImpostMargin"] = ImpostMargin;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasMarselProfil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=-1 AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) + " AND ImpostMargin=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]));
                    if (Srows.Count() == 0)
                        continue;

                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    int ImpostMargin = Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= HeightMargin)
                    {
                        Height = HeightMargin;
                        IsBox = true;
                    }

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType + " AND ImpostMargin=" + ImpostMargin);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        if (bImpostMargin && ImpostMargin != 0)
                            NewRow["ImpostMargin"] = ImpostMargin;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasMarsel4Profil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int HeightMargin1, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID=-1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=-1 AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) + " AND ImpostMargin=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]));
                    if (Srows.Count() == 0)
                        continue;

                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    int ImpostMargin = Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height > HeightMargin1)
                    {

                    }
                    else
                    {
                        if (Height <= HeightMargin + 1)
                            Height = HeightMargin;
                        if (Height > HeightMargin + 1 && Height <= HeightMargin1)
                            Height = HeightMargin1;
                        IsBox = true;
                    }
                    //if (Height <= HeightMargin + 1)
                    //{
                    //    Height = HeightMargin;
                    //    IsBox = true;
                    //}
                    //if (Height < HeightMargin + 1 && Height >= HeightMargin1)
                    //{
                    //    Height = HeightMargin1;
                    //    IsBox = true;
                    //}

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType + " AND ImpostMargin=" + ImpostMargin);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        if (bImpostMargin && ImpostMargin != 0)
                            NewRow["ImpostMargin"] = ImpostMargin;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasImpostProfil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) + " AND ImpostMargin=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]));
                    if (Srows.Count() == 0)
                        continue;

                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    int ImpostMargin = Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= HeightMargin)
                    {
                        Height = HeightMargin;
                        IsBox = true;
                    }

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType + " AND ImpostMargin=" + ImpostMargin);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1) + " ИМПОСТ";
                            NewRow["Color"] = FrameColor;
                        }
                        if (bImpostMargin && ImpostMargin != 0)
                            NewRow["ImpostMargin"] = ImpostMargin;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasMarsel4ImpostProfil18(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int HeightMargin, int HeightMargin1, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) + " AND ImpostMargin=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]));
                    if (Srows.Count() == 0)
                        continue;

                    bool IsBox = false;
                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 1;
                    int ImpostMargin = Convert.ToInt32(DistinctSizesDT.Rows[j]["ImpostMargin"]);
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height > HeightMargin1)
                    {

                    }
                    else
                    {
                        if (Height <= HeightMargin + 1)
                            Height = HeightMargin;
                        if (Height > HeightMargin + 1 && Height <= HeightMargin1)
                            Height = HeightMargin1;
                        IsBox = true;
                    }
                    //if (Height <= HeightMargin + 1)
                    //{
                    //    Height = HeightMargin;
                    //    IsBox = true;
                    //}
                    //if (Height < HeightMargin + 1 && Height >= HeightMargin1)
                    //{
                    //    Height = HeightMargin1;
                    //    IsBox = true;
                    //}

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType + " AND ImpostMargin=" + ImpostMargin);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1) + " ИМПОСТ";
                            NewRow["Color"] = FrameColor;
                        }
                        if (bImpostMargin && ImpostMargin != 0)
                            NewRow["ImpostMargin"] = ImpostMargin;
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        NewRow["IsBox"] = IsBox;
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasProfil16(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMargin, int WidthMin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistWidthTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                //DV.RowFilter = "TechnoColorID = -1";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    foreach (DataRow item in Srows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 1);
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["IsBox"] = false;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasM3ImpostHeightProfil16(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 108;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["IsBox"] = false;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                    }
                }
            }
        }

        private void CollectStemasM4ImpostHeightProfil16(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND InsetColorID=-1 AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 108;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["IsBox"] = false;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                    }
                }
            }
        }

        private void CollectStemasImpostHeightProfil16(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMargin, int WidthMin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["IsBox"] = false;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                    }
                }
            }
        }

        private void CollectStemasM3ImpostWidthProfil16(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMargin, int WidthMin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistWidthTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = (Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - 108 - 10) / 2;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["IsBox"] = false;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasM4ImpostWidthProfil16400713(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMargin, int WidthMin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistWidthTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "Height IN (400,713) AND TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("Height IN (400,713) AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND InsetColorID=-1 AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = (Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - WidthMargin - 10) / 2;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 2;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["IsBox"] = false;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                    }
                }
            }
        }

        private void CollectStemasM4ImpostWidthProfil16910(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMargin, int WidthMin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistWidthTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "Height IN (910) AND TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("Height IN (910) AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND InsetColorID=-1 AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = (Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - WidthMargin - 10) / 2;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 4;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["IsBox"] = false;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 4;
                    }
                }
            }
        }

        private void CollectStemasM4ImpostWidthProfil161300(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMargin, int WidthMin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistWidthTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "Height IN (1300) AND TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("Height IN (1300) AND TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND InsetColorID=-1 AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = (Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - WidthMargin - 10) / 2;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count * 6;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["IsBox"] = false;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 6;
                    }
                }
            }
        }

        private void CollectStemasM4ImpostWidthProfil1(DataTable SourceDT, ref DataTable DestinationDT, string Front,
            int WidthMargin, int WidthMin, int ProfileType, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DistinctSizesDT = DistWidthTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID <> -1";
                DT1 = DV.ToTable(true, new string[] { "TechnoColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                bool AlreadyExist = false;
                for (int j = 0; j < DistinctSizesDT.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("TechnoColorID=" + Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]) +
                        " AND InsetColorID<>-1 AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]));
                    if (Srows.Count() == 0)
                        continue;

                    int Count = 0;
                    int Height = Convert.ToInt32(DistinctSizesDT.Rows[j]["Height"]) - WidthMargin;
                    string FrameColor = GetColorName(Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]));
                    foreach (DataRow item in Srows)
                        Count += Convert.ToInt32(item["Count"]);

                    if (Height <= WidthMin)
                        Height = WidthMin;

                    DataRow[] rows = DestinationDT.Select("Color='" + FrameColor + "' AND Height=" + Height + " AND ProfileType=" + ProfileType);
                    if (rows.Count() == 0)
                    {
                        DataRow NewRow = DestinationDT.NewRow();
                        if (!AlreadyExist)
                        {
                            AlreadyExist = true;
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]), 2) + " ИМПОСТ";
                            NewRow["Color"] = FrameColor;
                        }
                        NewRow["Height"] = Height;
                        NewRow["Count"] = Count;
                        NewRow["ProfileType"] = ProfileType;
                        NewRow["IsBox"] = false;
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["TechnoColorID"]);
                        DestinationDT.Rows.Add(NewRow);
                    }
                    else
                    {
                        rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                    }
                }
            }
        }

        private void StemasFrontsByHeight(ref DataTable DestinationDT)
        {
            int ProfileType = 1;
            if (Marsel3OrdersDT.Rows.Count > 0)
                CollectStemasMarselProfil18(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-041", Convert.ToInt32(FrontMargins.Marsel3Height), ProfileType++, true);
            if (Marsel4OrdersDT.Rows.Count > 0)
                CollectStemasMarsel4Profil18(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-066", Convert.ToInt32(FrontMargins.Marsel4Height), Convert.ToInt32(FrontMargins.Marsel4Height1), ProfileType++, true);
            
            if (Marsel3OrdersDT.Rows.Count > 0)
                CollectStemasImpostProfil18(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-041", Convert.ToInt32(FrontMargins.Marsel3Height), ProfileType++, true);
            if (Marsel4OrdersDT.Rows.Count > 0)
                CollectStemasMarsel4ImpostProfil18(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-066", Convert.ToInt32(FrontMargins.Marsel4Height), Convert.ToInt32(FrontMargins.Marsel4Height1), ProfileType++, true);

            if (PR1OrdersDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1OrdersDT.Copy();
                for (int i = 0; i < PR1OrdersDT.Rows.Count; i++)
                {
                    object x1 = PR1OrdersDT.Rows[i]["Height"];
                    object x2 = PR1OrdersDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                CollectStemasMarselProfil18(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-041", Convert.ToInt32(FrontMargins.Marsel3Height), ProfileType++, true);
                CollectStemasImpostProfil18(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-041", Convert.ToInt32(FrontMargins.Marsel3Height), ProfileType++, true);
            }
            string PrevName = string.Empty;
            if (DestinationDT.Rows.Count > 0)
                PrevName = DestinationDT.Rows[0]["Front"].ToString();
            for (int i = 0; i < DestinationDT.Rows.Count; i++)
            {
                if (i == 0)
                    continue;
                string CurrentName = DestinationDT.Rows[i]["Front"].ToString();
                if (PrevName == CurrentName)
                {
                    if (Convert.ToInt32(DestinationDT.Rows[i]["ProfileType"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ProfileType"]) &&
                        Convert.ToInt32(DestinationDT.Rows[i]["ColorType"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ColorType"]))
                    {
                        PrevName = DestinationDT.Rows[i]["Front"].ToString();
                        DestinationDT.Rows[i]["Front"] = string.Empty;
                        DestinationDT.Rows[i]["Color"] = string.Empty;
                    }
                }
                else
                {
                    PrevName = DestinationDT.Rows[i]["Front"].ToString();
                }
            }
        }

        private void StemasFrontsByWidth(ref DataTable DestinationDT)
        {
            int ProfileType = 1;
            if (Marsel3OrdersDT.Rows.Count > 0)
                CollectStemasProfil16(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-141",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), ProfileType++, true);
            if (Marsel4OrdersDT.Rows.Count > 0)
                CollectStemasProfil16(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), ProfileType++, true);

            if (Marsel3OrdersDT.Rows.Count > 0)
            {
                CollectStemasM3ImpostHeightProfil16(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-141",
                    Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), ProfileType++, true);
                CollectStemasM3ImpostWidthProfil16(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-141",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), ProfileType++, true);
            }
            if (Marsel4OrdersDT.Rows.Count > 0)
            {
                CollectStemasM4ImpostHeightProfil16(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166",
                    Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), ProfileType, true);

                CollectStemasM4ImpostWidthProfil16400713(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), ProfileType, true);
                CollectStemasM4ImpostWidthProfil16910(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), ProfileType, true);
                CollectStemasM4ImpostWidthProfil161300(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), ProfileType, true);

                CollectStemasM4ImpostWidthProfil1(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), ProfileType++, true);
            }

            if (PR1OrdersDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1OrdersDT.Copy();
                for (int i = 0; i < PR1OrdersDT.Rows.Count; i++)
                {
                    object x1 = PR1OrdersDT.Rows[i]["Height"];
                    object x2 = PR1OrdersDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                CollectStemasProfil16(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-141",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), ProfileType++, true);
                CollectStemasImpostHeightProfil16(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-141",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), ProfileType++, true);
                //CollectStemasImpostWidthProfil16(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-141",
                //    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), ProfileType++, true);
            }
            string PrevName = string.Empty;
            if (DestinationDT.Rows.Count > 0)
                PrevName = DestinationDT.Rows[0]["Front"].ToString();
            for (int i = 0; i < DestinationDT.Rows.Count; i++)
            {
                if (i == 0)
                    continue;
                string CurrentName = DestinationDT.Rows[i]["Front"].ToString();
                if (PrevName == CurrentName)
                {
                    if (Convert.ToInt32(DestinationDT.Rows[i]["ProfileType"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ProfileType"]) &&
                        Convert.ToInt32(DestinationDT.Rows[i]["ColorType"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ColorType"]))
                    {
                        PrevName = DestinationDT.Rows[i]["Front"].ToString();
                        DestinationDT.Rows[i]["Front"] = string.Empty;
                        DestinationDT.Rows[i]["Color"] = string.Empty;
                    }
                }
                else
                {
                    PrevName = DestinationDT.Rows[i]["Front"].ToString();
                }
            }
        }

        private void U(ref DataTable DestinationDT)
        {
            if (PR1OrdersDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1OrdersDT.Copy();
                for (int i = 0; i < PR1OrdersDT.Rows.Count; i++)
                {
                    object x1 = PR1OrdersDT.Rows[i]["Height"];
                    object x2 = PR1OrdersDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                TotalSum(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), Convert.ToInt32(FrontMargins.Marsel3Height));
            }

            if (Marsel4OrdersDT.Rows.Count > 0)
            {
                TotalSum(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166", "Марсель-4 П-066",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), Convert.ToInt32(FrontMargins.Marsel4Height));
            }
            

            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Front, Color";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }

        }

        private void Martin1Fronts(ref DataTable DestinationDT)
        {
            if (Marsel3OrdersDT.Rows.Count > 0)
            {
                CollectRapidMarsel3Profil(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), Convert.ToInt32(FrontMargins.Marsel3Height), false);
                CollectRapidM3ImpostHeightProfil(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                    Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), Convert.ToInt32(FrontMargins.Marsel3Height), false);
                CollectRapidM3ImpostWidthProfil(Marsel3OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), false);
            }
            if (Marsel4OrdersDT.Rows.Count > 0)
            {
                CollectRapidMarsel4Profil(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166", "Марсель-4 П-066",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), Convert.ToInt32(FrontMargins.Marsel4Height), 
                    Convert.ToInt32(FrontMargins.Marsel4Height1), false);
                CollectRapidM4ImpostHeightProfil(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166", "Марсель-4 П-066",
                    Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), Convert.ToInt32(FrontMargins.Marsel4Height), false);

                CollectRapidM4ImpostHeightProfil400713(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166", "Марсель-4 П-066",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), false);
                CollectRapidM4ImpostHeightProfil910(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166", "Марсель-4 П-066",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), false);
                CollectRapidM4ImpostHeightProfil1300(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166", "Марсель-4 П-066",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), false);

                CollectRapidM4ImpostWidthProfil(Marsel4OrdersDT, ref DestinationDT, "Марсель-4 П-166", "Марсель-4 П-066",
                    Convert.ToInt32(FrontMargins.Marsel4Width), Convert.ToInt32(FrontMinSizes.Marsel4MinWidth), false);
            }

            if (PR1OrdersDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1OrdersDT.Copy();
                for (int i = 0; i < PR1OrdersDT.Rows.Count; i++)
                {
                    object x1 = PR1OrdersDT.Rows[i]["Height"];
                    object x2 = PR1OrdersDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                CollectPR1RapidProfil(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), Convert.ToInt32(FrontMargins.Marsel3Height), false);
                //CollectRapidImpostHeightProfil(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                //    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), Convert.ToInt32(FrontMargins.Marsel3Height), false);
                CollectRapidM3ImpostWidthProfil(TempPR1OrdersDT, ref DestinationDT, "Марсель-3 П-141", "Марсель-3 П-041",
                    Convert.ToInt32(FrontMargins.Marsel3Width), Convert.ToInt32(FrontMinSizes.Marsel3MinWidth), false);
            }

            string PrevName = string.Empty;
            if (DestinationDT.Rows.Count > 0)
                PrevName = DestinationDT.Rows[0]["Front"].ToString();
            for (int i = 0; i < DestinationDT.Rows.Count; i++)
            {
                if (DestinationDT.Rows[i]["VitrinaCount"] != DBNull.Value && Convert.ToInt32(DestinationDT.Rows[i]["VitrinaCount"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = Convert.ToInt32(DestinationDT.Rows[i]["VitrinaCount"]) + " витр.";
            }
            for (int i = 0; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["iCount"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = Convert.ToInt32(DestinationDT.Rows[i]["iCount"]) + "-узкий проф";
                if (DestinationDT.Rows[i]["PR1Count"] != DBNull.Value && (DestinationDT.Rows[i]["PR2Count"] == DBNull.Value || Convert.ToInt32(DestinationDT.Rows[i]["PR2Count"]) == 0) && Convert.ToInt32(DestinationDT.Rows[i]["PR1Count"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = "ПР-1 - " + Convert.ToInt32(DestinationDT.Rows[i]["PR1Count"]) + "шт";
                if ((DestinationDT.Rows[i]["PR1Count"] == DBNull.Value || Convert.ToInt32(DestinationDT.Rows[i]["PR1Count"]) == 0) && DestinationDT.Rows[i]["PR2Count"] != DBNull.Value && Convert.ToInt32(DestinationDT.Rows[i]["PR2Count"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = "ПР-2 - " + Convert.ToInt32(DestinationDT.Rows[i]["PR2Count"]) + "шт";
                if (DestinationDT.Rows[i]["PR1Count"] != DBNull.Value && DestinationDT.Rows[i]["PR2Count"] != DBNull.Value &&
                    Convert.ToInt32(DestinationDT.Rows[i]["PR1Count"]) > 0 && Convert.ToInt32(DestinationDT.Rows[i]["PR2Count"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = "ПР-1 - " + Convert.ToInt32(DestinationDT.Rows[i]["PR1Count"]) + "шт/" + "ПР-2 - " + Convert.ToInt32(DestinationDT.Rows[i]["PR2Count"]) + "шт";

                if (DestinationDT.Rows[i]["VitrinaCount"] != DBNull.Value && Convert.ToInt32(DestinationDT.Rows[i]["VitrinaCount"]) > 0)
                    DestinationDT.Rows[i]["Notes"] = Convert.ToInt32(DestinationDT.Rows[i]["VitrinaCount"]) + " витр.";
                if (i == 0)
                    continue;
                string CurrentName = DestinationDT.Rows[i]["Front"].ToString();
                if (PrevName == CurrentName)
                {
                    if (Convert.ToInt32(DestinationDT.Rows[i]["ProfileType"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ProfileType"]) &&
                        Convert.ToInt32(DestinationDT.Rows[i]["ColorType"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ColorType"]))
                    {
                        PrevName = DestinationDT.Rows[i]["Front"].ToString();
                        DestinationDT.Rows[i]["Front"] = string.Empty;
                        DestinationDT.Rows[i]["Color"] = string.Empty;
                    }
                }
                else
                {
                    PrevName = DestinationDT.Rows[i]["Front"].ToString();
                }
            }
        }

        private void AllInsets(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool NeedSwap, bool OrderASC, bool Impost)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                if (Impost)
                    DV.RowFilter = "TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    if (Impost)
                        DV.RowFilter = "TechnoColorID<>-1";
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        if (Impost)
                            DV.RowFilter = "TechnoColorID<>-1";
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            if (Impost)
                                DV.RowFilter = "TechnoColorID<>-1";
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            if (Impost)
                                Height = Convert.ToInt32(DT4.Rows[y]["Height"]) / 2 - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]))[0]["GroupID"]);
                            if (GroupID == 7 || GroupID == 8)
                            {
                                //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");

                                if (Height > 100 && Width > 100)
                                    continue;
                            }
                            if (Impost)
                            {
                                InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            }

                            if (Width > 910)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                if (NeedSwap)
                                {
                                    NewRow["Width"] = Height;
                                    NewRow["Height"] = Width;
                                }
                                else
                                {
                                    NewRow["Height"] = Height;
                                    NewRow["Width"] = Width;
                                }
                                if (Impost)
                                    NewRow["Count"] = Count * 2;
                                else
                                    NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                if (Impost)
                                    rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                                else
                                    rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void AllInsetsMarsel3(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool NeedSwap, bool OrderASC, bool Impost)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                if (Impost)
                    DV.RowFilter = "TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    if (Impost)
                        DV.RowFilter = "TechnoColorID<>-1";
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        if (Impost)
                            DV.RowFilter = "TechnoColorID<>-1";
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            if (Impost)
                                DV.RowFilter = "TechnoColorID<>-1";
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            if (Impost)
                                Height = Convert.ToInt32(DT4.Rows[y]["Height"]) / 2 - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]))[0]["GroupID"]);
                            //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            if (GroupID == 7 || GroupID == 8)
                            {
                                //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");

                                if (Height > 100 && Width > 100)
                                    continue;
                            }
                            //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            //if (Impost)
                            //{
                            //    InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            //}

                            if (Width > 910)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                if (NeedSwap)
                                {
                                    NewRow["Width"] = Height;
                                    NewRow["Height"] = Width;
                                }
                                else
                                {
                                    NewRow["Height"] = Height;
                                    NewRow["Width"] = Width;
                                }
                                if (Impost)
                                    NewRow["Count"] = Count * 2;
                                else
                                    NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                if (Impost)
                                    rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                                else
                                    rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void AllInsetsMarsel4(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int HeightMargin1, int InsetHeightMargin, int InsetHeightBoxMargin, int InsetWidthMargin, int InsetHeightMin, int InsetWidthMin, bool NeedSwap, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            if ((Convert.ToInt32(DT4.Rows[y]["Height"]) - 1) <= HeightMargin)
                            {
                                InsetHeightMargin = InsetHeightBoxMargin;
                            }

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]))[0]["GroupID"]);
                            //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");

                            if (Height > HeightMargin1)
                            {
                                Height = Height - InsetHeightMargin;
                            }
                            else
                            {
                                if (Height <= HeightMargin + 1)
                                    Height = HeightMargin - InsetHeightMargin;
                                if (Height > HeightMargin + 1 && Height <= HeightMargin1)
                                    Height = HeightMargin1 - InsetHeightMargin;
                            }
                            if (Width > HeightMargin1)
                            {
                                Width = Width - InsetWidthMargin;
                            }
                            else
                            {
                                if (Width <= HeightMargin + 1)
                                    Width = HeightMargin - InsetWidthMargin;
                                if (Width > HeightMargin + 1 && Width <= HeightMargin1)
                                    Width = HeightMargin1 - InsetWidthMargin;
                            }

                            if (GroupID == 7 || GroupID == 8)
                            {
                                //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");

                                if (Height > 100 && Width > 100)
                                    continue;
                            }
                            InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");

                            if (Width > 910)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            //if (Height <= InsetHeightMin)
                            //    Height = InsetHeightMin;
                            if (Width <= InsetWidthMin)
                                Width = InsetWidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                if (NeedSwap)
                                {
                                    NewRow["Width"] = Height;
                                    NewRow["Height"] = Width;
                                }
                                else
                                {
                                    NewRow["Height"] = Height;
                                    NewRow["Width"] = Width;
                                }
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void AllInsetsMarsel4Impost(DataTable SourceDT, ref DataTable DestinationDT,
            int InsetHeightMargin, int InsetWidthMargin, int InsetHeightMin, int InsetWidthMin, bool NeedSwap, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DV.RowFilter = "TechnoColorID<>-1";
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DV.RowFilter = "TechnoColorID<>-1";
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DV.RowFilter = "TechnoColorID<>-1";
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DV.RowFilter = "TechnoColorID<>-1";
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) / 2 - InsetHeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - InsetWidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]))[0]["GroupID"]);
                            //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            if (GroupID == 7 || GroupID == 8)
                            {
                                //InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");

                                if (Height > 100 && Width > 100)
                                    continue;
                            }
                            InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            //if (Impost)
                            //{
                            //    InsetColor = InsetColor.Insert(InsetColor.Length, " 4 мм");
                            //}

                            if (Width > 910)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= InsetHeightMin)
                                Height = InsetHeightMin;
                            if (Width <= InsetWidthMin)
                                Width = InsetWidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                if (NeedSwap)
                                {
                                    NewRow["Width"] = Height;
                                    NewRow["Height"] = Width;
                                }
                                else
                                {
                                    NewRow["Height"] = Height;
                                    NewRow["Width"] = Width;
                                }
                                NewRow["Count"] = Count * 2;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                            }
                        }
                    }
                }
            }
        }

        private void InsetsPressOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);
                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            if (Height < 10 || Width < 10)
                                continue;

                            if (Height <= HeightMin || Width <= WidthMin)
                                continue;

                            if (Width <= 910)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void Marsel3PressOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC, bool Impost)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height1 = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;

                            if (Impost)
                                Height = Convert.ToInt32(DT4.Rows[y]["Height"]) / 2 - HeightMargin;

                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);
                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            //if (Height < 10  || Width < 10)
                            //    continue;

                            if (Height <= HeightMin || Width <= WidthMin)
                                continue;

                            if (Height <= 900 && Width <= 900)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Width;
                                NewRow["Width"] = Height;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void InsetsFilenkaOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531)", "InsetTypeID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);
                            string InsetColor = "фил " + GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            if (Height <= 100 || Width <= 100)
                                continue;

                            if (Height <= HeightMin || Width <= WidthMin)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void InsetsGridsOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < 10 || Width < 10)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;
                            string Name = string.Empty;
                            if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 685 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 688 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 29470)
                                Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " 45 " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 686 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 687 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 29471)
                                Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " 90 " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = Name;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void LuxOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;

                            if (Convert.ToInt32(DT4.Rows[y]["Height"]) <= HeightMin || Convert.ToInt32(DT4.Rows[y]["Width"]) < WidthMin)
                                continue;

                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);
                            int LuxCount = 0;
                            string InsetColor = "люкс " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            LuxCount = Convert.ToInt32(Math.Truncate(Height / 65m));
                            if (LuxCount == 0)
                                LuxCount = 1;
                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["GlassCount"] = LuxCount * Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                                rows[0]["GlassCount"] = Convert.ToInt32(rows[0]["GlassCount"]) + LuxCount * Count;
                            }
                        }
                    }
                }
            }
        }

        private void MegaOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            //if (Convert.ToInt32(DT4.Rows[y]["Height"]) <= HeightMin)
                            //    continue;

                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - HeightMargin;
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - WidthMargin;

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            //if (Height < 20 || Width < 20)
                            //    continue;

                            int Count = 0;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);
                            int GlassCount = 0;
                            int MegaCount = 0;
                            string InsetColor = "мега " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            foreach (DataRow item in Srows)
                            {
                                Count += Convert.ToInt32(item["Count"]);
                            }

                            GetMegaInsetStickCount(Height, ref GlassCount, ref MegaCount);

                            if (TechnoInsetColorID == 3943)
                            {
                                GlassCount = 0;
                                InsetColor += " вит";
                            }
                            else
                                InsetColor += "/" + GetInsetColorName(TechnoInsetColorID);

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["GlassCount"] = GlassCount * Count;
                                NewRow["MegaCount"] = MegaCount * Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                                rows[0]["GlassCount"] = Convert.ToInt32(rows[0]["GlassCount"]) + GlassCount * Count;
                                rows[0]["MegaCount"] = Convert.ToInt32(rows[0]["MegaCount"]) + MegaCount * Count;
                            }
                        }
                    }
                }
            }
        }

        private void GlassOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightProfilMargin, int WidthProfilMargin,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TempHeightMargin = HeightMargin;
                            int TempWidthMargin = WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - TempHeightMargin;
                            Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - TempWidthMargin;

                            int GlassCount = 0;
                            int MegaCount = 0;
                            string InsetColor = "стекло Лакомат";

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            foreach (DataRow item in Srows)
                            {
                                Count += Convert.ToInt32(item["Count"]);
                            }

                            GetMegaInsetStickCount(Height, ref GlassCount, ref MegaCount);

                            DataRow[] rows = DestinationDT.Select("Height=" + 30 + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = 30;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["GlassCount"] = GlassCount * Count;
                                NewRow["MegaCount"] = MegaCount * Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                                rows[0]["GlassCount"] = Convert.ToInt32(rows[0]["GlassCount"]) + GlassCount * Count;
                                rows[0]["MegaCount"] = Convert.ToInt32(rows[0]["MegaCount"]) + MegaCount * Count;
                            }
                        }
                    }
                }
            }
        }

        private void GlassOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightProfilMargin, int WidthProfilMargin, int HeightNarrowMargin, int WidthNarrowMargin,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TempHeightMargin = HeightMargin;
                            int TempWidthMargin = WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < HeightProfilMargin)
                                TempHeightMargin = HeightNarrowMargin;
                            if (Width < WidthProfilMargin)
                                TempWidthMargin = WidthNarrowMargin;

                            Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - TempHeightMargin;
                            Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - TempWidthMargin;

                            int GlassCount = 0;
                            int MegaCount = 0;
                            string InsetColor = "стекло Лакомат";

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            foreach (DataRow item in Srows)
                            {
                                Count += Convert.ToInt32(item["Count"]);
                            }

                            GetMegaInsetStickCount(Height, ref GlassCount, ref MegaCount);

                            DataRow[] rows = DestinationDT.Select("Height=" + 30 + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = 30;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["GlassCount"] = GlassCount * Count;
                                NewRow["MegaCount"] = MegaCount * Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                                rows[0]["GlassCount"] = Convert.ToInt32(rows[0]["GlassCount"]) + GlassCount * Count;
                                rows[0]["MegaCount"] = Convert.ToInt32(rows[0]["MegaCount"]) + MegaCount * Count;
                            }
                        }
                    }
                }
            }
        }

        private void Techno4AllInsets(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightProfilMargin, int WidthProfilMargin, int HeightNarrowMargin, int WidthNarrowMargin, int HeightMargin, int WidthMargin,
            int HeightMin, int WidthMin, bool NeedSwap, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TempHeightMargin = HeightMargin;
                            int TempWidthMargin = WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < HeightProfilMargin)
                                TempHeightMargin = HeightNarrowMargin;
                            if (Width < WidthProfilMargin)
                                TempWidthMargin = WidthNarrowMargin;

                            Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - TempHeightMargin;
                            Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - TempWidthMargin;

                            string InsetColor = GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            int GroupID = Convert.ToInt32(InsetTypesDataTable.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]))[0]["GroupID"]);
                            if (GroupID == 7 || GroupID == 8)
                            {
                                InsetColor = InsetColor.Insert(0, "фил ");
                                if ((Height > HeightMin && Width > WidthMin))
                                    continue;
                            }

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            //if (TechnoInsetColorID == 128)
                            //{
                            //    InsetColor = "мега " + InsetColor + " вит";
                            //}

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                if (NeedSwap)
                                {
                                    NewRow["Width"] = Height;
                                    NewRow["Height"] = Width;
                                }
                                else
                                {
                                    NewRow["Height"] = Height;
                                    NewRow["Width"] = Width;
                                }
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void Techno4InsetsGridsOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightProfilMargin, int WidthProfilMargin, int HeightNarrowMargin, int WidthNarrowMargin,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TempHeightMargin = HeightMargin;
                            int TempWidthMargin = WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < HeightProfilMargin)
                                TempHeightMargin = HeightNarrowMargin;
                            if (Width < WidthProfilMargin)
                                TempWidthMargin = WidthNarrowMargin;

                            Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - TempHeightMargin;
                            Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - TempWidthMargin;

                            if (Height < 10 || Width < 10)
                                continue;

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            string Name = string.Empty;
                            if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 685 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 688 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 29470)
                                Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " 45 " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 686 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 687 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 29471)
                                Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " 90 " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = Name;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
        }

        private void Techno4LuxOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightProfilMargin, int WidthProfilMargin, int HeightNarrowMargin, int WidthNarrowMargin,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TempHeightMargin = HeightMargin;
                            int TempWidthMargin = WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < HeightProfilMargin)
                                TempHeightMargin = HeightNarrowMargin;
                            if (Width < WidthProfilMargin)
                                TempWidthMargin = WidthNarrowMargin;

                            Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - TempHeightMargin;
                            Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - TempWidthMargin;

                            int LuxCount = 0;
                            string InsetColor = "люкс " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            LuxCount = Convert.ToInt32(Math.Truncate(Height / 65m));
                            if (LuxCount == 0)
                                LuxCount = 1;
                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["GlassCount"] = LuxCount * Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                                rows[0]["GlassCount"] = Convert.ToInt32(rows[0]["GlassCount"]) + LuxCount * Count;
                            }
                        }
                    }
                }
            }
        }

        private void Techno4MegaOnly(DataTable SourceDT, ref DataTable DestinationDT,
            int HeightProfilMargin, int WidthProfilMargin, int HeightNarrowMargin, int WidthNarrowMargin,
            int HeightMargin, int WidthMargin, int HeightMin, int WidthMin, bool OrderASC)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), "TechnoInsetTypeID, TechnoInsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "TechnoInsetTypeID", "TechnoInsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]), "Height, Width", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND TechnoInsetTypeID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetTypeID"]) + " AND TechnoInsetColorID=" + Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT4.Rows[y]["Width"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            int Height = Convert.ToInt32(DT4.Rows[y]["Height"]);
                            int Width = Convert.ToInt32(DT4.Rows[y]["Width"]);
                            int TempHeightMargin = HeightMargin;
                            int TempWidthMargin = WidthMargin;
                            int TechnoInsetColorID = Convert.ToInt32(DT3.Rows[x]["TechnoInsetColorID"]);

                            if (Height < HeightProfilMargin)
                                TempHeightMargin = HeightNarrowMargin;
                            if (Width < WidthProfilMargin)
                                TempWidthMargin = WidthNarrowMargin;

                            Height = Convert.ToInt32(DT4.Rows[y]["Height"]) - TempHeightMargin;
                            Width = Convert.ToInt32(DT4.Rows[y]["Width"]) - TempWidthMargin;

                            int GlassCount = 0;
                            int MegaCount = 0;
                            string InsetColor = "мега " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));

                            foreach (DataRow item in Srows)
                            {
                                Count += Convert.ToInt32(item["Count"]);
                            }

                            if (Height <= HeightMin)
                                Height = HeightMin;
                            if (Width <= WidthMin)
                                Width = WidthMin;

                            GetMegaInsetStickCount(Height, ref GlassCount, ref MegaCount);

                            if (TechnoInsetColorID == 3943)
                            {
                                GlassCount = 0;
                                InsetColor += " вит";
                            }
                            else
                                InsetColor += "/" + GetInsetColorName(TechnoInsetColorID);

                            DataRow[] rows = DestinationDT.Select("InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                                " AND TechnoInsetColorID=" + TechnoInsetColorID +
                                " AND Height=" + Height + " AND Width=" + Width);
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Name"] = InsetColor;
                                NewRow["Height"] = Height;
                                NewRow["Width"] = Width;
                                NewRow["Count"] = Count;
                                NewRow["GlassCount"] = GlassCount * Count;
                                NewRow["MegaCount"] = MegaCount * Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                                NewRow["TechnoInsetColorID"] = TechnoInsetColorID;
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                                rows[0]["GlassCount"] = Convert.ToInt32(rows[0]["GlassCount"]) + GlassCount * Count;
                                rows[0]["MegaCount"] = Convert.ToInt32(rows[0]["MegaCount"]) + MegaCount * Count;
                            }
                        }
                    }
                }
            }
        }

        private void CollectAllInsets(ref DataTable DestinationDT)
        {
            DataTable DT = Marsel3SimpleDT.Clone();
            DataRow[] rows = Marsel3SimpleDT.Select("Height<1088 AND TechnoColorID=-1");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                AllInsetsMarsel3(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel3InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel3InsetMinWidth), true, true, false);
            DT.Clear();
            rows = Marsel3SimpleDT.Select("TechnoColorID<>-1");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                AllInsetsMarsel3(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetImpostHeight), Convert.ToInt32(FrontMargins.Marsel3InsetImpostWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel3InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel3InsetMinWidth), true, true, true);
            DT.Clear();
            rows = Marsel4SimpleDT.Select("TechnoColorID=-1");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                AllInsetsMarsel4(DT, ref DestinationDT, Convert.ToInt32(FrontMargins.Marsel4Height), Convert.ToInt32(FrontMargins.Marsel4Height1),
                    Convert.ToInt32(FrontMargins.Marsel4InsetHeight), Convert.ToInt32(FrontMargins.Marsel4BoxInsetHeight), Convert.ToInt32(FrontMargins.Marsel4InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel4InsetMinWidth), false, true);
            DT.Clear();
            rows = Marsel4SimpleDT.Select("TechnoColorID<>-1");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                AllInsetsMarsel4Impost(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel4InsetImpostHeight), Convert.ToInt32(FrontMargins.Marsel4InsetImpostWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel4InsetMinWidth), false, true);

            if (PR1SimpleDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1SimpleDT.Copy();
                for (int i = 0; i < PR1SimpleDT.Rows.Count; i++)
                {
                    object x1 = PR1SimpleDT.Rows[i]["Height"];
                    object x2 = PR1SimpleDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                AllInsets(TempPR1OrdersDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.PR1InsetMinWidth), Convert.ToInt32(FrontMinSizes.PR1InsetMinHeight), false, true, false);
            }
            DT.Dispose();

            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void CollectInsetsGridsOnly(ref DataTable DestinationDT)
        {
            if (Marsel3GridsDT.Rows.Count > 0)
                InsetsGridsOnly(Marsel3GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel3InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel3InsetMinWidth), true);
            if (Marsel4GridsDT.Rows.Count > 0)
                InsetsGridsOnly(Marsel4GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel4InsetHeight), Convert.ToInt32(FrontMargins.Marsel4InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel4InsetMinWidth), true);
            if (PR1GridsDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1GridsDT.Copy();
                for (int i = 0; i < PR1GridsDT.Rows.Count; i++)
                {
                    object x1 = PR1GridsDT.Rows[i]["Height"];
                    object x2 = PR1GridsDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                InsetsGridsOnly(TempPR1OrdersDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.PR1InsetMinWidth), Convert.ToInt32(FrontMinSizes.PR1InsetMinHeight), true);
            }
            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["FrontID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["TechnoInsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["TechnoInsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void CollectInsetsLuxOnly(ref DataTable DestinationDT)
        {

        }

        private void CollectInsetsVitrinaOnly(ref DataTable DestinationDT)
        {
        }

        private void CollectInsetsGlassOnly(ref DataTable DestinationDT)
        {
        }

        private void CollectInsetsMegaOnly(ref DataTable DestinationDT)
        {
        }

        private void CollectInsetsFilenkaOnly(ref DataTable DestinationDT)
        {

        }

        private void CollectInsetsPressOnly(ref DataTable DestinationDT)
        {
            DataTable DT = Marsel3SimpleDT.Clone();
            DataRow[] rows = Marsel3SimpleDT.Select("TechnoColorID=-1");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                Marsel3PressOnly(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel3InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel3InsetMinWidth), true, false);
            DT.Clear();
            rows = Marsel3SimpleDT.Select("TechnoColorID<>-1");
            foreach (DataRow item in rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                Marsel3PressOnly(DT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel3InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel3InsetMinWidth), true, true);
            
            if (Marsel4SimpleDT.Rows.Count > 0)
                InsetsPressOnly(Marsel4SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel4InsetHeight), Convert.ToInt32(FrontMargins.Marsel4InsetWidth),
                    Convert.ToInt32(FrontMinSizes.Marsel4InsetMinHeight), Convert.ToInt32(FrontMinSizes.Marsel4InsetMinWidth), true);
            if (PR1SimpleDT.Rows.Count > 0)
            {
                DataTable TempPR1OrdersDT = PR1SimpleDT.Copy();
                for (int i = 0; i < PR1SimpleDT.Rows.Count; i++)
                {
                    object x1 = PR1SimpleDT.Rows[i]["Height"];
                    object x2 = PR1SimpleDT.Rows[i]["Width"];
                    TempPR1OrdersDT.Rows[i]["Width"] = x1;
                    TempPR1OrdersDT.Rows[i]["Height"] = x2;
                }
                InsetsPressOnly(TempPR1OrdersDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Marsel3InsetHeight), Convert.ToInt32(FrontMargins.Marsel3InsetWidth),
                    Convert.ToInt32(FrontMinSizes.PR1InsetMinWidth), Convert.ToInt32(FrontMinSizes.PR1InsetMinHeight), true);
            }
            if (DestinationDT.Rows.Count == 0)
                return;

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["InsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["InsetColorID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["TechnoInsetColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["TechnoInsetColorID"]))
                    DestinationDT.Rows[i]["Name"] = string.Empty;
            }
        }

        private void SummaryPR1Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryMarsel1Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryMarsel3Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, true);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, true);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, true);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryTechno1Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, DataTable LuxDT, DataTable MegaDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            CollectOrders(DistinctSizesDT, LuxDT, ref SummOrdersDT, 4, FrontName, false);
            CollectOrders(DistinctSizesDT, MegaDT, ref SummOrdersDT, 5, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryShervudOrders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryTechno2Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, DataTable LuxDT, DataTable MegaDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            CollectOrders(DistinctSizesDT, LuxDT, ref SummOrdersDT, 4, FrontName, false);
            CollectOrders(DistinctSizesDT, MegaDT, ref SummOrdersDT, 5, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryTechno4Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, DataTable LuxDT, DataTable MegaDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            CollectOrders(DistinctSizesDT, LuxDT, ref SummOrdersDT, 4, FrontName, false);
            CollectOrders(DistinctSizesDT, MegaDT, ref SummOrdersDT, 5, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummaryTechno5Orders(DataTable SourceDT, DataTable SimpleDT, DataTable VitrinaDT, DataTable GridsDT, DataTable LuxDT, string FrontName, ref decimal AllSquare)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = DistSizesTable(SourceDT, true);

            CollectOrders(DistinctSizesDT, SimpleDT, ref SummOrdersDT, 2, FrontName, false);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 1, FrontName, false);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, FrontName, false);
            CollectOrders(DistinctSizesDT, LuxDT, ref SummOrdersDT, 5, FrontName, false);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            AllSquare += TotalSquare;
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        public void ClearOrders()
        {
            FrontsID.Clear();
            Marsel3OrdersDT.Clear();
            Marsel4OrdersDT.Clear();
            PR1OrdersDT.Clear();
        }

        public ArrayList GetFrontsID
        {
            set
            {
                FrontsID = value;
            }
        }

        public bool GetOrders(int WorkAssignmentID, int FactoryID)
        {
            bImpostMargin = false;
            ProfileNamesDT.Clear();
            //InsetTypeNamesDT.Clear();
            for (int i = 0; i < FrontsID.Count; i++)
            {
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Marsel3))
                {
                    GetFrontsOrders(ref Marsel3OrdersDT, WorkAssignmentID, FactoryID, Fronts.Marsel3);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Marsel3);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Marsel3);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.Marsel4))
                {
                    GetFrontsOrders(ref Marsel4OrdersDT, WorkAssignmentID, FactoryID, Fronts.Marsel4);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Marsel4);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.PR1))
                {
                    GetFrontsOrders(ref PR1OrdersDT, WorkAssignmentID, FactoryID, Fronts.PR1);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.PR1);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.PR1);
                }
                if (Convert.ToInt32(FrontsID[i]) == Convert.ToInt32(Fronts.PR2))
                {
                    GetFrontsOrders(ref PR1OrdersDT, WorkAssignmentID, FactoryID, Fronts.PR2);
                    //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.PR2);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.PR2);
                }
            }
            
            if (Marsel3OrdersDT.Rows.Count == 0 && Marsel4OrdersDT.Rows.Count == 0 && PR1OrdersDT.Rows.Count == 0)
                return false;
            else
                return true;
        }
        
        public void GetCurrentDate()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.UsersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    CurrentDate = Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        public void CreateExcel(int WorkAssignmentID, int FactoryID, string BatchName, string ClientName, ref string sSourceFileName)
        {
            GetCurrentDate();

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont Calibri11F = hssfworkbook.CreateFont();
            Calibri11F.FontHeightInPoints = 11;
            Calibri11F.FontName = "Calibri";

            HSSFFont CalibriBold11F = hssfworkbook.CreateFont();
            CalibriBold11F.FontHeightInPoints = 11;
            CalibriBold11F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold11F.FontName = "Calibri";

            HSSFFont CalibriBold15F = hssfworkbook.CreateFont();
            CalibriBold15F.FontHeightInPoints = 15;
            CalibriBold15F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold15F.FontName = "Calibri";

            HSSFFont Serif8F = hssfworkbook.CreateFont();
            Serif8F.FontHeightInPoints = 8;
            Serif8F.FontName = "MS Sans Serif";

            HSSFFont Serif10F = hssfworkbook.CreateFont();
            Serif10F.FontHeightInPoints = 10;
            Serif10F.FontName = "MS Sans Serif";

            HSSFFont SerifBold10F = hssfworkbook.CreateFont();
            SerifBold10F.FontHeightInPoints = 10;
            SerifBold10F.FontName = "MS Sans Serif";
            SerifBold10F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;

            HSSFCellStyle Calibri11CS = hssfworkbook.CreateCellStyle();
            Calibri11CS.SetFont(Calibri11F);

            HSSFCellStyle CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.SetFont(CalibriBold11F);

            HSSFCellStyle CalibriBold15CS = hssfworkbook.CreateCellStyle();
            CalibriBold15CS.SetFont(CalibriBold15F);

            HSSFCellStyle TableHeaderCS = hssfworkbook.CreateCellStyle();
            TableHeaderCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.SetFont(Serif8F);

            HSSFCellStyle TableHeaderDecCS = hssfworkbook.CreateCellStyle();
            TableHeaderDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.SetFont(Serif8F);

            HSSFCellStyle TableContentCS = hssfworkbook.CreateCellStyle();
            TableContentCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableContentCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableContentCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableContentCS.RightBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableContentCS.TopBorderColor = HSSFColor.BLACK.index;
            TableContentCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountCS = hssfworkbook.CreateCellStyle();
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountDecCS = hssfworkbook.CreateCellStyle();
            TotamAmountDecCS.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            #endregion
            
            Marsel3SimpleDT.Clear();
            Marsel4SimpleDT.Clear();

            Marsel3VitrinaDT.Clear();
            Marsel4VitrinaDT.Clear();

            Marsel3GridsDT.Clear();
            Marsel4GridsDT.Clear();

            PR1SimpleDT.Clear();
            PR1VitrinaDT.Clear();
            PR1GridsDT.Clear();

            if (Marsel3OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(Marsel3OrdersDT, ref Marsel3SimpleDT);
                GetVitrinaFronts(Marsel3OrdersDT, ref Marsel3VitrinaDT);
                GetGridFronts(Marsel3OrdersDT, ref Marsel3GridsDT);
            }
            if (Marsel4OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(Marsel4OrdersDT, ref Marsel4SimpleDT);
                GetVitrinaFronts(Marsel4OrdersDT, ref Marsel4VitrinaDT);
                GetGridFronts(Marsel4OrdersDT, ref Marsel4GridsDT);
            }
            if (PR1OrdersDT.Rows.Count > 0)
            {
                GetSimpleFronts(PR1OrdersDT, ref PR1SimpleDT);
                GetVitrinaFronts(PR1OrdersDT, ref PR1VitrinaDT);
                GetGridFronts(PR1OrdersDT, ref PR1GridsDT);
            }

            if (Marsel3OrdersDT.Rows.Count == 0 && Marsel4OrdersDT.Rows.Count == 0 && PR1OrdersDT.Rows.Count == 0)
                return;

            string DispatchDate = string.Empty;
            if (ClientName == "ЗОВ" || ClientName == "Маркетинг + ЗОВ")
            {
                string FrontsFilterString = "(SELECT MainOrderID FROM FrontsOrders WHERE FactoryID=1 AND (FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel1) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel3) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel4) + 
                    " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Marsel5) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Porto) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Monte) +
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno1) + 
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Shervud) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno2) +
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno4) + " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.pFox) + 
                       " OR FrontsOrders.FrontID=" + Convert.ToInt32(Fronts.Techno5) + "))";
                string SelectCommand = @"SELECT DispatchDate, MegaOrderID FROM MegaOrders
                    WHERE MegaOrderID IN (SELECT MegaOrderID FROM MainOrders
                    WHERE MainOrderID IN" + FrontsFilterString + " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")))";

                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                    ConnectionStrings.ZOVOrdersConnectionString))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0 && DT.Rows[0]["DispatchDate"] != DBNull.Value)
                            DispatchDate = Convert.ToDateTime(DT.Rows[0]["DispatchDate"]).ToString("dd.MM.yyyy");
                    }
                }
            }

            TotalInfoToExcel(ref hssfworkbook,
                CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName);

            StemasToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, false);

            RapidToExcel(ref hssfworkbook,
                CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, false);

            InsetToExcel(ref hssfworkbook,
                CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, false);

            AssemblyToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, false);

            OrdersSummaryInfoToExcel(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, DispatchDate, BatchName, ClientName, false, false, false, false);


            GetMainOrdersSummary(ref hssfworkbook,
               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, false, false, false);

            //string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            //string tempFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);

            string FileName = WorkAssignmentID + " " + BatchName + "  Угол 90";
            string tempFolder = @"\\192.168.1.6\Public\USERS_2016\_ДЕЙСТВУЮЩИЕ\ПРОИЗВОДСТВО\ПРОФИЛЬ\инфиниум\";
            string CurrentMonthName = DateTime.Now.ToString("MMMM");
            tempFolder = Path.Combine(tempFolder, CurrentMonthName);
            if (!(Directory.Exists(tempFolder)))
            {
                Directory.CreateDirectory(tempFolder);
            }
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            sw.Stop();
            System.Diagnostics.Process.Start(file.FullName);
        }
        
        private string GetFileName(string sDestFolder, string ExcelName)
        {
            string sExtension = ".xls";
            string sFileName = ExcelName;

            int j = 1;
            while (FM.FileExist(sDestFolder + "/" + sFileName + sExtension, Configs.FTPType))
            {
                sFileName = ExcelName + "(" + j++ + ")";
            }
            sFileName = sFileName + sExtension;
            return sFileName;
        }

        public void GetMainOrdersSummary(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            int MainOrderID = 0;
            int OrderNumber = 0;
            string ClientName = string.Empty;
            string DispatchDate = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;
            string SelectCommand = string.Empty;
            DataTable DistClientNamesDT = new DataTable();
            DataTable DistMainOrdersDT = new DataTable();
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.ClientID, MegaOrders.OrderNumber, MainOrders.MainOrderID, MainOrders.Notes AS MNotes,
                FrontsOrders.MainOrderID, FrontsOrders.* FROM FrontsOrders
                INNER JOIN infiniu2_catalog.dbo.TechStore AS T ON FrontsOrders.TechnoProfileID = T.TechStoreID AND (SUBSTRING(T.TechStoreName, 1, 2) = 'ПН' OR SUBSTRING(T.TechStoreName, 1, 1) = 'Г') AND FrontsOrders.TechnoProfileID<>-1
                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
                INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID
                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" + string.Join(",", FrontsID.OfType<int>().ToArray()) + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            if (DT.Rows.Count > 0)
            {
                DataTable TempFrontsOrdersDT = DT.Clone();
                using (DataView DV = new DataView(DT))
                {
                    DV.Sort = "ClientName";
                    DistClientNamesDT = DV.ToTable(true, new string[] { "ClientName", "ClientID" });
                }

                for (int i = 0; i < DistClientNamesDT.Rows.Count; i++)
                {
                    ClientName = DistClientNamesDT.Rows[i]["ClientName"].ToString();

                    int RowIndex = 0;
                    HSSFSheet sheet1 = hssfworkbook.CreateSheet(ClientName.Replace("/", "-"));
                    sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                    sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                    sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                    sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                    sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                    sheet1.SetColumnWidth(0, 25 * 256);
                    sheet1.SetColumnWidth(1, 11 * 256);
                    sheet1.SetColumnWidth(2, 25 * 256);
                    sheet1.SetColumnWidth(3, 15 * 256);
                    sheet1.SetColumnWidth(4, 6 * 256);
                    sheet1.SetColumnWidth(5, 6 * 256);
                    sheet1.SetColumnWidth(6, 6 * 256);

                    using (DataView DV = new DataView(DT, "ClientID=" + DistClientNamesDT.Rows[i]["ClientID"], "MainOrderID", DataViewRowState.CurrentRows))
                    {
                        DistMainOrdersDT = DV.ToTable(true, new string[] { "MainOrderID" });
                    }

                    for (int j = 0; j < DistMainOrdersDT.Rows.Count; j++)
                    {
                        MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[j]["MainOrderID"]);
                        DataRow[] Frows = DT.Select("MainOrderID=" + MainOrderID);
                        if (Frows.Count() == 0)
                            continue;
                        OrderNumber = Convert.ToInt32(Frows[0]["OrderNumber"]);
                        Notes = Frows[0]["MNotes"].ToString();
                        OrderName = "№" + OrderNumber.ToString() + "-" + MainOrderID;

                        TempFrontsOrdersDT.Clear();
                        FrontsOrdersDT.Clear();
                        foreach (DataRow row in Frows)
                            TempFrontsOrdersDT.Rows.Add(row.ItemArray);
                        CollectMainOrders(TempFrontsOrdersDT, ref FrontsOrdersDT);

                        MainOrdersSummaryInfoToExcel(ref hssfworkbook, ref sheet1,
                               CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, FrontsOrdersDT,
                               WorkAssignmentID, DispatchDate, BatchName, ClientName, OrderName, Notes, ref RowIndex, IsPR1, IsPR3, IsPRU8);
                        RowIndex++;
                    }

                }
            }

            DistMainOrdersDT.Clear();
            DistClientNamesDT.Clear();
            DT.Clear();

            SelectCommand = @"SELECT infiniu2_zovreference.dbo.Clients.ClientName, MainOrders.ClientID, MainOrders.DocNumber, MegaOrders.DispatchDate, MainOrders.Notes AS MNotes,
                FrontsOrdersID, FrontsOrders.MainOrderID, FrontID, TechnoColorID, InsetTypeID,
                ColorID, InsetColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, FrontConfigID, FrontsOrders.Notes FROM FrontsOrders
                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID
                INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
                INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID
                INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1
                INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID AND Batch.ProfilWorkAssignmentID = " + WorkAssignmentID +
                @" WHERE FrontsOrders.FactoryID=1 AND FrontID IN (" + string.Join(",", FrontsID.OfType<int>().ToArray()) + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            if (DT.Rows.Count > 0)
            {
                DataTable TempFrontsOrdersDT = DT.Clone();
                using (DataView DV = new DataView(DT))
                {
                    DV.Sort = "ClientName";
                    DistClientNamesDT = DV.ToTable(true, new string[] { "ClientName", "ClientID" });
                }

                for (int i = 0; i < DistClientNamesDT.Rows.Count; i++)
                {
                    ClientName = DistClientNamesDT.Rows[i]["ClientName"].ToString();

                    int RowIndex = 0;
                    HSSFSheet sheet1 = hssfworkbook.CreateSheet(ClientName.Replace("/", "-"));
                    sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;
                    sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                    sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                    sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                    sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                    sheet1.SetColumnWidth(0, 25 * 256);
                    sheet1.SetColumnWidth(1, 11 * 256);
                    sheet1.SetColumnWidth(2, 25 * 256);
                    sheet1.SetColumnWidth(3, 15 * 256);
                    sheet1.SetColumnWidth(4, 6 * 256);
                    sheet1.SetColumnWidth(5, 6 * 256);
                    sheet1.SetColumnWidth(6, 6 * 256);

                    using (DataView DV = new DataView(DT, "ClientID=" + DistClientNamesDT.Rows[i]["ClientID"], "MainOrderID", DataViewRowState.CurrentRows))
                    {
                        DistMainOrdersDT = DV.ToTable(true, new string[] { "MainOrderID" });
                    }

                    for (int j = 0; j < DistMainOrdersDT.Rows.Count; j++)
                    {
                        MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[j]["MainOrderID"]);
                        DataRow[] Frows = DT.Select("MainOrderID=" + MainOrderID);
                        if (Frows.Count() == 0)
                            continue;
                        if (Frows[0]["DispatchDate"] != DBNull.Value)
                            DispatchDate = Convert.ToDateTime(Frows[0]["DispatchDate"]).ToString("dd.MM.yyyy");
                        Notes = Frows[0]["MNotes"].ToString();
                        OrderName = Frows[0]["DocNumber"].ToString();

                        TempFrontsOrdersDT.Clear();
                        FrontsOrdersDT.Clear();
                        foreach (DataRow row in Frows)
                            TempFrontsOrdersDT.Rows.Add(row.ItemArray);
                        CollectMainOrders(TempFrontsOrdersDT, ref FrontsOrdersDT);

                        MainOrdersSummaryInfoToExcel(ref hssfworkbook, ref sheet1,
                           CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, FrontsOrdersDT,
                            WorkAssignmentID, DispatchDate, BatchName, ClientName, OrderName, Notes, ref RowIndex, IsPR1, IsPR3, IsPRU8);
                        RowIndex++;
                    }

                }
            }
        }

        public void OrdersSummaryInfoToExcel(ref HSSFWorkbook hssfworkbook,
           HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, bool IsPR1, bool IsPR2, bool IsPR3, bool IsPRU8)
        {
            int RowIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Заказы");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            decimal AllSquare = 0;
            string FrontName = string.Empty;

            if (Marsel3OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(Marsel3OrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryMarsel3Orders(Marsel3OrdersDT, Marsel3SimpleDT, Marsel3VitrinaDT, Marsel3GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                       CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (Marsel4OrdersDT.Rows.Count > 0)
            {
                FrontName = ProfileName(Convert.ToInt32(Marsel4OrdersDT.Rows[0]["FrontConfigID"]), 1);
                SummaryMarsel3Orders(Marsel4OrdersDT, Marsel4SimpleDT, Marsel4VitrinaDT, Marsel4GridsDT, FrontName, ref AllSquare);
                OrdersToExcelSingly(ref hssfworkbook,
                       CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR2, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
            if (PR1OrdersDT.Rows.Count > 0)
            {
                DataTable DT = PR1OrdersDT.Clone();
                DataTable DT1 = PR1SimpleDT.Clone();
                DataTable DT2 = PR1VitrinaDT.Clone();
                DataTable DT3 = PR1GridsDT.Clone();
                DataRow[] rows = PR1OrdersDT.Select("FrontID=3631");
                foreach (DataRow item in rows)
                    DT.Rows.Add(item.ItemArray);
                rows = PR1SimpleDT.Select("FrontID=3631");
                foreach (DataRow item in rows)
                    DT1.Rows.Add(item.ItemArray);
                rows = PR1VitrinaDT.Select("FrontID=3631");
                foreach (DataRow item in rows)
                    DT2.Rows.Add(item.ItemArray);
                rows = PR1GridsDT.Select("FrontID=3631");
                foreach (DataRow item in rows)
                    DT3.Rows.Add(item.ItemArray);
                if (DT.Rows.Count > 0)
                {
                    FrontName = ProfileName(Convert.ToInt32(DT.Rows[0]["FrontConfigID"]), 1);
                    SummaryPR1Orders(DT, DT1, DT2, DT3, FrontName, ref AllSquare);
                    OrdersToExcelSingly(ref hssfworkbook,
                         CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, true, false, IsPR3, IsPRU8);
                    RowIndex++;
                    RowIndex++;
                }
                DT.Clear();
                DT1.Clear();
                DT2.Clear();
                DT3.Clear();
                rows = PR1OrdersDT.Select("FrontID=3632");
                foreach (DataRow item in rows)
                    DT.Rows.Add(item.ItemArray);
                rows = PR1SimpleDT.Select("FrontID=3632");
                foreach (DataRow item in rows)
                    DT1.Rows.Add(item.ItemArray);
                rows = PR1VitrinaDT.Select("FrontID=3632");
                foreach (DataRow item in rows)
                    DT2.Rows.Add(item.ItemArray);
                rows = PR1GridsDT.Select("FrontID=3632");
                foreach (DataRow item in rows)
                    DT3.Rows.Add(item.ItemArray);
                if (DT.Rows.Count > 0)
                {
                    FrontName = ProfileName(Convert.ToInt32(DT.Rows[0]["FrontConfigID"]), 1);
                    SummaryPR1Orders(DT, DT1, DT2, DT3, FrontName, ref AllSquare);
                    OrdersToExcelSingly(ref hssfworkbook,
                         CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, false, true, IsPR3, IsPRU8);
                    RowIndex++;
                    RowIndex++;
                }
            }
            AllSquare = Decimal.Round(AllSquare, 3, MidpointRounding.AwayFromZero);
            OrdersToExcelSingly(ref hssfworkbook, CalibriBold11CS, CalibriBold11CS, ref sheet1, AllSquare, ref RowIndex);
        }

        public void StemasToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            StemasDT.Clear();
            StemasFrontsByHeight(ref StemasDT);
            if (StemasDT.Rows.Count == 0)
                return;

            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Stemas");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 6 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 11 * 256);
            sheet1.SetColumnWidth(5, 11 * 256);
            sheet1.SetColumnWidth(6, 11 * 256);
            sheet1.SetColumnWidth(7, 11 * 256);

            DataTable DT = StemasDT.Copy();
            DataColumn Col1 = new DataColumn();
            DataColumn Col2 = new DataColumn();
            DataColumn Col3 = new DataColumn();
            DataColumn Col4 = new DataColumn();

            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
            Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
            Col4 = DT.Columns.Add("Col4", System.Type.GetType("System.String"));

            if (bImpostMargin)
            {
                Col1.SetOrdinal(5);
                Col2.SetOrdinal(6);
                Col3.SetOrdinal(7);
                Col4.SetOrdinal(8);
            }
            else
            {
                Col1.SetOrdinal(4);
                Col2.SetOrdinal(5);
                Col3.SetOrdinal(6);
                Col4.SetOrdinal(7);
            }
            //DT.Columns["IsBox"].SetOrdinal(8);

            if (DT.Rows.Count > 0)
            {
                Stemas1ToExcelSingly(ref hssfworkbook,
                       CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            StemasDT.Clear();
            StemasFrontsByWidth(ref StemasDT);

            DT.Dispose();
            Col1.Dispose();
            Col2.Dispose();
            Col3.Dispose();
            DT = StemasDT.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
            Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);
            Col2.SetOrdinal(5);
            Col3.SetOrdinal(6);
            DT.Columns["IsBox"].SetOrdinal(7);

            if (DT.Rows.Count > 0)
            {
                Stemas2ToExcelSingly(ref hssfworkbook,
                      CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, ref RowIndex, false, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }
        }

        public void RapidToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("MARTIN");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 6 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 16 * 256);
            sheet1.SetColumnWidth(6, 9 * 256);

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            RapidDT.Clear();
            Martin1Fronts(ref RapidDT);

            if (RapidDT.Rows.Count > 0)
            {
                MartinToExcel1(ref hssfworkbook, ref sheet1, ref RowIndex,
                    CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, RapidDT, WorkAssignmentID, DispatchDate, BatchName, ClientName);
            }
        }

        public void TotalInfoToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            TotalInfoDT.Clear();
            U(ref TotalInfoDT);

            if (TotalInfoDT.Rows.Count == 0)
                return;

            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Общая информация");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 6 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 16 * 256);

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "Сводка по заданию");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            for (int x = 0; x < TotalInfoDT.Rows.Count; x++)
            {
                for (int y = 0; y < TotalInfoDT.Columns.Count; y++)
                {
                    Type t = TotalInfoDT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(TotalInfoDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(TotalInfoDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(TotalInfoDT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                RowIndex++;
            }
        }

        public void MartinToExcel1(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1, ref int RowIndex,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            if (DT.Rows.Count == 0)
                return;

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "MARTIN");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal SticksCount = 0;
            int CType = 0;
            int PType = 0;
            int TotalAmount = 0;
            int AllTotalAmount = 0;
            int Count = 0;
            int Height = 0;

            if (RapidDT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(RapidDT.Rows[0]["ColorType"]);
                PType = Convert.ToInt32(RapidDT.Rows[0]["ProfileType"]);
            }

            for (int x = 0; x < RapidDT.Rows.Count; x++)
            {
                if (RapidDT.Rows[x]["Count"] != DBNull.Value && RapidDT.Rows[x]["Height"] != DBNull.Value)
                {
                    Count = Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                    Height = Convert.ToInt32(RapidDT.Rows[x]["Height"]);
                    SticksCount += (Height + 4) * Count;
                    TotalAmount += Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                    AllTotalAmount += Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                    Count = Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                }

                for (int y = 0; y < RapidDT.Columns.Count; y++)
                {
                    if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                        || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                        continue;
                    Type t = RapidDT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(RapidDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(RapidDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(RapidDT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= RapidDT.Rows.Count - 1 && (PType != Convert.ToInt32(RapidDT.Rows[x + 1]["ProfileType"]) || CType != Convert.ToInt32(RapidDT.Rows[x + 1]["ColorType"])))
                {
                    RowIndex++;
                    for (int y = 0; y < RapidDT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    CType = Convert.ToInt32(RapidDT.Rows[x + 1]["ColorType"]);
                    PType = Convert.ToInt32(RapidDT.Rows[x + 1]["ProfileType"]);
                    Count = 0;
                    Height = 0;
                    SticksCount = 0;
                    TotalAmount = 0;
                }

                if (x == RapidDT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < RapidDT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;
                    for (int y = 0; y < RapidDT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

        }

        public void MartinToExcel2(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1, ref int RowIndex,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "француз<100");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal SticksCount = 0;
            int CType = 0;
            int PType = 0;
            int TotalAmount = 0;
            int AllTotalAmount = 0;
            int Count = 0;
            int Height = 0;

            if (RapidDT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(RapidDT.Rows[0]["ColorType"]);
                PType = Convert.ToInt32(RapidDT.Rows[0]["ProfileType"]);
            }

            for (int x = 0; x < RapidDT.Rows.Count; x++)
            {
                if (RapidDT.Rows[x]["Count"] != DBNull.Value && RapidDT.Rows[x]["Height"] != DBNull.Value)
                {
                    Count = Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                    Height = Convert.ToInt32(RapidDT.Rows[x]["Height"]);
                    SticksCount += (Height + 4) * Count;
                    TotalAmount += Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                    AllTotalAmount += Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                    Count = Convert.ToInt32(RapidDT.Rows[x]["Count"]);
                }

                for (int y = 0; y < RapidDT.Columns.Count; y++)
                {
                    if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                        || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                        continue;
                    Type t = RapidDT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(RapidDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(RapidDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(RapidDT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= RapidDT.Rows.Count - 1 && (PType != Convert.ToInt32(RapidDT.Rows[x + 1]["ProfileType"]) || CType != Convert.ToInt32(RapidDT.Rows[x + 1]["ColorType"])))
                {
                    RowIndex++;
                    for (int y = 0; y < RapidDT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    CType = Convert.ToInt32(RapidDT.Rows[x + 1]["ColorType"]);
                    PType = Convert.ToInt32(RapidDT.Rows[x + 1]["ProfileType"]);
                    Count = 0;
                    Height = 0;
                    SticksCount = 0;
                    TotalAmount = 0;
                }

                if (x == RapidDT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < RapidDT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;
                    for (int y = 0; y < RapidDT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

        }

        public void PR3HandsToExcel(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1, ref int RowIndex,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            if (DT.Rows.Count == 0)
                return;

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
            cell.CellStyle = CalibriBold15CS;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "MARTIN");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "терм");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "vitap");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "шкантование");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int AllTotalAmount = 0;
            int Height = 0;

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value && DT.Rows[x]["Height"] != DBNull.Value)
                {
                    Height = Convert.ToInt32(DT.Rows[x]["Height"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType"
                        || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType"
                            || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

        }

        public void PRU8HandsToExcel(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1, ref int RowIndex,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName)
        {
            if (DT.Rows.Count == 0)
                return;

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
            cell.CellStyle = CalibriBold15CS;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "MARTIN");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int AllTotalAmount = 0;
            int Height = 0;

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value && DT.Rows[x]["Height"] != DBNull.Value)
                {
                    Height = Convert.ToInt32(DT.Rows[x]["Height"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                        || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount" || RapidDT.Columns[y].ColumnName == "Notes")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (RapidDT.Columns[y].ColumnName == "ProfileType" || RapidDT.Columns[y].ColumnName == "ColorType" || RapidDT.Columns[y].ColumnName == "iCount"
                            || RapidDT.Columns[y].ColumnName == "PR1Count" || RapidDT.Columns[y].ColumnName == "PR2Count" || RapidDT.Columns[y].ColumnName == "VitrinaCount" || RapidDT.Columns[y].ColumnName == "Notes")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

        }

        public void InsetToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Вставка");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 11 * 256);
            sheet1.SetColumnWidth(3, 7 * 256);
            sheet1.SetColumnWidth(4, 12 * 256);

            InsetDT.Clear();
            CollectAllInsets(ref InsetDT);

            DataTable DT = InsetDT.Copy();
            DataColumn Col1 = new DataColumn();
            DataColumn Col2 = new DataColumn();

            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            if (InsetDT.Rows.Count > 0)
            {
                AllInsetsToExcelSingly(ref hssfworkbook,
                     CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            InsetDT.Clear();
            CollectInsetsLuxOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();

            if (DT.Rows.Count > 0)
            {
                LuxToExcelSingly(ref hssfworkbook,
                  CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            InsetDT.Clear();
            CollectInsetsMegaOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();

            if (DT.Rows.Count > 0)
            {
                MegaToExcelSingly(ref hssfworkbook,
                      CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            //InsetDT.Clear();
            //CollectInsetsVitrinaOnly(ref InsetDT);

            //DT.Dispose();
            //Col1.Dispose();
            //DT = InsetDT.Copy();

            //if (DT.Rows.Count > 0)
            //{
            //    Lacomat1ToExcelSingly(ref hssfworkbook,
            //          CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3);
            //    RowIndex++;
            //    RowIndex++;
            //}

            InsetDT.Clear();
            CollectInsetsGridsOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            if (InsetDT.Rows.Count > 0)
            {
                GridsToExcelSingly(ref hssfworkbook,
                       CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            InsetDT.Clear();
            CollectInsetsGlassOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();

            if (DT.Rows.Count > 0)
            {
                Lacomat2ToExcelSingly(ref hssfworkbook,
                      CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            InsetDT.Clear();
            CollectInsetsFilenkaOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            if (DT.Rows.Count > 0)
            {
                FilenkaToExcelSingly(ref hssfworkbook,
                        CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            InsetDT.Clear();
            CollectInsetsPressOnly(ref InsetDT);

            DT.Dispose();
            Col1.Dispose();
            DT = InsetDT.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            if (DT.Rows.Count > 0)
            {
                PressToExcelSingly(ref hssfworkbook,
                  CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Вставка", ref RowIndex, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            RowIndex++;
        }

        public void AssemblyToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            DataTable DT1 = AssemblyDT.Clone();
            DataTable DT2 = AssemblyDT.Clone();
            AssemblyDT.Clear();
            DataTable DistFrameColorsDT = DistFrameColorsTable(Marsel3OrdersDT, true);
            FrontType = 1;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel3SimpleDT, ref DT1, FrontType, ColorType, true);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel3VitrinaDT, ref DT2, FrontType, ColorType, true);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel3GridsDT, ref DT1, FrontType, ColorType, true);
            }
            
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Marsel4OrdersDT, true);
            FrontType = 9;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel4SimpleDT, ref DT1, FrontType, ColorType, true);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel4VitrinaDT, ref DT2, FrontType, ColorType, true);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Marsel4GridsDT, ref DT1, FrontType, ColorType, true);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(PR1OrdersDT, true);
            FrontType = 6;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                ColorType++;
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PR1SimpleDT, ref DT1, FrontType, ColorType, false);
                CollectAssemblyVitrina(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PR1VitrinaDT, ref DT2, FrontType, ColorType, false);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), PR1GridsDT, ref DT1, FrontType, ColorType, false);
            }

            int RowIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Зачистка");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 22 * 256);
            sheet1.SetColumnWidth(3, 9 * 256);
            sheet1.SetColumnWidth(4, 6 * 256);
            sheet1.SetColumnWidth(5, 6 * 256);
            sheet1.SetColumnWidth(6, 6 * 256);
            sheet1.SetColumnWidth(7, 13 * 256);
            sheet1.SetColumnWidth(8, 13 * 256);
            sheet1.SetColumnWidth(9, 13 * 256);

            DataTable DT = DT1.Copy();
            DataColumn Col1 = new DataColumn();
            DataColumn Col2 = new DataColumn();
            DataColumn Col3 = new DataColumn();

            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
            Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
            Col1.SetOrdinal(7);
            Col2.SetOrdinal(8);
            Col3.SetOrdinal(9);

            if (DT.Rows.Count > 0)
            {
                Assembly1ToExcelSingly(ref hssfworkbook, ref sheet1,
                   CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Зачистка", ref RowIndex, true, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            DT.Dispose();
            Col1.Dispose();
            Col2.Dispose();
            Col3.Dispose();
            DT = DT2.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
            Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
            Col1.SetOrdinal(7);
            Col2.SetOrdinal(8);
            Col3.SetOrdinal(9);

            if (DT.Rows.Count > 0)
            {
                Assembly1ToExcelSingly(ref hssfworkbook, ref sheet1,
                    CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Зачистка", ref RowIndex, false, IsPR1, IsPR3, IsPRU8);
            }

            RowIndex = 0;
            HSSFSheet sheet2 = hssfworkbook.CreateSheet("Сборка");
            sheet2.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet2.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet2.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet2.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet2.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet2.SetColumnWidth(0, 20 * 256);
            sheet2.SetColumnWidth(1, 11 * 256);
            sheet2.SetColumnWidth(2, 22 * 256);
            sheet2.SetColumnWidth(3, 9 * 256);
            sheet2.SetColumnWidth(4, 6 * 256);
            sheet2.SetColumnWidth(5, 6 * 256);
            sheet2.SetColumnWidth(6, 6 * 256);
            sheet2.SetColumnWidth(7, 13 * 256);
            sheet2.SetColumnWidth(8, 13 * 256);

            DT.Dispose();
            Col1.Dispose();
            DT = DT1.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(7);

            if (DT.Rows.Count > 0)
            {
                Assembly2ToExcelSingly(ref hssfworkbook, ref sheet2,
                    CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Сборка", ref RowIndex, true, IsPR1, IsPR3, IsPRU8);
                RowIndex++;
                RowIndex++;
            }

            DT.Dispose();
            Col1.Dispose();
            DT = DT2.Copy();
            Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(7);

            if (DT.Rows.Count > 0)
            {
                Assembly2ToExcelSingly(ref hssfworkbook, ref sheet2,
                   CalibriBold15CS, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DT, WorkAssignmentID, DispatchDate, BatchName, ClientName, "Сборка", ref RowIndex, false, IsPR1, IsPR3, IsPRU8);
            }
        }

        public void Stemas1ToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }
            int DisplayIndex = 0;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "18");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            if (bImpostMargin)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Смещ. имп.");
                cell.CellStyle = TableHeaderCS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "окл");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "фрез");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "сверл");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "франц");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int CType = 0;
            int PType = 0;

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);
                PType = Convert.ToInt32(DT.Rows[0]["ProfileType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                        continue;
                    if (!bImpostMargin && DT.Columns[y].ColumnName == "ImpostMargin")
                        continue;

                    if (bImpostMargin && DT.Columns[y].ColumnName == "ImpostMargin" && DT.Rows[x][y] != DBNull.Value)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = CalibriBold11CS;
                        continue;
                    }

                    if (Convert.ToBoolean(DT.Rows[x]["IsBox"]))
                    {
                        //HSSFCellStyle GreyCellStyle = hssfworkbook.CreateCellStyle();
                        //GreyCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
                        //GreyCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
                        //GreyCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
                        //GreyCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
                        //GreyCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
                        //GreyCellStyle.RightBorderColor = HSSFColor.BLACK.index;
                        //GreyCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
                        //GreyCellStyle.TopBorderColor = HSSFColor.BLACK.index;
                        //GreyCellStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.BLACK.index;
                        //GreyCellStyle.FillPattern = HSSFCellStyle.THIN_FORWARD_DIAG;
                        //GreyCellStyle.FillBackgroundColor = NPOI.HSSF.Util.HSSFColor.GREY_25_PERCENT.index;

                        //cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        //cell.CellStyle = GreyCellStyle;
                        //cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        //cell.CellStyle = GreyCellStyle;

                    }

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1 && (PType != Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]) || CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"])))
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                            continue;
                        if (!bImpostMargin && DT.Columns[y].ColumnName == "ImpostMargin")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                    PType = Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]);
                    TotalAmount = 0;
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                            continue;
                        if (!bImpostMargin && DT.Columns[y].ColumnName == "ImpostMargin")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                            continue;
                        if (!bImpostMargin && DT.Columns[y].ColumnName == "ImpostMargin")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void Stemas2ToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, ref int RowIndex, bool NeedHeader, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;
            if (NeedHeader)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;
                if (IsPR1)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                    cell.CellStyle = CalibriBold15CS;
                }
                if (IsPR3)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                    cell.CellStyle = CalibriBold15CS;
                }
                if (IsPRU8)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                    cell.CellStyle = CalibriBold15CS;
                }

                if (DispatchDate.Length > 0)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                    cell.CellStyle = CalibriBold11CS;
                }

                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
                cell.CellStyle = Calibri11CS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "16");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "шкантование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "терм");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "франц");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int CType = 0;
            int PType = 0;

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);
                PType = Convert.ToInt32(DT.Rows[0]["ProfileType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ImpostMargin" || DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1 && (PType != Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]) || CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"])))
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ImpostMargin" || DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                    PType = Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]);
                    TotalAmount = 0;
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ImpostMargin" || DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ImpostMargin" || DT.Columns[y].ColumnName == "ProfileType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "IsBox")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void MainOrdersSummaryInfoToExcel(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string OrderName, string Notes, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }
            RowIndex++;
            if (IsPR1)
            {
                RowIndex++;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "Заказы");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, OrderName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Цвет наполнителя-2");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Квадратура");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal TotalSquare = 0;
            int TotalAmount = 0;

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void AllInsetsToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int TotalAmount = 0;
            int AllTotalAmount = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalAmount = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void GridsToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal TotalSquare = 0;
            decimal AllTotalSquare = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        if (DT.Rows[x][y].ToString().IndexOf("3х4") != -1)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(DT.Rows[x][y].ToString());
                            cell.CellStyle = CalibriBold11CS;
                        }
                        else
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(DT.Rows[x][y].ToString());
                            cell.CellStyle = TableHeaderCS;
                        }
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 2, MidpointRounding.AwayFromZero);

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void LuxToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "70 мм");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int TotalAmount = 0;
            int GlassCount = 0;
            int AllTotalAmount = 0;
            int AllGlassCount = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    GlassCount += Convert.ToInt32(DT.Rows[x]["GlassCount"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllGlassCount += Convert.ToInt32(DT.Rows[x]["GlassCount"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        if (GlassCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(GlassCount);
                            cell.CellStyle = TableHeaderCS;
                        }

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalAmount = 0;
                        GlassCount = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        if (GlassCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(GlassCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    if (AllGlassCount > 0)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(AllGlassCount);
                        cell.CellStyle = TableHeaderCS;
                    }

                }
                RowIndex++;
            }
        }

        public void MegaToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "30 мм");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "78 мм");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int TotalAmount = 0;
            int GlassCount = 0;
            int MegaCount = 0;
            int AllTotalAmount = 0;
            int AllGlassCount = 0;
            int AllMegaCount = 0;
            string str = string.Empty;

            int AType = -1;
            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                AType = Convert.ToInt32(DT.Rows[0]["TechnoInsetColorID"]);
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    GlassCount += Convert.ToInt32(DT.Rows[x]["GlassCount"]);
                    if (DT.Rows[x]["MegaCount"] != DBNull.Value)
                        MegaCount += Convert.ToInt32(DT.Rows[x]["MegaCount"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllGlassCount += Convert.ToInt32(DT.Rows[x]["GlassCount"]);
                    if (DT.Rows[x]["MegaCount"] != DBNull.Value)
                        AllMegaCount += Convert.ToInt32(DT.Rows[x]["MegaCount"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]) || AType != Convert.ToInt32(DT.Rows[x + 1]["TechnoInsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        if (GlassCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(GlassCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                        else
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            //continue;
                        }

                        if (MegaCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                            cell.SetCellValue(MegaCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                        else
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            //continue;
                        }

                        AType = Convert.ToInt32(DT.Rows[x + 1]["TechnoInsetColorID"]);
                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalAmount = 0;
                        GlassCount = 0;
                        MegaCount = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        if (GlassCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(GlassCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                        else
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            //continue;
                        }

                        if (MegaCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                            cell.SetCellValue(MegaCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                        else
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            //continue;
                        }
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    if (AllGlassCount > 0)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(AllGlassCount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    else
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (AllMegaCount > 0)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(AllMegaCount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    else
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                RowIndex++;
            }
        }

        public void Lacomat1ToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "78 мм");
            cell.CellStyle = TableHeaderCS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "30 мм");
            //cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int ColumnIndex = 0;
            int TotalAmount = 0;
            int MegaCount = 0;
            int AllTotalAmount = 0;
            int AllGlassCount = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                ColumnIndex = -1;
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    MegaCount += Convert.ToInt32(DT.Rows[x]["MegaCount"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllGlassCount += Convert.ToInt32(DT.Rows[x]["MegaCount"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                         || DT.Columns[y].ColumnName == "GlassCount")
                        continue;
                    ColumnIndex++;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    ColumnIndex = -1;
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                                 || DT.Columns[y].ColumnName == "GlassCount")
                                continue;
                            ColumnIndex++;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        if (MegaCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(MegaCount);
                            cell.CellStyle = TableHeaderCS;
                        }

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalAmount = 0;
                        MegaCount = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    ColumnIndex = -1;
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                                 || DT.Columns[y].ColumnName == "GlassCount")
                                continue;
                            ColumnIndex++;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        if (MegaCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                            cell.SetCellValue(MegaCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                    }
                    RowIndex++;

                    ColumnIndex = -1;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                             || DT.Columns[y].ColumnName == "GlassCount")
                            continue;
                        ColumnIndex++;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    if (AllGlassCount > 0)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(AllGlassCount);
                        cell.CellStyle = TableHeaderCS;
                    }

                }
                RowIndex++;
            }
        }

        public void Lacomat2ToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "30 мм");
            //cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int ColumnIndex = 0;
            int TotalAmount = 0;
            int GlassCount = 0;
            int AllTotalAmount = 0;
            int AllGlassCount = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                ColumnIndex = -1;
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    GlassCount += Convert.ToInt32(DT.Rows[x]["GlassCount"]);
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllGlassCount += Convert.ToInt32(DT.Rows[x]["GlassCount"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                         || DT.Columns[y].ColumnName == "MegaCount" || DT.Columns[y].ColumnName == "Count")
                        continue;
                    ColumnIndex++;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    ColumnIndex = -1;
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                                 || DT.Columns[y].ColumnName == "MegaCount" || DT.Columns[y].ColumnName == "Count")
                                continue;
                            ColumnIndex++;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        //cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        //cell.SetCellValue(GlassCount);
                        //cell.CellStyle = TableHeaderCS;

                        if (GlassCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                            cell.SetCellValue(GlassCount);
                            cell.CellStyle = TableHeaderCS;
                        }

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalAmount = 0;
                        GlassCount = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    ColumnIndex = -1;
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                                 || DT.Columns[y].ColumnName == "MegaCount" || DT.Columns[y].ColumnName == "Count")
                                continue;
                            ColumnIndex++;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        //cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        //cell.SetCellValue(TotalAmount);
                        //cell.CellStyle = TableHeaderCS;

                        if (GlassCount > 0)
                        {
                            cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                            cell.SetCellValue(GlassCount);
                            cell.CellStyle = TableHeaderCS;
                        }
                    }
                    RowIndex++;

                    ColumnIndex = -1;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID"
                             || DT.Columns[y].ColumnName == "MegaCount" || DT.Columns[y].ColumnName == "Count")
                            continue;
                        ColumnIndex++;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    //cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    //cell.SetCellValue(AllTotalAmount);
                    //cell.CellStyle = TableHeaderCS;

                    if (AllGlassCount > 0)
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(AllGlassCount);
                        cell.CellStyle = TableHeaderCS;
                    }

                }
                RowIndex++;
            }
        }

        public void PressToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal TotalSquare = 0;
            decimal AllTotalSquare = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 2, MidpointRounding.AwayFromZero);

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void FilenkaToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string TableName, ref int RowIndex, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }

            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, TableName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal TotalSquare = 0;
            decimal AllTotalSquare = 0;
            string str = string.Empty;

            int CType = -1;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "InsetColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["InsetColorID"]);
            }
            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                        DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["InsetColorID"]);
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                                DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 2, MidpointRounding.AwayFromZero);

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "InsetColorID" || DT.Columns[y].ColumnName == "TechnoInsetColorID" ||
                            DT.Columns[y].ColumnName == "GlassCount" || DT.Columns[y].ColumnName == "MegaCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 2, MidpointRounding.AwayFromZero);

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void Assembly1ToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
           HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string PageName, ref int RowIndex, bool NeedHeader, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            if (NeedHeader)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;
                if (IsPR1)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                    cell.CellStyle = CalibriBold15CS;
                }
                if (IsPR3)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                    cell.CellStyle = CalibriBold15CS;
                }
                if (IsPRU8)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                    cell.CellStyle = CalibriBold15CS;
                }

                if (DispatchDate.Length > 0)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                    cell.CellStyle = CalibriBold11CS;
                }

                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
                cell.CellStyle = Calibri11CS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Цвет наполнителя-2");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Зачистка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, "Запил витрин");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 9, "Обклад витрин");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int FType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            if (DT.Rows.Count > 0)
            {
                FType = Convert.ToInt32(DT.Rows[0]["FrontType"]);
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "Square")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        //cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        //cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        //cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    //cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    //cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    //cell.CellStyle = TableHeaderDecCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    //cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    //cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    //cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void Assembly2ToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, string PageName, ref int RowIndex, bool NeedHeader, bool IsPR1, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            if (NeedHeader)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;
                if (IsPR1)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1 и ПР-2");
                    cell.CellStyle = CalibriBold15CS;
                }
                if (IsPR3)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                    cell.CellStyle = CalibriBold15CS;
                }
                if (IsPRU8)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                    cell.CellStyle = CalibriBold15CS;
                }

                if (DispatchDate.Length > 0)
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                    cell.CellStyle = CalibriBold11CS;
                }

                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
                cell.CellStyle = Calibri11CS;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Цвет наполнителя-2");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Сборка");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int FType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            if (DT.Rows.Count > 0)
            {
                FType = Convert.ToInt32(DT.Rows[0]["FrontType"]);
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "Square")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        //cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        //cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        //cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    //cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    //cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    //cell.CellStyle = TableHeaderDecCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontType" || DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    //cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    //cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    //cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void OrdersToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle CalibriBold15CS, HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, int WorkAssignmentID, string DispatchDate, string BatchName, string ClientName, ref int RowIndex, bool IsPR1, bool IsPR2, bool IsPR3, bool IsPRU8)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            if (IsPR1)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-1");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR2)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-2");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPR3)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПР-3");
                cell.CellStyle = CalibriBold15CS;
            }
            if (IsPRU8)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "ПРУ-8");
                cell.CellStyle = CalibriBold15CS;
            }
            if (DispatchDate.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Отгрузка: " + DispatchDate);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, "Заказы");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 2, ClientName);
            cell.CellStyle = CalibriBold11CS;

            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 2), 1, "УТВЕРЖДАЮ_____________");
            //cell.CellStyle = Calibri11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            //cell.CellStyle = Calibri11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 4), 0, "Клиент:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 4), 1, ClientName);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 5), 0, "Партия:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 5), 1, BatchName);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 3), 0, "Задание №" + WorkAssignmentID.ToString());
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 3), 1, "Заказы");
            //cell.CellStyle = CalibriBold11CS;
            //RowIndex += 6;

            int ColumnIndex = -1;
            string ColumnName = string.Empty;

            for (int x = 0; x < SummOrdersDT.Columns.Count; x++)
            {
                if (SummOrdersDT.Columns[x].ColumnName == "Height" || SummOrdersDT.Columns[x].ColumnName == "Width"
                     || SummOrdersDT.Columns[x].ColumnName == "PR1Count" || SummOrdersDT.Columns[x].ColumnName == "PR2Count" || SummOrdersDT.Columns[x].ColumnName == "VitrinaCount")
                    continue;
                ColumnIndex++;
                ColumnName = SummOrdersDT.Columns[x].ColumnName;
                if (Contains(ColumnName, "_", StringComparison.OrdinalIgnoreCase))
                {
                    ColumnName = ColumnName.Substring(0, ColumnName.Length - 2);
                }
                if (ColumnName == "Sizes")
                {
                    ColumnName = "Размер";
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), ColumnIndex, ColumnName);
                    cell.CellStyle = TableHeaderCS;
                    //sheet1.SetColumnWidth(ColumnIndex, 12 * 256);
                    continue;
                }
                if (ColumnName == "TotalAmount")
                {
                    ColumnName = "Итого";
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), ColumnIndex, ColumnName);
                    cell.CellStyle = TableHeaderCS;
                    //sheet1.SetColumnWidth(ColumnIndex, 8 * 256);
                    continue;
                }
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), ColumnIndex, ColumnName);
                cell.CellStyle = TableHeaderCS;
                sheet1.SetColumnWidth(ColumnIndex, 19 * 256);
            }
            RowIndex++;
            TableHeaderCS.Alignment = HSSFCellStyle.ALIGN_LEFT;
            TableHeaderDecCS.Alignment = HSSFCellStyle.ALIGN_LEFT;

            HSSFFont FirstColF = hssfworkbook.CreateFont();
            FirstColF.FontHeightInPoints = 12;
            FirstColF.FontName = "MS Sans Serif";

            HSSFCellStyle FirstColCS = hssfworkbook.CreateCellStyle();
            FirstColCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            FirstColCS.LeftBorderColor = HSSFColor.BLACK.index;
            FirstColCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            FirstColCS.RightBorderColor = HSSFColor.BLACK.index;
            FirstColCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            FirstColCS.TopBorderColor = HSSFColor.BLACK.index;
            FirstColCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            FirstColCS.BottomBorderColor = HSSFColor.BLACK.index;
            FirstColCS.SetFont(FirstColF);
            for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
            {
                ColumnIndex = -1;
                for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
                {
                    if (SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width"
                     || SummOrdersDT.Columns[y].ColumnName == "PR1Count" || SummOrdersDT.Columns[y].ColumnName == "PR2Count" || SummOrdersDT.Columns[y].ColumnName == "VitrinaCount")
                        continue;
                    Type t = SummOrdersDT.Rows[x][y].GetType();

                    ColumnIndex++;

                    if (x == SummOrdersDT.Rows.Count - 1 && int.TryParse(SummOrdersDT.Rows[x][y].ToString(), out int IntValue))
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(IntValue);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (x == SummOrdersDT.Rows.Count - 2 && double.TryParse(SummOrdersDT.Rows[x][y].ToString(), out double DecValue))
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(DecValue);
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }

                    if (int.TryParse(SummOrdersDT.Rows[x][y].ToString(), out IntValue))
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(IntValue);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(SummOrdersDT.Rows[x][y].ToString());
                        if (ColumnIndex == 0)
                            cell.CellStyle = FirstColCS;
                        else
                            cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
        }

        public void OrdersToExcelSingly(ref HSSFWorkbook hssfworkbook, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, decimal AllSquare, ref int RowIndex)
        {
            TableHeaderCS.Alignment = HSSFCellStyle.ALIGN_LEFT;
            TableHeaderDecCS.Alignment = HSSFCellStyle.ALIGN_LEFT;

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "ИТОГО:");
            cell.CellStyle = TableHeaderCS;

            cell = sheet1.CreateRow(RowIndex).CreateCell(1);
            cell.SetCellValue(Convert.ToDouble(AllSquare));
            cell.CellStyle = TableHeaderDecCS;
        }

        private bool Contains(string source, string toCheck, StringComparison comp)
        {
            return source.IndexOf(toCheck, comp) >= 0;
        }
    }

    public class DecorAssignments
    {
        FileManager FM = new FileManager();
        DateTime CurrentDate;

        DataTable DecorDT;
        public DataTable TechStoreDataTable = null;
        public DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        DataTable BagetWithAngleAssemblyDT;
        DataTable DecorAssemblyDT;

        DataTable FrameColorsDataTable;
        DataTable DecorParametersDT;

        DataTable BagetWithAngelOrdersDT;
        DataTable NotArchDecorOrdersDT;
        DataTable ArchDecorOrdersDT;
        DataTable GridsDecorOrdersDT;

        public DecorAssignments()
        {

        }

        public void Initialize()
        {
            Create();
            Fill();
        }

        private void Create()
        {
            DecorParametersDT = new DataTable();
            DecorDT = new DataTable();
            TechStoreDataTable = new DataTable();
            PatinaDataTable = new DataTable();

            BagetWithAngelOrdersDT = new DataTable();
            NotArchDecorOrdersDT = new DataTable();
            ArchDecorOrdersDT = new DataTable();
            GridsDecorOrdersDT = new DataTable();

            DecorAssemblyDT = new DataTable();
            DecorAssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("DecorID", Type.GetType("System.Int32")));

            BagetWithAngleAssemblyDT = new DataTable();
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("LeftAngle", Type.GetType("System.Decimal")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("RightAngle", Type.GetType("System.Decimal")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("DecorID", Type.GetType("System.Int32")));
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable = new DataTable();
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = FrameColorsDataTable.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = FrameColorsDataTable.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            FrameColorsDataTable.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void Fill()
        {
            DecorDT = new DataTable();
            string SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID AND Enabled = 1 ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore",
            //    ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(TechStoreDataTable);
            //}
            TechStoreDataTable = TablesManager.TechStoreDataTable;

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT * FROM DecorParameters",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorParametersDT);
            }
            
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, LeftAngle, RightAngle, Count, Notes FROM DecorOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(BagetWithAngelOrdersDT);
                BagetWithAngelOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(NotArchDecorOrdersDT);
                NotArchDecorOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
                ArchDecorOrdersDT = NotArchDecorOrdersDT.Clone();
                GridsDecorOrdersDT = NotArchDecorOrdersDT.Clone();
            }
        }

        public bool HasParameter(int ProductID, String Parameter)
        {
            DataRow[] Rows = DecorParametersDT.Select("ProductID = " + ProductID);

            return Convert.ToBoolean(Rows[0][Parameter]);
        }

        public string GetMarketClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_marketingorders.dbo.MegaOrders" +
                    " WHERE MegaOrderID=(SELECT TOP 1 MegaOrderID FROM infiniu2_marketingorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + "))",
                    ConnectionStrings.MarketingReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        public string GetZOVClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_zovorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + ")",
                    ConnectionStrings.ZOVReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        private string GetOrderName(int MainOrderID, int GroupType)
        {
            string name = string.Empty;
            string ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            if (GroupType == 1)
                ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            SelectCommand = @"SELECT MegaBatchID, BatchID FROM Batch WHERE BatchID IN (SELECT BatchID FROM BatchDetails WHERE MainOrderID = " + MainOrderID + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                if (DA.Fill(DT) > 0 && DT.Rows[0]["MegaBatchID"] != DBNull.Value && DT.Rows[0]["BatchID"] != DBNull.Value)
                    name = DT.Rows[0]["MegaBatchID"].ToString() + ", " + DT.Rows[0]["BatchID"] + ", " + MainOrderID;
            }
            return name;
        }

        private string GetDecorName(int ID)
        {
            DataRow[] rows = DecorDT.Select("DecorID=" + ID);
            if (rows.Count() > 0)
                return rows[0]["Name"].ToString();
            else
                return string.Empty;
        }

        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
                ColorName = Rows[0]["ColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string FrontType = string.Empty;
            try
            {
                DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
                FrontType = Rows[0]["PatinaName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return FrontType;
        }

        private void GetBagetWithAngleOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, LeftAngle, RightAngle, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID IN (1) AND (LeftAngle<>0 OR RightAngle<>0) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, LeftAngle, RightAngle, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID IN (1) AND (LeftAngle<>0 OR RightAngle<>0) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetNotArchDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND NOT (ProductID IN (1) AND (LeftAngle<>0 OR RightAngle<>0)) AND ProductID NOT IN (31, 4, 18, 32, 10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND NOT (ProductID IN (1) AND (LeftAngle<>0 OR RightAngle<>0)) AND ProductID NOT IN (31, 4, 18, 32, 10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetArchDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID IN (31, 4, 18, 32) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID IN (31, 4, 18, 32) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetGridsDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID IN (10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID IN (10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private DataTable DistMainOrdersTable(DataTable SourceDT, bool OrderASC)
        {
            int MainOrderID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("MainOrderID", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "MainOrderID ASC";
                else
                    DV.Sort = "MainOrderID DESC";
                DT = DV.ToTable(true, new string[] { "MainOrderID", "GroupType" });
            }
            return DT;
        }

        private DataTable DistMainOrdersTable(DataTable SourceDT1, DataTable SourceDT2, DataTable SourceDT3, DataTable SourceDT4, DataTable SourceDT5, 
            DataTable SourceDT6, DataTable SourceDT7, DataTable SourceDT8, DataTable SourceDT9, bool OrderASC)
        {
            int MainOrderID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("MainOrderID", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT1.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT2.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT3.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT4.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT5.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT6.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT7.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT8.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT9.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "MainOrderID ASC";
                else
                    DV.Sort = "MainOrderID DESC";
                DT = DV.ToTable(true, new string[] { "MainOrderID", "GroupType" });
            }
            return DT;
        }

        private void AssemblyBagetWithAngleCollect(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "DecorID", "ColorID", "PatinaID", "Length", "Height", "Width", "LeftAngle", "RightAngle", "Notes" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                int Count = 0;
                string filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                    " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) +
                    " AND LeftAngle=" + Convert.ToInt32(DT1.Rows[i]["LeftAngle"]) +
                    " AND RightAngle=" + Convert.ToInt32(DT1.Rows[i]["RightAngle"]) + 
                    " AND (Notes='' OR Notes IS NULL)";
                if (DT1.Rows[i]["Notes"] != DBNull.Value && DT1.Rows[i]["Notes"].ToString().Length > 0)
                {
                    filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                      " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                      " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) +
                    " AND LeftAngle=" + Convert.ToInt32(DT1.Rows[i]["LeftAngle"]) +
                    " AND RightAngle=" + Convert.ToInt32(DT1.Rows[i]["RightAngle"]) + 
                    " AND Notes='" + DT1.Rows[i]["Notes"] + "'";
                }
                DataRow[] rows = SourceDT.Select(filter);
                if (rows.Count() == 0)
                    continue;

                foreach (DataRow item in rows)
                    Count += Convert.ToInt32(item["Count"]);

                string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                    Color += " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["DecorID"] = Convert.ToInt32(DT1.Rows[i]["DecorID"]);
                NewRow["Name"] = GetDecorName(Convert.ToInt32(DT1.Rows[i]["DecorID"]));
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "ColorID"))
                    NewRow["Color"] = Color;
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                //    NewRow["Height"] = DT1.Rows[i]["Height"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                //    NewRow["Height"] = DT1.Rows[i]["Length"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width"))
                //    NewRow["Width"] = DT1.Rows[i]["Width"];

                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                {
                    if (Convert.ToInt32(DT1.Rows[i]["Height"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Height"];
                    if (Convert.ToInt32(DT1.Rows[i]["Length"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Length"];
                }
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                {
                    if (Convert.ToInt32(DT1.Rows[i]["Length"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Length"];
                    if (Convert.ToInt32(DT1.Rows[i]["Height"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Height"];
                }
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width") && Convert.ToInt32(DT1.Rows[i]["Width"]) != -1)
                    NewRow["Width"] = DT1.Rows[i]["Width"];

                NewRow["Count"] = Count;
                NewRow["LeftAngle"] = DT1.Rows[i]["LeftAngle"];
                NewRow["RightAngle"] = DT1.Rows[i]["RightAngle"];
                NewRow["Notes"] = DT1.Rows[i]["Notes"];
                DestinationDT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Color, Height, Width, LeftAngle, RightAngle";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }
        }

        private void AssemblyDecorCollect(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "DecorID", "ColorID", "PatinaID", "Length", "Height", "Width", "Notes" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                int Count = 0;
                string filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                    " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                if (DT1.Rows[i]["Notes"] != DBNull.Value && DT1.Rows[i]["Notes"].ToString().Length > 0)
                {
                    filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                      " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                      " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) + " AND Notes='" + DT1.Rows[i]["Notes"] + "'";
                }
                DataRow[] rows = SourceDT.Select(filter);
                if (rows.Count() == 0)
                    continue;

                foreach (DataRow item in rows)
                    Count += Convert.ToInt32(item["Count"]);

                string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                    Color += " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["DecorID"] = Convert.ToInt32(DT1.Rows[i]["DecorID"]);
                NewRow["Name"] = GetDecorName(Convert.ToInt32(DT1.Rows[i]["DecorID"]));
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "ColorID"))
                    NewRow["Color"] = Color;
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                //    NewRow["Height"] = DT1.Rows[i]["Height"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                //    NewRow["Height"] = DT1.Rows[i]["Length"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width"))
                //    NewRow["Width"] = DT1.Rows[i]["Width"];

                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                {
                    if (Convert.ToInt32(DT1.Rows[i]["Height"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Height"];
                    if (Convert.ToInt32(DT1.Rows[i]["Length"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Length"];
                }
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                {
                    if (Convert.ToInt32(DT1.Rows[i]["Length"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Length"];
                    if (Convert.ToInt32(DT1.Rows[i]["Height"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Height"];
                }
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width") && Convert.ToInt32(DT1.Rows[i]["Width"]) != -1)
                    NewRow["Width"] = DT1.Rows[i]["Width"];

                NewRow["Count"] = Count;
                NewRow["Notes"] = DT1.Rows[i]["Notes"];
                DestinationDT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Color, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }
        }

        public void ClearOrders()
        {
            BagetWithAngelOrdersDT.Clear();
            NotArchDecorOrdersDT.Clear();
            ArchDecorOrdersDT.Clear();
            GridsDecorOrdersDT.Clear();
        }

        public bool GetOrders(int WorkAssignmentID, int FactoryID)
        {
            GetNotArchDecorOrders(ref NotArchDecorOrdersDT, WorkAssignmentID, FactoryID);
            GetBagetWithAngleOrders(ref BagetWithAngelOrdersDT, WorkAssignmentID, FactoryID);
            GetArchDecorOrders(ref ArchDecorOrdersDT, WorkAssignmentID, FactoryID);
            GetGridsDecorOrders(ref GridsDecorOrdersDT, WorkAssignmentID, FactoryID);

            if (BagetWithAngelOrdersDT.Rows.Count == 0 && NotArchDecorOrdersDT.Rows.Count == 0 && ArchDecorOrdersDT.Rows.Count == 0 && GridsDecorOrdersDT.Rows.Count == 0)
                return false;
            else
                return true;
            
        }
        
        public void GetCurrentDate()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.UsersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    CurrentDate = Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        public void CreateExcel(int WorkAssignmentID, string ClientName, string BatchName, ref string sSourceFileName)
        {
            GetCurrentDate();

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont Calibri11F = hssfworkbook.CreateFont();
            Calibri11F.FontHeightInPoints = 11;
            Calibri11F.FontName = "Calibri";

            HSSFFont CalibriBold11F = hssfworkbook.CreateFont();
            CalibriBold11F.FontHeightInPoints = 11;
            CalibriBold11F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold11F.FontName = "Calibri";

            HSSFFont Serif8F = hssfworkbook.CreateFont();
            Serif8F.FontHeightInPoints = 8;
            Serif8F.FontName = "MS Sans Serif";

            HSSFFont Serif10F = hssfworkbook.CreateFont();
            Serif10F.FontHeightInPoints = 10;
            Serif10F.FontName = "MS Sans Serif";

            HSSFFont SerifBold10F = hssfworkbook.CreateFont();
            SerifBold10F.FontHeightInPoints = 10;
            SerifBold10F.FontName = "MS Sans Serif";
            SerifBold10F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;

            HSSFCellStyle Calibri11CS = hssfworkbook.CreateCellStyle();
            Calibri11CS.SetFont(Calibri11F);

            HSSFCellStyle CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.SetFont(CalibriBold11F);

            HSSFCellStyle TableHeaderCS = hssfworkbook.CreateCellStyle();
            TableHeaderCS.Alignment = HSSFCellStyle.ALIGN_LEFT;
            TableHeaderCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.SetFont(Serif8F);

            HSSFCellStyle TableHeaderDecCS = hssfworkbook.CreateCellStyle();
            TableHeaderDecCS.Alignment = HSSFCellStyle.ALIGN_LEFT;
            TableHeaderDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.SetFont(Serif8F);

            HSSFCellStyle WorkerColumnCS = hssfworkbook.CreateCellStyle();
            WorkerColumnCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            WorkerColumnCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.BottomBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.LeftBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.RightBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.TopBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.SetFont(Serif10F);

            HSSFCellStyle TableContentCS = hssfworkbook.CreateCellStyle();
            TableContentCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableContentCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableContentCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableContentCS.RightBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableContentCS.TopBorderColor = HSSFColor.BLACK.index;
            TableContentCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountCS = hssfworkbook.CreateCellStyle();
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountDecCS = hssfworkbook.CreateCellStyle();
            TotamAmountDecCS.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            #endregion
            
            BagetWithAngleAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            NotArchDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            ArchDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            GridsDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);
            
            //string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");

            //string tempFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
            string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = @"\\192.168.1.6\Public\ТПС\Infinium\Задания\";
            string tempFolder = @"\\192.168.1.6\Public\USERS_2016\_ДЕЙСТВУЮЩИЕ\ПРОИЗВОДСТВО\ТПС\инфиниум\";
            string CurrentMonthName = DateTime.Now.ToString("MMMM");
            tempFolder = Path.Combine(tempFolder, CurrentMonthName);
            if (!(Directory.Exists(tempFolder)))
            {
                Directory.CreateDirectory(tempFolder);
            }
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }
            
            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            sw.Stop();
            System.Diagnostics.Process.Start(file.FullName);

            //string sSourceFolder = System.Environment.GetEnvironmentVariable("TEMP");
            //string sFolderPath = "Общие файлы/Производство/Задания в работу";
            //string sDestFolder = Configs.DocumentsPath + sFolderPath;
            //sSourceFileName = GetFileName(sDestFolder, BatchName);

            //FileInfo file = new FileInfo(sSourceFolder + @"\" + sSourceFileName);
            //FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            //hssfworkbook.Write(NewFile);
            //NewFile.Close();

        }

        private string GetFileName(string sDestFolder, string ExcelName)
        {
            string sExtension = ".xls";
            string sFileName = ExcelName;

            int j = 1;
            while (FM.FileExist(sDestFolder + "/" + sFileName + sExtension, Configs.FTPType))
            {
                sFileName = ExcelName + "(" + j++ + ")";
            }
            sFileName = sFileName + sExtension;
            return sFileName;
        }

        private void BagetWithAngleAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (BagetWithAngelOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(BagetWithAngelOrdersDT, true);
            DataTable DT = BagetWithAngelOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Не арки ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);
                sheet1.SetColumnWidth(6, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    BagetWithAngleAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = BagetWithAngelOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyBagetWithAngleCollect(DT, ref BagetWithAngleAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (BagetWithAngleAssemblyDT.Rows.Count > 0)
                    {
                        BagetWithAngleAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, BagetWithAngleAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        BagetWithAngleAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, BagetWithAngleAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Багет с запилом Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);
                sheet1.SetColumnWidth(6, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    BagetWithAngleAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = BagetWithAngelOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyBagetWithAngleCollect(DT, ref BagetWithAngleAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (BagetWithAngleAssemblyDT.Rows.Count > 0)
                    {
                        BagetWithAngleAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, BagetWithAngleAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        BagetWithAngleAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, BagetWithAngleAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        private void NotArchDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (NotArchDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(NotArchDecorOrdersDT, true);
            DataTable DT = NotArchDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Не арки ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = NotArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Не арки Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = NotArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void BagetWithAngleAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Л. угол");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "П. угол");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }
            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void NotArchDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }
            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        private void ArchDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (ArchDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(ArchDecorOrdersDT, true);
            DataTable DT = ArchDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Арки ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = ArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Арки Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = ArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void ArchDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        private void GridsDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (GridsDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(GridsDecorOrdersDT, true);
            DataTable DT = GridsDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки1 ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = GridsDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки1 Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = GridsDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void GridsDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

    }

    public class TPSAngle45Assignments : IAllFrontParameterName
    {
        ArrayList FrontsID;
        FileManager FM = new FileManager();
        DateTime CurrentDate;

        int FrontType = 0;

        DataTable AssemblyDT;
        DataTable DeyingDT;

        DataTable DecorDT;
        public DataTable TechStoreDataTable = null;
        public DataTable FrontsDataTable = null;
        public DataTable FrameColorsDataTable = null;
        public DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        public DataTable InsetTypesDataTable = null;
        public DataTable InsetColorsDataTable = null;
        DataTable GashDT;
        DataTable RemovingQuarterDT;
        DataTable RemovingBoxesDT;
        DataTable GrooveGridsDT;
        DataTable TrimmingDT;
        DataTable InsetDT;
        DataTable SummOrdersDT;
        DataTable CurvedAssemblyDT;
        DataTable BagetWithAngleAssemblyDT;
        DataTable DecorAssemblyDT;

        DataTable FilenkaBoxesDT;
        DataTable FilenkaSimpleDT;
        DataTable DakotaFilenkaSimpleDT;

        DataTable ProfileNamesDT;
        DataTable DecorParametersDT;
        DataTable InsetTypeNamesDT;

        DataTable LorenzoVitrinaDT;
        DataTable LorenzoBoxesDT;
        DataTable LorenzoGridsDT;
        DataTable LorenzoSimpleDT;
        DataTable LorenzoOrdersDT;

        DataTable ElegantVitrinaDT;
        DataTable ElegantBoxesDT;
        DataTable ElegantGridsDT;
        DataTable ElegantSimpleDT;
        DataTable ElegantOrdersDT;

        DataTable KansasVitrinaDT;
        DataTable KansasBoxesDT;
        DataTable KansasGridsDT;
        DataTable KansasSimpleDT;
        DataTable KansasOrdersDT;

        DataTable DakotaVitrinaDT;
        DataTable DakotaBoxesDT;
        DataTable DakotaGridsDT;
        DataTable DakotaSimpleDT;
        DataTable DakotaOrdersDT;

        DataTable SofiaVitrinaDT;
        DataTable SofiaBoxesDT;
        DataTable SofiaGridsDT;
        DataTable SofiaSimpleDT;
        DataTable SofiaOrdersDT;

        DataTable Turin1VitrinaDT;
        DataTable Turin1BoxesDT;
        DataTable Turin1GridsDT;
        DataTable Turin1SimpleDT;
        DataTable Turin1OrdersDT;

        DataTable Turin1_1VitrinaDT;
        DataTable Turin1_1BoxesDT;
        DataTable Turin1_1GridsDT;
        DataTable Turin1_1SimpleDT;
        DataTable Turin1_1OrdersDT;

        DataTable Turin3VitrinaDT;
        DataTable Turin3BoxesDT;
        DataTable Turin3GridsDT;
        DataTable Turin3SimpleDT;
        DataTable Turin3OrdersDT;

        DataTable InfinitiVitrinaDT;
        DataTable InfinitiBoxesDT;
        DataTable InfinitiGridsDT;
        DataTable InfinitiSimpleDT;
        DataTable InfinitiOrdersDT;

        DataTable LeonVitrinaDT;
        DataTable LeonBoxesDT;
        DataTable LeonGridsDT;
        DataTable LeonSimpleDT;
        DataTable LeonOrdersDT;

        DataTable Turin1RemovingBoxesDT;
        DataTable Turin3RemovingBoxesDT;

        DataTable DakotaAppliqueDT;
        DataTable SofiaAppliqueDT;

        DataTable LorenzoCurvedOrdersDT;
        DataTable ElegantCurvedOrdersDT;
        DataTable KansasCurvedOrdersDT;
        DataTable SofiaCurvedOrdersDT;
        DataTable DakotaCurvedOrdersDT;
        DataTable Turin1CurvedOrdersDT;
        DataTable Turin1_1CurvedOrdersDT;
        DataTable Turin3CurvedOrdersDT;
        DataTable InfinitiCurvedOrdersDT;

        DataTable BagetWithAngelOrdersDT;
        DataTable NotArchDecorOrdersDT;
        DataTable ArchDecorOrdersDT;
        DataTable GridsDecorOrdersDT;

        public TPSAngle45Assignments()
        {

        }

        public void Initialize()
        {
            Create();
            Fill();
        }

        private void Create()
        {
            FrontsID = new ArrayList();
            ProfileNamesDT = new DataTable();
            InsetTypeNamesDT = new DataTable();
            DecorParametersDT = new DataTable();
            DecorDT = new DataTable();
            TechStoreDataTable = new DataTable();
            FrontsDataTable = new DataTable();
            FrameColorsDataTable = new DataTable();
            PatinaDataTable = new DataTable();
            InsetTypesDataTable = new DataTable();
            InsetColorsDataTable = new DataTable();
            SummOrdersDT = new DataTable();

            LorenzoBoxesDT = new DataTable();
            LorenzoGridsDT = new DataTable();
            LorenzoSimpleDT = new DataTable();
            LorenzoOrdersDT = new DataTable();

            ElegantBoxesDT = new DataTable();
            ElegantGridsDT = new DataTable();
            ElegantSimpleDT = new DataTable();
            ElegantOrdersDT = new DataTable();

            KansasBoxesDT = new DataTable();
            KansasGridsDT = new DataTable();
            KansasSimpleDT = new DataTable();
            KansasOrdersDT = new DataTable();

            DakotaBoxesDT = new DataTable();
            DakotaGridsDT = new DataTable();
            DakotaSimpleDT = new DataTable();
            DakotaOrdersDT = new DataTable();

            SofiaBoxesDT = new DataTable();
            SofiaGridsDT = new DataTable();
            DakotaAppliqueDT = new DataTable();
            SofiaAppliqueDT = new DataTable();
            SofiaSimpleDT = new DataTable();
            SofiaOrdersDT = new DataTable();

            Turin1BoxesDT = new DataTable();
            Turin1GridsDT = new DataTable();
            Turin1SimpleDT = new DataTable();
            Turin1OrdersDT = new DataTable();

            Turin1_1BoxesDT = new DataTable();
            Turin1_1GridsDT = new DataTable();
            Turin1_1SimpleDT = new DataTable();
            Turin1_1OrdersDT = new DataTable();

            Turin3BoxesDT = new DataTable();
            Turin3GridsDT = new DataTable();
            Turin3SimpleDT = new DataTable();
            Turin3OrdersDT = new DataTable();

            LeonBoxesDT = new DataTable();
            LeonGridsDT = new DataTable();
            LeonSimpleDT = new DataTable();
            LeonOrdersDT = new DataTable();

            InfinitiBoxesDT = new DataTable();
            InfinitiGridsDT = new DataTable();
            InfinitiSimpleDT = new DataTable();

            LorenzoCurvedOrdersDT = new DataTable();
            ElegantCurvedOrdersDT = new DataTable();
            KansasCurvedOrdersDT = new DataTable();
            SofiaCurvedOrdersDT = new DataTable();
            DakotaCurvedOrdersDT = new DataTable();
            Turin1CurvedOrdersDT = new DataTable();
            Turin1_1CurvedOrdersDT = new DataTable();
            Turin3CurvedOrdersDT = new DataTable();
            InfinitiCurvedOrdersDT = new DataTable();

            BagetWithAngelOrdersDT = new DataTable();
            NotArchDecorOrdersDT = new DataTable();
            ArchDecorOrdersDT = new DataTable();
            GridsDecorOrdersDT = new DataTable();

            GashDT = new DataTable();
            GashDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            GashDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            GashDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            GashDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            GashDT.Columns.Add(new DataColumn("VitrinaNotes", Type.GetType("System.String")));
            GashDT.Columns.Add(new DataColumn("GridNotes", Type.GetType("System.String")));
            GashDT.Columns.Add(new DataColumn("FrontID", Type.GetType("System.Int32")));
            GashDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));
            GashDT.Columns.Add(new DataColumn("ProfileType", Type.GetType("System.Int32")));
            GashDT.Columns.Add(new DataColumn("VitrinaCount", Type.GetType("System.Int32")));
            GashDT.Columns.Add(new DataColumn("GridCount", Type.GetType("System.Int32")));

            RemovingQuarterDT = new DataTable();
            RemovingQuarterDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            RemovingQuarterDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            RemovingQuarterDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            RemovingQuarterDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            RemovingQuarterDT.Columns.Add(new DataColumn("FrontID", Type.GetType("System.Int32")));
            RemovingQuarterDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));

            RemovingBoxesDT = new DataTable();
            RemovingBoxesDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            RemovingBoxesDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            RemovingBoxesDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            RemovingBoxesDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            RemovingBoxesDT.Columns.Add(new DataColumn("FrontID", Type.GetType("System.Int32")));
            RemovingBoxesDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));

            GrooveGridsDT = new DataTable();
            GrooveGridsDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            GrooveGridsDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            GrooveGridsDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            GrooveGridsDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            GrooveGridsDT.Columns.Add(new DataColumn("FrontID", Type.GetType("System.Int32")));
            GrooveGridsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));

            TrimmingDT = new DataTable();
            TrimmingDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            TrimmingDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            TrimmingDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            TrimmingDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            TrimmingDT.Columns.Add(new DataColumn("VitrinaNotes", Type.GetType("System.String")));
            TrimmingDT.Columns.Add(new DataColumn("GridNotes", Type.GetType("System.String")));
            TrimmingDT.Columns.Add(new DataColumn("FrontID", Type.GetType("System.Int32")));
            TrimmingDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));
            TrimmingDT.Columns.Add(new DataColumn("ProfileType", Type.GetType("System.Int32")));
            TrimmingDT.Columns.Add(new DataColumn("VitrinaCount", Type.GetType("System.Int32")));
            TrimmingDT.Columns.Add(new DataColumn("GridCount", Type.GetType("System.Int32")));

            InsetDT = new DataTable();
            InsetDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            InsetDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            FilenkaBoxesDT = new DataTable();
            FilenkaBoxesDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            FilenkaBoxesDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            FilenkaBoxesDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            FilenkaBoxesDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            FilenkaBoxesDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            FilenkaBoxesDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            FilenkaSimpleDT = new DataTable();
            FilenkaSimpleDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            FilenkaSimpleDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            FilenkaSimpleDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            FilenkaSimpleDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            FilenkaSimpleDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            FilenkaSimpleDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            DakotaFilenkaSimpleDT = new DataTable();
            DakotaFilenkaSimpleDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            DakotaFilenkaSimpleDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DakotaFilenkaSimpleDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            DakotaFilenkaSimpleDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            DakotaFilenkaSimpleDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            DakotaFilenkaSimpleDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            AssemblyDT = new DataTable();
            AssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            AssemblyDT.Columns.Add(new DataColumn("Worker", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("FrontType", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            CurvedAssemblyDT = new DataTable();
            CurvedAssemblyDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("InsetType", Type.GetType("System.String")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("FrontID", Type.GetType("System.Int32")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("PatinaID", Type.GetType("System.Int32")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("InsetTypeID", Type.GetType("System.Int32")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("InsetColorID", Type.GetType("System.Int32")));

            DecorAssemblyDT = new DataTable();
            DecorAssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("DecorID", Type.GetType("System.Int32")));

            BagetWithAngleAssemblyDT = new DataTable();
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("LeftAngle", Type.GetType("System.Decimal")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("RightAngle", Type.GetType("System.Decimal")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            BagetWithAngleAssemblyDT.Columns.Add(new DataColumn("DecorID", Type.GetType("System.Int32")));

            DeyingDT = new DataTable();
            DeyingDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            DeyingDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            DeyingDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            DeyingDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DeyingDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            DeyingDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            DeyingDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            DeyingDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            DeyingDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable = new DataTable();
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = FrameColorsDataTable.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = FrameColorsDataTable.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            FrameColorsDataTable.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void GetInsetColorsDT()
        {
            InsetColorsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InsetColors.InsetColorID, InsetColors.GroupID, infiniu2_catalog.dbo.TechStore.TechStoreName AS InsetColorName FROM InsetColors" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON InsetColors.InsetColorID = infiniu2_catalog.dbo.TechStore.TechStoreID ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = -1;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "-";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = 0;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "на выбор";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }

            }

        }

        private void Fill()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.ProfileID",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(ProfileNamesDT);
            }
            DecorDT = new DataTable();
            string SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID AND Enabled = 1 ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorDT);
            }

            SelectCommand = @"SELECT DISTINCT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1) ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }

            GetColorsDT();
            GetInsetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetTypes",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore",
            //    ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(TechStoreDataTable);
            //}
            TechStoreDataTable = TablesManager.TechStoreDataTable;

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT * FROM DecorParameters",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorParametersDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 FrontsOrdersID, MainOrderID, FrontID,PatinaID, InsetTypeID,
                ColorID, InsetColorID, Height, Width, Count, FrontConfigID, RTRIM(lower(Notes)) AS Notes FROM FrontsOrders",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(SofiaOrdersDT);
                SofiaOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));

                LorenzoCurvedOrdersDT = SofiaOrdersDT.Clone();
                ElegantCurvedOrdersDT = SofiaOrdersDT.Clone();
                KansasCurvedOrdersDT = SofiaOrdersDT.Clone();
                SofiaCurvedOrdersDT = SofiaOrdersDT.Clone();
                DakotaCurvedOrdersDT = SofiaOrdersDT.Clone();
                Turin1CurvedOrdersDT = SofiaOrdersDT.Clone();
                Turin1_1CurvedOrdersDT = SofiaOrdersDT.Clone();
                Turin3CurvedOrdersDT = SofiaOrdersDT.Clone();
                InfinitiCurvedOrdersDT = SofiaOrdersDT.Clone();

                SofiaBoxesDT = SofiaOrdersDT.Clone();
                SofiaGridsDT = SofiaOrdersDT.Clone();
                SofiaSimpleDT = SofiaOrdersDT.Clone();
                DakotaAppliqueDT = SofiaOrdersDT.Clone();
                SofiaAppliqueDT = SofiaOrdersDT.Clone();

                LorenzoVitrinaDT = SofiaOrdersDT.Clone();
                ElegantVitrinaDT = SofiaOrdersDT.Clone();
                KansasVitrinaDT = SofiaOrdersDT.Clone();
                DakotaVitrinaDT = SofiaOrdersDT.Clone();
                SofiaVitrinaDT = SofiaOrdersDT.Clone();
                Turin1VitrinaDT = SofiaOrdersDT.Clone();
                Turin1_1VitrinaDT = SofiaOrdersDT.Clone();
                InfinitiVitrinaDT = SofiaOrdersDT.Clone();

                Turin1RemovingBoxesDT = SofiaOrdersDT.Clone();
                Turin3RemovingBoxesDT = SofiaOrdersDT.Clone();

                LorenzoOrdersDT = SofiaOrdersDT.Clone();
                LorenzoBoxesDT = SofiaOrdersDT.Clone();
                LorenzoGridsDT = SofiaOrdersDT.Clone();
                LorenzoSimpleDT = SofiaOrdersDT.Clone();

                ElegantOrdersDT = SofiaOrdersDT.Clone();
                ElegantBoxesDT = SofiaOrdersDT.Clone();
                ElegantGridsDT = SofiaOrdersDT.Clone();
                ElegantSimpleDT = SofiaOrdersDT.Clone();

                KansasOrdersDT = SofiaOrdersDT.Clone();
                KansasBoxesDT = SofiaOrdersDT.Clone();
                KansasGridsDT = SofiaOrdersDT.Clone();
                KansasSimpleDT = SofiaOrdersDT.Clone();

                DakotaOrdersDT = SofiaOrdersDT.Clone();
                DakotaBoxesDT = SofiaOrdersDT.Clone();
                DakotaGridsDT = SofiaOrdersDT.Clone();
                DakotaSimpleDT = SofiaOrdersDT.Clone();

                Turin1OrdersDT = SofiaOrdersDT.Clone();
                Turin1BoxesDT = SofiaOrdersDT.Clone();
                Turin1GridsDT = SofiaOrdersDT.Clone();
                Turin1SimpleDT = SofiaOrdersDT.Clone();

                Turin1_1OrdersDT = SofiaOrdersDT.Clone();
                Turin1_1BoxesDT = SofiaOrdersDT.Clone();
                Turin1_1GridsDT = SofiaOrdersDT.Clone();
                Turin1_1SimpleDT = SofiaOrdersDT.Clone();

                Turin3VitrinaDT = SofiaOrdersDT.Clone();
                Turin3OrdersDT = SofiaOrdersDT.Clone();
                Turin3BoxesDT = SofiaOrdersDT.Clone();
                Turin3GridsDT = SofiaOrdersDT.Clone();
                Turin3SimpleDT = SofiaOrdersDT.Clone();

                LeonVitrinaDT = SofiaOrdersDT.Clone();
                LeonOrdersDT = SofiaOrdersDT.Clone();
                LeonBoxesDT = SofiaOrdersDT.Clone();
                LeonGridsDT = SofiaOrdersDT.Clone();
                LeonSimpleDT = SofiaOrdersDT.Clone();

                InfinitiOrdersDT = SofiaOrdersDT.Clone();
                InfinitiBoxesDT = SofiaOrdersDT.Clone();
                InfinitiGridsDT = SofiaOrdersDT.Clone();
                InfinitiSimpleDT = SofiaOrdersDT.Clone();
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, LeftAngle, RightAngle, Count, Notes FROM DecorOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(BagetWithAngelOrdersDT);
                BagetWithAngelOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(NotArchDecorOrdersDT);
                NotArchDecorOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
                ArchDecorOrdersDT = NotArchDecorOrdersDT.Clone();
                GridsDecorOrdersDT = NotArchDecorOrdersDT.Clone();
            }
        }

        public bool HasParameter(int ProductID, String Parameter)
        {
            DataRow[] Rows = DecorParametersDT.Select("ProductID = " + ProductID);

            return Convert.ToBoolean(Rows[0][Parameter]);
        }

        public string GetMarketClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_marketingorders.dbo.MegaOrders" +
                    " WHERE MegaOrderID=(SELECT TOP 1 MegaOrderID FROM infiniu2_marketingorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + "))",
                    ConnectionStrings.MarketingReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        public string GetZOVClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_zovorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + ")",
                    ConnectionStrings.ZOVReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        private string GetOrderName(int MainOrderID, int GroupType)
        {
            string name = string.Empty;
            string ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            if (GroupType == 1)
                ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            SelectCommand = @"SELECT MegaBatchID, BatchID FROM Batch WHERE BatchID IN (SELECT BatchID FROM BatchDetails WHERE MainOrderID = " + MainOrderID + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                if (DA.Fill(DT) > 0 && DT.Rows[0]["MegaBatchID"] != DBNull.Value && DT.Rows[0]["BatchID"] != DBNull.Value)
                    name = DT.Rows[0]["MegaBatchID"].ToString() + ", " + DT.Rows[0]["BatchID"] + ", " + MainOrderID;
            }
            return name;
        }

        private string GetDecorName(int ID)
        {
            DataRow[] rows = DecorDT.Select("DecorID=" + ID);
            if (rows.Count() > 0)
                return rows[0]["Name"].ToString();
            else
                return string.Empty;
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }

        public string GetFront2Name(int TechnoProfileID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + TechnoProfileID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }
        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
                ColorName = Rows[0]["ColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string FrontType = string.Empty;
            try
            {
                DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
                FrontType = Rows[0]["PatinaName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return FrontType;
        }

        public string GetInsetTypeName(int InsetTypeID)
        {
            string InsetType = string.Empty;
            try
            {
                DataRow[] Rows = InsetTypesDataTable.Select("InsetTypeID = " + InsetTypeID);
                InsetType = Rows[0]["InsetTypeName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return InsetType;
        }

        public string GetInsetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = InsetColorsDataTable.Select("InsetColorID = " + ColorID);
                ColorName = Rows[0]["InsetColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        private string ProfileName(int ID)
        {
            string name = string.Empty;
            DataRow[] rows = ProfileNamesDT.Select("FrontConfigID=" + ID);
            if (rows.Count() > 0)
                name = rows[0]["TechStoreName"].ToString();
            return name;
        }

        //private string InsetTypeName(int ID)
        //{
        //    string name = string.Empty;
        //    DataRow[] rows = InsetTypeNamesDT.Select("FrontConfigID=" + ID);
        //    if (rows.Count() > 0)
        //        name = rows[0]["TechStoreName"].ToString();
        //    return name;
        //}

        private void GetGridMargins(int FrontID, ref int MarginHeight, ref int MarginWidth)
        {
            DataRow[] Rows = TechStoreDataTable.Select("TechStoreID = " + FrontID);
            if (Rows.Count() > 0)
            {
                if (Rows[0]["InsetHeightAdmission"] != DBNull.Value)
                    MarginHeight = Convert.ToInt32(Rows[0]["InsetHeightAdmission"]);
                if (Rows[0]["InsetWidthAdmission"] != DBNull.Value)
                    MarginWidth = Convert.ToInt32(Rows[0]["InsetWidthAdmission"]);
            }
        }

        private void GetProfileNames(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID, Fronts Front)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.ProfileID AND infiniu2_catalog.dbo.FrontsConfig.FrontConfigID IN (SELECT FrontConfigID FROM FrontsOrders
                    WHERE FrontID=" + Convert.ToInt32(Front) +
                    " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + ")))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.FrontsConfig.FrontConfigID FROM infiniu2_catalog.dbo.TechStore
                    INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON infiniu2_catalog.dbo.TechStore.TechStoreID = infiniu2_catalog.dbo.FrontsConfig.ProfileID AND infiniu2_catalog.dbo.FrontsConfig.FrontConfigID IN (SELECT FrontConfigID FROM FrontsOrders
                    WHERE FrontID=" + Convert.ToInt32(Front) +
                        " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + ")))";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetBoxFronts(DataTable SourceDT, ref DataTable DestinationDT, int Admission)
        {
            DataRow[] rows = SourceDT.Select("Height<=" + Admission + " OR Width<=" + Admission);
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetGridFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID IN (685,686,687,688,29470,29471)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetAppliqueFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID IN (28961,3653,3654,3655)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetSimpleFronts(DataTable SourceDT, ref DataTable DestinationDT, int Admission)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID NOT IN (685,686,687,688,29470,29471,28961,3653,3654,3655) AND Height>" + Admission + " AND Width>" + Admission);
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetVitrinaFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("InsetTypeID=1");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetRemovingBoxesFronts(DataTable SourceDT, ref DataTable DestinationDT, int Admission)
        {
            DataRow[] rows = SourceDT.Select("Height<" + Admission + " OR Width<" + Admission);
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetFrontsOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID, Fronts Front)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
                ColorID, InsetColorID, Height, Width, Count, FrontConfigID, RTRIM(lower(Notes)) AS Notes FROM FrontsOrders
                WHERE FrontID=" + Convert.ToInt32(Front) +
                " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE FactoryID=1 AND BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
                    ColorID, InsetColorID, Height, Width, Count, FrontConfigID, RTRIM(lower(Notes)) AS Notes FROM FrontsOrders
                    WHERE FrontID=" + Convert.ToInt32(Front) +
                    " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE FactoryID=2 AND BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetCurvedFrontsOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID, string filter)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
                ColorID, InsetColorID, Height, Width, Count, FrontConfigID, Notes FROM FrontsOrders
                WHERE FrontID IN " + filter +
                " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
                    ColorID, InsetColorID, Height, Width, Count, FrontConfigID, Notes FROM FrontsOrders
                    WHERE FrontID IN " + filter +
                    " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetBagetWithAngleOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, LeftAngle, RightAngle, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID IN (1) AND (LeftAngle<>0 OR RightAngle<>0) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, LeftAngle, RightAngle, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID IN (1) AND (LeftAngle<>0 OR RightAngle<>0) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetNotArchDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND NOT (ProductID IN (1) AND (LeftAngle<>0 OR RightAngle<>0)) AND ProductID NOT IN (31, 4, 18, 32, 10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND NOT (ProductID IN (1) AND (LeftAngle<>0 OR RightAngle<>0)) AND ProductID NOT IN (31, 4, 18, 32, 10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetArchDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID IN (31, 4, 18, 32) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID IN (31, 4, 18, 32) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetGridsDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID IN (10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID IN (10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private DataTable DistFrameColorsTable(DataTable SourceDT, bool OrderASC)
        {
            int ColorID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["ColorID"].ToString(), out ColorID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["ColorID"] = ColorID;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "ColorID ASC";
                else
                    DV.Sort = "ColorID DESC";
                DT = DV.ToTable(true, new string[] { "ColorID" });
            }
            return DT;
        }

        private DataTable DistInsetColorsTable(DataTable SourceDT, bool OrderASC)
        {
            int InsetColorID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("InsetColorID", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                //if (Convert.ToInt32(Row["InsetTypeID"]) != 2 && Convert.ToInt32(Row["InsetTypeID"]) != 5 && Convert.ToInt32(Row["InsetTypeID"]) != 6
                //    && Convert.ToInt32(Row["InsetTypeID"]) != 9 && Convert.ToInt32(Row["InsetTypeID"]) != 10 && Convert.ToInt32(Row["InsetTypeID"]) != 11)
                //    continue;

                if (int.TryParse(Row["InsetColorID"].ToString(), out InsetColorID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["InsetColorID"] = InsetColorID;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "InsetColorID ASC";
                else
                    DV.Sort = "InsetColorID DESC";
                DT = DV.ToTable(true, new string[] { "InsetColorID" });
            }
            return DT;
        }

        private DataTable DistMainOrdersTable(DataTable SourceDT, bool OrderASC)
        {
            int MainOrderID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("MainOrderID", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "MainOrderID ASC";
                else
                    DV.Sort = "MainOrderID DESC";
                DT = DV.ToTable(true, new string[] { "MainOrderID", "GroupType" });
            }
            return DT;
        }

        private DataTable DistMainOrdersTable(DataTable SourceDT1, DataTable SourceDT2, DataTable SourceDT3, DataTable SourceDT4, DataTable SourceDT5,
            DataTable SourceDT6, DataTable SourceDT7, DataTable SourceDT8, DataTable SourceDT9, DataTable SourceDT10, bool OrderASC)
        {
            int MainOrderID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("MainOrderID", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT1.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT2.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT3.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT4.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT5.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT6.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT7.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT8.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT9.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            foreach (DataRow Row in SourceDT10.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "MainOrderID ASC";
                else
                    DV.Sort = "MainOrderID DESC";
                DT = DV.ToTable(true, new string[] { "MainOrderID", "GroupType" });
            }
            return DT;
        }

        private void AssemblyBagetWithAngleCollect(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "DecorID", "ColorID", "PatinaID", "Length", "Height", "Width", "LeftAngle", "RightAngle", "Notes" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                int Count = 0;
                string filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                    " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) +
                    " AND LeftAngle=" + Convert.ToInt32(DT1.Rows[i]["LeftAngle"]) +
                    " AND RightAngle=" + Convert.ToInt32(DT1.Rows[i]["RightAngle"]) +
                    " AND (Notes='' OR Notes IS NULL)";
                if (DT1.Rows[i]["Notes"] != DBNull.Value && DT1.Rows[i]["Notes"].ToString().Length > 0)
                {
                    filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                      " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                      " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) +
                    " AND LeftAngle=" + Convert.ToInt32(DT1.Rows[i]["LeftAngle"]) +
                    " AND RightAngle=" + Convert.ToInt32(DT1.Rows[i]["RightAngle"]) +
                    " AND Notes='" + DT1.Rows[i]["Notes"] + "'";
                }
                DataRow[] rows = SourceDT.Select(filter);
                if (rows.Count() == 0)
                    continue;

                foreach (DataRow item in rows)
                    Count += Convert.ToInt32(item["Count"]);

                string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                    Color += " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["DecorID"] = Convert.ToInt32(DT1.Rows[i]["DecorID"]);
                NewRow["Name"] = GetDecorName(Convert.ToInt32(DT1.Rows[i]["DecorID"]));
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "ColorID"))
                    NewRow["Color"] = Color;
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                //    NewRow["Height"] = DT1.Rows[i]["Height"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                //    NewRow["Height"] = DT1.Rows[i]["Length"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width"))
                //    NewRow["Width"] = DT1.Rows[i]["Width"];

                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                {
                    if (Convert.ToInt32(DT1.Rows[i]["Height"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Height"];
                    if (Convert.ToInt32(DT1.Rows[i]["Length"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Length"];
                }
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                {
                    if (Convert.ToInt32(DT1.Rows[i]["Length"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Length"];
                    if (Convert.ToInt32(DT1.Rows[i]["Height"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Height"];
                }
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width") && Convert.ToInt32(DT1.Rows[i]["Width"]) != -1)
                    NewRow["Width"] = DT1.Rows[i]["Width"];

                NewRow["Count"] = Count;
                NewRow["LeftAngle"] = DT1.Rows[i]["LeftAngle"];
                NewRow["RightAngle"] = DT1.Rows[i]["RightAngle"];
                NewRow["Notes"] = DT1.Rows[i]["Notes"];
                DestinationDT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Color, Height, Width, LeftAngle, RightAngle";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }
        }

        private void AssemblyDecorCollect(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "DecorID", "ColorID", "PatinaID", "Length", "Height", "Width", "Notes" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                int Count = 0;
                string filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                    " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                if (DT1.Rows[i]["Notes"] != DBNull.Value && DT1.Rows[i]["Notes"].ToString().Length > 0)
                {
                    filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                      " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                      " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) + " AND Notes='" + DT1.Rows[i]["Notes"] + "'";
                }
                DataRow[] rows = SourceDT.Select(filter);
                if (rows.Count() == 0)
                    continue;

                foreach (DataRow item in rows)
                    Count += Convert.ToInt32(item["Count"]);

                string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                    Color += " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["DecorID"] = Convert.ToInt32(DT1.Rows[i]["DecorID"]);
                NewRow["Name"] = GetDecorName(Convert.ToInt32(DT1.Rows[i]["DecorID"]));
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "ColorID"))
                    NewRow["Color"] = Color;
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                //    NewRow["Height"] = DT1.Rows[i]["Height"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                //    NewRow["Height"] = DT1.Rows[i]["Length"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width"))
                //    NewRow["Width"] = DT1.Rows[i]["Width"];

                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                {
                    if (Convert.ToInt32(DT1.Rows[i]["Height"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Height"];
                    if (Convert.ToInt32(DT1.Rows[i]["Length"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Length"];
                }
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                {
                    if (Convert.ToInt32(DT1.Rows[i]["Length"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Length"];
                    if (Convert.ToInt32(DT1.Rows[i]["Height"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Height"];
                }
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width") && Convert.ToInt32(DT1.Rows[i]["Width"]) != -1)
                    NewRow["Width"] = DT1.Rows[i]["Width"];

                NewRow["Count"] = Count;
                NewRow["Notes"] = DT1.Rows[i]["Notes"];
                DestinationDT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Color, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }
        }

        private void CurvedAssemblyCollect(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT, string.Empty, "ColorID, PatinaID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID", "PatinaID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]), "InsetTypeID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetTypeID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                        " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "InsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]), "Height", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                                " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            DataRow[] rows = DestinationDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                                " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]));
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Front"] = GetFrontName(Convert.ToInt32(Srows[0]["FrontID"]));
                                if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) == -1)
                                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                                else
                                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));
                                NewRow["InsetType"] = GetInsetTypeName(Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]));
                                NewRow["InsetColor"] = GetInsetColorName(Convert.ToInt32(DT3.Rows[x]["InsetColorID"]));
                                NewRow["Height"] = Convert.ToInt32(DT4.Rows[y]["Height"]);
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                                NewRow["InsetTypeID"] = Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT3.Rows[x]["InsetColorID"]);
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
            DT1.Dispose();
            DT2.Dispose();
            DT3.Dispose();
            DT4.Dispose();
        }

        private void CollectAssemblySimple(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType)
        {
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "InsetTypeID=1 AND ColorID=" + ColorID, "ColorID, PatinaID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                //витрины
                string filter1 = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";

                if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                    filter1 = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                DataRow[] rows = SourceDT.Select(filter1);
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]));
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                //NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                NewRow["InsetColor"] = "Витрина";
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }

            DataRow[] irows = InsetTypesDataTable.Select("GroupID = 7");
            string filter = string.Empty;
            foreach (DataRow item in irows)
                filter += item["InsetTypeID"].ToString() + ",";
            if (filter.Length > 0)
                filter = "InsetTypeID IN (" + filter.Substring(0, filter.Length - 1) + ")";
            using (DataView DV = new DataView(SourceDT, filter + " AND ColorID=" + ColorID, "ColorID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            }

            //using (DataView DV = new DataView(SourceDT, "InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531) AND ColorID=" + ColorID, "ColorID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            //{
            //    DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            //}
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                //филенки
                string filter1 = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";

                if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                    filter1 = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                DataRow[] rows = SourceDT.Select(filter1);
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]));
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
            irows = InsetTypesDataTable.Select("GroupID = 3 OR GroupID = 4");
            filter = string.Empty;
            foreach (DataRow item in irows)
                filter += item["InsetTypeID"].ToString() + ",";
            if (filter.Length > 0)
                filter = "InsetTypeID IN (" + filter.Substring(0, filter.Length - 1) + ")";
            using (DataView DV = new DataView(SourceDT, filter + " AND ColorID=" + ColorID, "ColorID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                //глухие
                string filter1 = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";

                if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                    filter1 = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                DataRow[] rows = SourceDT.Select(filter1);
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"]));
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectAssemblyBoxes(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType)
        {
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "InsetTypeID=1 AND ColorID=" + ColorID, "ColorID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                //витрины
                string filter1 = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";

                if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                    filter1 = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                DataRow[] rows = SourceDT.Select(filter1);
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"])) + " ШУФ";
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                NewRow["InsetColor"] = "Витрина";
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }

            DataRow[] irows = InsetTypesDataTable.Select("GroupID = 7");
            string filter = string.Empty;
            foreach (DataRow item in irows)
                filter += item["InsetTypeID"].ToString() + ",";
            if (filter.Length > 0)
                filter = "InsetTypeID IN (" + filter.Substring(0, filter.Length - 1) + ")";
            using (DataView DV = new DataView(SourceDT, filter + " AND ColorID=" + ColorID, "ColorID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            }

            //using (DataView DV = new DataView(SourceDT, "InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531) AND ColorID=" + ColorID, "ColorID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            //{
            //    DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            //}
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                //филенки
                string filter1 = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";

                if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                    filter1 = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                DataRow[] rows = SourceDT.Select(filter1);
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"])) + " ШУФ";
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
            irows = InsetTypesDataTable.Select("GroupID = 3 OR GroupID = 4");
            filter = string.Empty;
            foreach (DataRow item in irows)
                filter += item["InsetTypeID"].ToString() + ",";
            if (filter.Length > 0)
                filter = "InsetTypeID IN (" + filter.Substring(0, filter.Length - 1) + ")";
            using (DataView DV = new DataView(SourceDT, filter + " AND ColorID=" + ColorID, "ColorID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                //глухие
                string filter1 = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";

                if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                    filter1 = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                DataRow[] rows = SourceDT.Select(filter1);
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"])) + " ШУФ";
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectAssemblyGrids(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType)
        {
            DataTable DT = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            }
            for (int i = 0; i < DT.Rows.Count; i++)
            {
                decimal Square = 0;
                int Count = 0;
                //филенки
                string filter1 = "ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT.Rows[i]["PatinaID"]) +
                    " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]) + " AND (Notes='' OR Notes IS NULL)";

                if (DT.Rows[i]["Notes"] != DBNull.Value && DT.Rows[i]["Notes"].ToString().Length > 0)
                    filter1 = "ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT.Rows[i]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]) + " AND Notes='" + DT.Rows[i]["Notes"] + "'";

                DataRow[] rows = SourceDT.Select(filter1);
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"])) + " РЕШ";
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectAssemblyApplique(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int FrontType)
        {
            DataTable DT = new DataTable();

            using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID, "ColorID, InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            }
            for (int i = 0; i < DT.Rows.Count; i++)
            {
                decimal Square = 0;
                int Count = 0;
                //филенки
                string filter1 = "ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT.Rows[i]["PatinaID"]) +
                    " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]) + " AND (Notes='' OR Notes IS NULL)";

                if (DT.Rows[i]["Notes"] != DBNull.Value && DT.Rows[i]["Notes"].ToString().Length > 0)
                    filter1 = "ColorID=" + Convert.ToInt32(DT.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT.Rows[i]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT.Rows[i]["Width"]) + " AND Notes='" + DT.Rows[i]["Notes"] + "'";

                DataRow[] rows = SourceDT.Select(filter1);
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["FrontType"] = FrontType;
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"])) + " Аппл";
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectDeying(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, string AdditionalName)
        {
            DataTable DT2 = new DataTable();
            //Витрины сначала
            using (DataView DV = new DataView(SourceDT, "InsetTypeID=1 AND ColorID=" + ColorID,
                "InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                string InsetColor = string.Empty;
                string filter1 = "ColorID=" + ColorID + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";

                if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                    filter1 = "ColorID=" + ColorID + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                DataRow[] rows = SourceDT.Select(filter1);
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"])) + AdditionalName;
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                if (Convert.ToInt32(rows[0]["InsetTypeID"]) == 1)
                    NewRow["InsetColor"] = "Витрина";
                else
                    NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                NewRow["Notes"] = rows[0]["Notes"];
                DestinationDT.Rows.Add(NewRow);
            }

            using (DataView DV = new DataView(SourceDT, "InsetTypeID<>1 AND ColorID=" + ColorID,
                "InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                string InsetColor = string.Empty;
                string filter1 = "ColorID=" + ColorID + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";

                if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                    filter1 = "ColorID=" + ColorID + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                DataRow[] rows = SourceDT.Select(filter1);
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = ProfileName(Convert.ToInt32(rows[0]["FrontConfigID"])) + AdditionalName;
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                if (Convert.ToInt32(rows[0]["InsetTypeID"]) == 1)
                    NewRow["InsetColor"] = "Витрина";
                else
                    NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["Height"] = rows[0]["Height"];
                NewRow["Width"] = rows[0]["Width"];
                NewRow["Count"] = Count;
                NewRow["Square"] = Square;
                NewRow["Notes"] = rows[0]["Notes"];
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void CollectOrders(DataTable DistinctSizesDT, DataTable SourceDT, ref DataTable DestinationDT, int FrontType, string FrontName)
        {
            string ColName = string.Empty;
            string FrameColor = string.Empty;
            string InsetType = string.Empty;
            string InsetColor = string.Empty;

            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();

            for (int y = 0; y < DistinctSizesDT.Rows.Count; y++)
            {
                using (DataView DV = new DataView(SourceDT))
                {
                    DT1 = DV.ToTable(true, new string[] { "ColorID", "PatinaID" });
                }
                for (int i = 0; i < DT1.Rows.Count; i++)
                {
                    using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]), string.Empty, DataViewRowState.CurrentRows))
                    {
                        DT2 = DV.ToTable(true, new string[] { "InsetTypeID" });
                    }
                    for (int j = 0; j < DT2.Rows.Count; j++)
                    {
                        using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]), string.Empty, DataViewRowState.CurrentRows))
                        {
                            DT3 = DV.ToTable(true, new string[] { "InsetColorID" });
                            for (int x = 0; x < DT3.Rows.Count; x++)
                            {
                                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                                    " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) + " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]));

                                if (rows.Count() > 0)
                                {
                                    if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                                        FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                                    else
                                        FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                                    //FrameColor = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                                    InsetType = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"]));
                                    if (Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) == 1)
                                        InsetColor = "Витрина";
                                    else
                                        InsetColor = GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));

                                    ColName = FrameColor + "(" + InsetType + " " + InsetColor + ")_" + FrontType;
                                    if (!DestinationDT.Columns.Contains(ColName))
                                        DestinationDT.Columns.Add(new DataColumn(ColName, Type.GetType("System.String")));

                                    DestinationDT.Rows[0][ColName] = FrontName;

                                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                                        " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) + " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                        " AND Height=" + Convert.ToInt32(DistinctSizesDT.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[y]["Width"]));
                                    if (Srows.Count() > 0)
                                    {
                                        int Count = 0;
                                        foreach (DataRow item in Srows)
                                            Count += Convert.ToInt32(item["Count"]);

                                        DataRow[] Drows = DestinationDT.Select("Sizes='" + DistinctSizesDT.Rows[y]["Height"].ToString() + " X " + DistinctSizesDT.Rows[y]["Width"].ToString() + "'");
                                        if (Drows.Count() == 0)
                                        {
                                            DataRow NewRow = DestinationDT.NewRow();
                                            NewRow["Sizes"] = DistinctSizesDT.Rows[y]["Height"].ToString() + " X " + DistinctSizesDT.Rows[y]["Width"].ToString();
                                            NewRow["Height"] = DistinctSizesDT.Rows[y]["Height"];
                                            NewRow["Width"] = DistinctSizesDT.Rows[y]["Width"];
                                            NewRow[ColName] = Count;
                                            DestinationDT.Rows.Add(NewRow);
                                        }
                                        else
                                        {
                                            Drows[0][ColName] = Count;
                                        }
                                    }
                                }
                                else
                                    continue;

                            }
                        }
                    }
                }
            }
        }

        #region Trimming and Gash

        private DataTable TrimDistHeightTable(DataTable SourceDT, bool OrderASC)
        {
            int Height = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["Height"].ToString(), out Height))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["Height"] = Height;
                    DT.Rows.Add(NewRow);
                }
                if (int.TryParse(Row["Width"].ToString(), out Height))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["Height"] = Height;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "Height ASC";
                else
                    DV.Sort = "Height DESC";
                DT = DV.ToTable(true, new string[] { "Height" });
            }
            return DT;
        }

        private void TrimCollectSimpleFronts(ref DataTable DestinationDT, int Admission, bool HeightASC)
        {
            DataTable DT = Turin1GridsDT.Clone();
            foreach (DataRow item in SofiaSimpleDT.Rows)
                DT.Rows.Add(item.ItemArray);
            foreach (DataRow item in DakotaAppliqueDT.Rows)
                DT.Rows.Add(item.ItemArray);
            foreach (DataRow item in SofiaAppliqueDT.Rows)
                DT.Rows.Add(item.ItemArray);

            DataTable TempDT = DestinationDT.Clone();

            if (LorenzoSimpleDT.Rows.Count > 0)
                TrimmingSyngly(LorenzoSimpleDT, ref TempDT, Admission, 1, true, HeightASC, string.Empty);
            if (ElegantSimpleDT.Rows.Count > 0)
                TrimmingSyngly(ElegantSimpleDT, ref TempDT, Admission, 1, true, HeightASC, string.Empty);
            if (KansasSimpleDT.Rows.Count > 0)
                TrimmingSyngly(KansasSimpleDT, ref TempDT, Admission, 1, true, HeightASC, string.Empty);

            DataTable dt = DakotaSimpleDT.Clone();
            DataRow[] rows = DakotaSimpleDT.Select("InsetTypeID=29272");
            foreach (DataRow item in rows)
                dt.Rows.Add(item.ItemArray);

            if (dt.Rows.Count > 0)
                TrimmingSyngly(dt, ref TempDT, Admission, 1, true, HeightASC, " РЕШ");
            dt.Clear();
            rows = DakotaSimpleDT.Select("InsetTypeID<>29272");
            foreach (DataRow item in rows)
                dt.Rows.Add(item.ItemArray);
            if (dt.Rows.Count > 0)
                TrimmingSyngly(dt, ref TempDT, Admission, 1, true, HeightASC, string.Empty);

            if (DT.Rows.Count > 0)
                TrimmingSyngly(DT, ref TempDT, Admission, 1, true, HeightASC, string.Empty);

            DT.Clear();
            foreach (DataRow item in Turin1SimpleDT.Rows)
                DT.Rows.Add(item.ItemArray);
            foreach (DataRow item in Turin1_1SimpleDT.Rows)
                DT.Rows.Add(item.ItemArray);
            foreach (DataRow item in Turin1GridsDT.Rows)
                DT.Rows.Add(item.ItemArray);
            foreach (DataRow item in Turin1_1GridsDT.Rows)
                DT.Rows.Add(item.ItemArray);
            if (DT.Rows.Count > 0)
                TrimmingSyngly(DT, ref TempDT, Admission, 1, true, HeightASC, string.Empty);
            if (Turin3SimpleDT.Rows.Count > 0)
                TrimmingSyngly(Turin3SimpleDT, ref TempDT, Admission, 1, true, HeightASC, string.Empty);
            if (LeonSimpleDT.Rows.Count > 0)
                TrimmingSyngly(LeonSimpleDT, ref TempDT, Admission, 1, true, HeightASC, string.Empty);
            if (InfinitiSimpleDT.Rows.Count > 0)
                TrimmingSyngly(InfinitiSimpleDT, ref TempDT, Admission, 1, true, HeightASC, string.Empty);
            for (int i = 1; i < TempDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(TempDT.Rows[i]["FrontID"]) == Convert.ToInt32(TempDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(TempDT.Rows[i]["ColorID"]) == Convert.ToInt32(TempDT.Rows[i - 1]["ColorID"]))
                {
                    TempDT.Rows[i]["Front"] = string.Empty;
                    TempDT.Rows[i]["Color"] = string.Empty;
                }
            }
            foreach (DataRow item in TempDT.Rows)
                DestinationDT.Rows.Add(item.ItemArray);
        }

        private void TrimCollectGridFronts(ref DataTable DestinationDT, int Admission, bool HeightASC)
        {
            DataTable TempDT = DestinationDT.Clone();

            if (LorenzoGridsDT.Rows.Count > 0)
                TrimmingSyngly(LorenzoGridsDT, ref TempDT, Admission, 3, true, HeightASC, " РЕШ");
            if (ElegantGridsDT.Rows.Count > 0)
                TrimmingSyngly(ElegantGridsDT, ref TempDT, Admission, 3, true, HeightASC, " РЕШ");
            if (KansasGridsDT.Rows.Count > 0)
                TrimmingSyngly(KansasGridsDT, ref TempDT, Admission, 3, true, HeightASC, " РЕШ");
            if (DakotaGridsDT.Rows.Count > 0)
                TrimmingSyngly(DakotaGridsDT, ref TempDT, Admission, 3, true, HeightASC, " РЕШ");
            if (SofiaGridsDT.Rows.Count > 0)
                TrimmingSyngly(SofiaGridsDT, ref TempDT, Admission, 3, true, HeightASC, " РЕШ");
            if (Turin3GridsDT.Rows.Count > 0)
                TrimmingSyngly(Turin3GridsDT, ref TempDT, Admission, 3, true, HeightASC, " РЕШ");
            if (LeonGridsDT.Rows.Count > 0)
                TrimmingSyngly(LeonGridsDT, ref TempDT, Admission, 3, true, HeightASC, " РЕШ");
            if (InfinitiGridsDT.Rows.Count > 0)
                TrimmingSyngly(InfinitiGridsDT, ref TempDT, Admission, 3, true, HeightASC, " РЕШ");
            for (int i = 1; i < TempDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(TempDT.Rows[i]["FrontID"]) == Convert.ToInt32(TempDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(TempDT.Rows[i]["ColorID"]) == Convert.ToInt32(TempDT.Rows[i - 1]["ColorID"]))
                {
                    TempDT.Rows[i]["Front"] = string.Empty;
                    TempDT.Rows[i]["Color"] = string.Empty;
                }
            }
            foreach (DataRow item in TempDT.Rows)
                DestinationDT.Rows.Add(item.ItemArray);
        }

        private void TrimCollectBoxFronts(ref DataTable DestinationDT, int Admission, bool HeightASC)
        {
            DataTable TempDT = DestinationDT.Clone();

            if (LorenzoBoxesDT.Rows.Count > 0)
                TrimmingSyngly(LorenzoBoxesDT, ref TempDT, Admission, 2, true, HeightASC, " ШУФ");
            if (ElegantBoxesDT.Rows.Count > 0)
                TrimmingSyngly(ElegantBoxesDT, ref TempDT, Admission, 2, true, HeightASC, " ШУФ");
            if (KansasBoxesDT.Rows.Count > 0)
                TrimmingSyngly(KansasBoxesDT, ref TempDT, Admission, 2, true, HeightASC, " ШУФ");
            if (DakotaBoxesDT.Rows.Count > 0)
                TrimmingSyngly(DakotaBoxesDT, ref TempDT, Admission, 2, true, HeightASC, " ШУФ");
            if (SofiaBoxesDT.Rows.Count > 0)
                TrimmingSyngly(SofiaBoxesDT, ref TempDT, Admission, 2, true, HeightASC, " ШУФ");
            if (Turin1BoxesDT.Rows.Count > 0)
                TrimmingSyngly(Turin1BoxesDT, ref TempDT, Admission, 2, true, HeightASC, " ШУФ");
            if (Turin1_1BoxesDT.Rows.Count > 0)
                TrimmingSyngly(Turin1_1BoxesDT, ref TempDT, Admission, 2, true, HeightASC, " ШУФ");
            if (Turin3BoxesDT.Rows.Count > 0)
                TrimmingSyngly(Turin3BoxesDT, ref TempDT, Admission, 2, true, HeightASC, " ШУФ");
            if (LeonBoxesDT.Rows.Count > 0)
                TrimmingSyngly(LeonBoxesDT, ref TempDT, Admission, 2, true, HeightASC, " ШУФ");
            if (InfinitiBoxesDT.Rows.Count > 0)
                TrimmingSyngly(InfinitiBoxesDT, ref TempDT, Admission, 2, true, HeightASC, " ШУФ");
            for (int i = 1; i < TempDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(TempDT.Rows[i]["FrontID"]) == Convert.ToInt32(TempDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(TempDT.Rows[i]["ColorID"]) == Convert.ToInt32(TempDT.Rows[i - 1]["ColorID"]))
                {
                    TempDT.Rows[i]["Front"] = string.Empty;
                    TempDT.Rows[i]["Color"] = string.Empty;
                }
            }
            foreach (DataRow item in TempDT.Rows)
                DestinationDT.Rows.Add(item.ItemArray);
        }

        private void GashCollectSimpleFronts(ref DataTable DestinationDT, int Admission, bool HeightASC)
        {
            DataTable DT = Turin1GridsDT.Clone();
            foreach (DataRow item in Turin1SimpleDT.Rows)
                DT.Rows.Add(item.ItemArray);
            foreach (DataRow item in Turin1_1SimpleDT.Rows)
                DT.Rows.Add(item.ItemArray);
            foreach (DataRow item in Turin1GridsDT.Rows)
                DT.Rows.Add(item.ItemArray);
            foreach (DataRow item in Turin1_1GridsDT.Rows)
                DT.Rows.Add(item.ItemArray);

            DataTable TempDT = DestinationDT.Clone();

            if (InfinitiSimpleDT.Rows.Count > 0)
                TrimmingSyngly(InfinitiSimpleDT, ref TempDT, Admission, 1, false, HeightASC, string.Empty);
            if (Turin3SimpleDT.Rows.Count > 0)
                TrimmingSyngly(Turin3SimpleDT, ref TempDT, Admission, 1, false, HeightASC, string.Empty);
            if (LeonSimpleDT.Rows.Count > 0)
                TrimmingSyngly(LeonSimpleDT, ref TempDT, Admission, 1, false, HeightASC, string.Empty);

            if (DT.Rows.Count > 0)
                TrimmingSyngly(DT, ref TempDT, Admission, 1, false, HeightASC, string.Empty);

            DT.Clear();
            foreach (DataRow item in SofiaSimpleDT.Rows)
                DT.Rows.Add(item.ItemArray);
            foreach (DataRow item in DakotaAppliqueDT.Rows)
                DT.Rows.Add(item.ItemArray);
            foreach (DataRow item in SofiaAppliqueDT.Rows)
                DT.Rows.Add(item.ItemArray);

            if (DT.Rows.Count > 0)
                TrimmingSyngly(DT, ref TempDT, Admission, 1, true, HeightASC, string.Empty);
            if (LorenzoSimpleDT.Rows.Count > 0)
                TrimmingSyngly(LorenzoSimpleDT, ref TempDT, Admission, 1, false, HeightASC, string.Empty);
            if (ElegantSimpleDT.Rows.Count > 0)
                TrimmingSyngly(ElegantSimpleDT, ref TempDT, Admission, 1, false, HeightASC, string.Empty);
            if (KansasSimpleDT.Rows.Count > 0)
                TrimmingSyngly(KansasSimpleDT, ref TempDT, Admission, 1, false, HeightASC, string.Empty);

            DataTable dt = DakotaSimpleDT.Clone();
            DataRow[] rows = DakotaSimpleDT.Select("InsetTypeID=29272");
            foreach (DataRow item in rows)
                dt.Rows.Add(item.ItemArray);

            if (dt.Rows.Count > 0)
                TrimmingSyngly(dt, ref TempDT, Admission, 4, false, HeightASC, " РЕШ");
            dt.Clear();
            rows = DakotaSimpleDT.Select("InsetTypeID<>29272");
            foreach (DataRow item in rows)
                dt.Rows.Add(item.ItemArray);
            if (dt.Rows.Count > 0)
                TrimmingSyngly(dt, ref TempDT, Admission, 4, false, HeightASC, string.Empty);


            if (TempDT.Rows.Count > 0 && Convert.ToInt32(TempDT.Rows[0]["VitrinaCount"]) > 0)
                TempDT.Rows[0]["VitrinaNotes"] = Convert.ToInt32(TempDT.Rows[0]["VitrinaCount"]) + " витр.";
            for (int i = 1; i < TempDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(TempDT.Rows[i]["VitrinaCount"]) > 0)
                    TempDT.Rows[i]["VitrinaNotes"] = Convert.ToInt32(TempDT.Rows[i]["VitrinaCount"]) + " витр.";
                if (Convert.ToInt32(TempDT.Rows[i]["FrontID"]) == 28922 && Convert.ToInt32(TempDT.Rows[i]["GridCount"]) > 0)
                    TempDT.Rows[i]["GridNotes"] = Convert.ToInt32(TempDT.Rows[i]["GridCount"]) + " реш.СОТЫ";
                if (Convert.ToInt32(TempDT.Rows[i]["FrontID"]) == Convert.ToInt32(TempDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(TempDT.Rows[i]["ColorID"]) == Convert.ToInt32(TempDT.Rows[i - 1]["ColorID"]))
                {
                    TempDT.Rows[i]["Front"] = string.Empty;
                    TempDT.Rows[i]["Color"] = string.Empty;
                }
            }
            foreach (DataRow item in TempDT.Rows)
                DestinationDT.Rows.Add(item.ItemArray);
        }

        private void GashCollectGridFronts(ref DataTable DestinationDT, int Admission, bool HeightASC)
        {
            DataTable TempDT = DestinationDT.Clone();

            if (InfinitiGridsDT.Rows.Count > 0)
                TrimmingSyngly(InfinitiGridsDT, ref TempDT, Admission, 3, false, HeightASC, " РЕШ");
            if (Turin3GridsDT.Rows.Count > 0)
                TrimmingSyngly(Turin3GridsDT, ref TempDT, Admission, 3, false, HeightASC, " РЕШ");
            if (LeonGridsDT.Rows.Count > 0)
                TrimmingSyngly(LeonGridsDT, ref TempDT, Admission, 3, false, HeightASC, " РЕШ");
            if (SofiaGridsDT.Rows.Count > 0)
                TrimmingSyngly(SofiaGridsDT, ref TempDT, Admission, 3, false, HeightASC, " РЕШ");
            if (LorenzoGridsDT.Rows.Count > 0)
                TrimmingSyngly(LorenzoGridsDT, ref TempDT, Admission, 3, false, HeightASC, " РЕШ");
            if (ElegantGridsDT.Rows.Count > 0)
                TrimmingSyngly(ElegantGridsDT, ref TempDT, Admission, 3, false, HeightASC, " РЕШ");
            if (KansasGridsDT.Rows.Count > 0)
                TrimmingSyngly(KansasGridsDT, ref TempDT, Admission, 3, false, HeightASC, " РЕШ");
            if (DakotaGridsDT.Rows.Count > 0)
                TrimmingSyngly(DakotaGridsDT, ref TempDT, Admission, 3, false, HeightASC, " РЕШ");
            for (int i = 1; i < TempDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(TempDT.Rows[i]["FrontID"]) == Convert.ToInt32(TempDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(TempDT.Rows[i]["ColorID"]) == Convert.ToInt32(TempDT.Rows[i - 1]["ColorID"]))
                {
                    TempDT.Rows[i]["Front"] = string.Empty;
                    TempDT.Rows[i]["Color"] = string.Empty;
                }
            }
            foreach (DataRow item in TempDT.Rows)
                DestinationDT.Rows.Add(item.ItemArray);
        }

        private void GashCollectBoxFronts(ref DataTable DestinationDT, int Admission, bool HeightASC)
        {
            DataTable TempDT = DestinationDT.Clone();

            if (InfinitiBoxesDT.Rows.Count > 0)
                TrimmingSyngly(InfinitiBoxesDT, ref TempDT, Admission, 2, false, HeightASC, " ШУФ");
            if (Turin3BoxesDT.Rows.Count > 0)
                TrimmingSyngly(Turin3BoxesDT, ref TempDT, Admission, 2, false, HeightASC, " ШУФ");
            if (LeonBoxesDT.Rows.Count > 0)
                TrimmingSyngly(LeonBoxesDT, ref TempDT, Admission, 2, false, HeightASC, " ШУФ");
            if (Turin1BoxesDT.Rows.Count > 0)
                TrimmingSyngly(Turin1BoxesDT, ref TempDT, Admission, 2, false, HeightASC, " ШУФ");
            if (Turin1_1BoxesDT.Rows.Count > 0)
                TrimmingSyngly(Turin1_1BoxesDT, ref TempDT, Admission, 2, false, HeightASC, " ШУФ");
            if (SofiaBoxesDT.Rows.Count > 0)
                TrimmingSyngly(SofiaBoxesDT, ref TempDT, Admission, 2, false, HeightASC, " ШУФ");
            if (LorenzoBoxesDT.Rows.Count > 0)
                TrimmingSyngly(LorenzoBoxesDT, ref TempDT, Admission, 2, false, HeightASC, " ШУФ");
            if (ElegantBoxesDT.Rows.Count > 0)
                TrimmingSyngly(ElegantBoxesDT, ref TempDT, Admission, 2, false, HeightASC, " ШУФ");
            if (KansasBoxesDT.Rows.Count > 0)
                TrimmingSyngly(KansasBoxesDT, ref TempDT, Admission, 2, false, HeightASC, " ШУФ");
            if (DakotaBoxesDT.Rows.Count > 0)
                TrimmingSyngly(DakotaBoxesDT, ref TempDT, Admission, 2, false, HeightASC, " ШУФ");
            if (TempDT.Rows.Count > 0 && Convert.ToInt32(TempDT.Rows[0]["VitrinaCount"]) > 0)
                TempDT.Rows[0]["VitrinaNotes"] = Convert.ToInt32(TempDT.Rows[0]["VitrinaCount"]) + " витр.";
            for (int i = 1; i < TempDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(TempDT.Rows[i]["VitrinaCount"]) > 0)
                    TempDT.Rows[i]["VitrinaNotes"] = Convert.ToInt32(TempDT.Rows[i]["VitrinaCount"]) + " витр.";
                if (Convert.ToInt32(TempDT.Rows[i]["FrontID"]) == Convert.ToInt32(TempDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(TempDT.Rows[i]["ColorID"]) == Convert.ToInt32(TempDT.Rows[i - 1]["ColorID"]))
                {
                    TempDT.Rows[i]["Front"] = string.Empty;
                    TempDT.Rows[i]["Color"] = string.Empty;
                }
            }
            foreach (DataRow item in TempDT.Rows)
                DestinationDT.Rows.Add(item.ItemArray);
        }

        #endregion

        private void TrimmingSyngly(DataTable SourceDT, ref DataTable DestinationDT, int Admission, int ProfileType, bool FrameColorASC, bool HeightASC, string AdditionalName)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = TrimDistHeightTable(SourceDT, HeightASC);

            using (DataView DV = new DataView(SourceDT))
            {
                if (FrameColorASC)
                    DV.Sort = "ColorID";
                else
                    DV.Sort = "ColorID DESC";
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {
                        int Count = 0;
                        int VitrinaCount = 0;
                        int GridCount = 0;
                        int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) + Admission;
                        foreach (DataRow item in Srows)
                        {
                            Count += Convert.ToInt32(item["Count"]);
                            if (Convert.ToInt32(item["InsetTypeID"]) == 1)
                                VitrinaCount += Convert.ToInt32(item["Count"]);
                            if (Convert.ToInt32(item["InsetTypeID"]) == 685 || Convert.ToInt32(item["InsetTypeID"]) == 686 || Convert.ToInt32(item["InsetTypeID"]) == 687 || Convert.ToInt32(item["InsetTypeID"]) == 688 || Convert.ToInt32(item["InsetTypeID"]) == 29272)
                                GridCount += Convert.ToInt32(item["Count"]);
                        }
                        string Name = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"])) + AdditionalName;
                        DataRow[] rows = DestinationDT.Select("Front='" + Name + "' AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                            " AND Height=" + Height);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = Name;
                            NewRow["Color"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                            NewRow["Height"] = Height;
                            NewRow["Count"] = Count * 2;
                            NewRow["VitrinaCount"] = VitrinaCount * 2;
                            NewRow["GridCount"] = GridCount * 2;
                            NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                            NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            NewRow["ProfileType"] = ProfileType;
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                            rows[0]["VitrinaCount"] = Convert.ToInt32(rows[0]["VitrinaCount"]) + VitrinaCount * 2;
                            rows[0]["GridCount"] = Convert.ToInt32(rows[0]["GridCount"]) + GridCount * 2;
                        }
                    }
                    Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {
                        int Count = 0;
                        int VitrinaCount = 0;
                        int GridCount = 0;
                        int Height = Convert.ToInt32(DT2.Rows[j]["Height"]) + Admission;
                        foreach (DataRow item in Srows)
                        {
                            Count += Convert.ToInt32(item["Count"]);
                            if (Convert.ToInt32(item["InsetTypeID"]) == 1)
                                VitrinaCount += Convert.ToInt32(item["Count"]);
                            if (Convert.ToInt32(item["InsetTypeID"]) == 685 || Convert.ToInt32(item["InsetTypeID"]) == 686 || Convert.ToInt32(item["InsetTypeID"]) == 687 || Convert.ToInt32(item["InsetTypeID"]) == 688 || Convert.ToInt32(item["InsetTypeID"]) == 29272)
                                GridCount += Convert.ToInt32(item["Count"]);
                        }

                        string Name = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"])) + AdditionalName;
                        DataRow[] rows = DestinationDT.Select("Front='" + Name + "' AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                            " AND Height=" + Height);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = Name;
                            NewRow["Color"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                            NewRow["Height"] = Height;
                            NewRow["Count"] = Count * 2;
                            NewRow["VitrinaCount"] = VitrinaCount * 2;
                            NewRow["GridCount"] = GridCount * 2;
                            NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                            NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            NewRow["ProfileType"] = ProfileType;
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                            rows[0]["VitrinaCount"] = Convert.ToInt32(rows[0]["VitrinaCount"]) + VitrinaCount * 2;
                            rows[0]["GridCount"] = Convert.ToInt32(rows[0]["GridCount"]) + GridCount * 2;
                        }
                    }
                }
            }
            DT1.Dispose();
            DT2.Dispose();
        }

        private void AdditionsSyngly(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = TrimDistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {
                        int Count = 0;

                        foreach (DataRow item in Srows)
                            Count += Convert.ToInt32(item["Count"]);

                        DataRow[] rows = DestinationDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                            " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]));
                            NewRow["Color"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                            NewRow["Height"] = Convert.ToInt32(DT2.Rows[j]["Height"]);
                            NewRow["Count"] = Count * 2;
                            NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                            NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        }
                    }
                    Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {
                        int Count = 0;
                        foreach (DataRow item in Srows)
                            Count += Convert.ToInt32(item["Count"]);

                        DataRow[] rows = DestinationDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                            " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]));
                            NewRow["Color"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                            NewRow["Height"] = Convert.ToInt32(DT2.Rows[j]["Height"]);
                            NewRow["Count"] = Count * 2;
                            NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                            NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        }
                    }
                }
            }
            DT1.Dispose();
            DT2.Dispose();
        }

        private void AdditionsSyngly(DataTable SourceDT, ref DataTable DestinationDT, int HeightMin)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = TrimDistHeightTable(SourceDT, true);

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    if (Convert.ToInt32(DT2.Rows[j]["Height"]) < HeightMin)
                        continue;
                    DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {
                        int Count = 0;

                        foreach (DataRow item in Srows)
                            Count += Convert.ToInt32(item["Count"]);

                        DataRow[] rows = DestinationDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                            " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]));
                            NewRow["Color"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                            NewRow["Height"] = Convert.ToInt32(DT2.Rows[j]["Height"]);
                            NewRow["Count"] = Count * 2;
                            NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                            NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        }
                    }
                    Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                    if (Srows.Count() > 0)
                    {
                        int Count = 0;
                        foreach (DataRow item in Srows)
                            Count += Convert.ToInt32(item["Count"]);

                        DataRow[] rows = DestinationDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                            " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["Front"] = ProfileName(Convert.ToInt32(Srows[0]["FrontConfigID"]));
                            NewRow["Color"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                            NewRow["Height"] = Convert.ToInt32(DT2.Rows[j]["Height"]);
                            NewRow["Count"] = Count * 2;
                            NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                            NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                            DestinationDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count * 2;
                        }
                    }
                }
            }
            DT1.Dispose();
            DT2.Dispose();
        }

        private void CollectRemovingQuarter(ref DataTable DestinationDT, bool OrderASC)
        {
            if (LorenzoVitrinaDT.Rows.Count > 0)
                AdditionsSyngly(LorenzoVitrinaDT, ref DestinationDT);
            if (ElegantVitrinaDT.Rows.Count > 0)
                AdditionsSyngly(ElegantVitrinaDT, ref DestinationDT);
            if (KansasVitrinaDT.Rows.Count > 0)
                AdditionsSyngly(KansasVitrinaDT, ref DestinationDT);
            if (DakotaVitrinaDT.Rows.Count > 0)
                AdditionsSyngly(DakotaVitrinaDT, ref DestinationDT);
            if (SofiaVitrinaDT.Rows.Count > 0)
                AdditionsSyngly(SofiaVitrinaDT, ref DestinationDT);
            if (Turin1VitrinaDT.Rows.Count > 0)
                AdditionsSyngly(Turin1VitrinaDT, ref DestinationDT);
            if (Turin1_1VitrinaDT.Rows.Count > 0)
                AdditionsSyngly(Turin1_1VitrinaDT, ref DestinationDT);
            if (Turin3VitrinaDT.Rows.Count > 0)
                AdditionsSyngly(Turin3VitrinaDT, ref DestinationDT);
            if (LeonVitrinaDT.Rows.Count > 0)
                AdditionsSyngly(LeonVitrinaDT, ref DestinationDT);
            if (InfinitiVitrinaDT.Rows.Count > 0)
                AdditionsSyngly(InfinitiVitrinaDT, ref DestinationDT);

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["FrontID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["ColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ColorID"]))
                {
                    DestinationDT.Rows[i]["Front"] = string.Empty;
                    DestinationDT.Rows[i]["Color"] = string.Empty;
                }
            }
        }

        private void CollectRemovingBoxes(ref DataTable DestinationDT, bool OrderASC)
        {
            if (Turin1RemovingBoxesDT.Rows.Count > 0)
                AdditionsSyngly(Turin1RemovingBoxesDT, ref DestinationDT, 138);
            if (Turin3RemovingBoxesDT.Rows.Count > 0)
                AdditionsSyngly(Turin3RemovingBoxesDT, ref DestinationDT, 138);

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["FrontID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["ColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ColorID"]))
                {
                    DestinationDT.Rows[i]["Front"] = string.Empty;
                    DestinationDT.Rows[i]["Color"] = string.Empty;
                }
            }
        }

        private void CollectGrooveGrids(ref DataTable DestinationDT, bool OrderASC)
        {
            if (Turin1GridsDT.Rows.Count > 0)
                AdditionsSyngly(Turin1GridsDT, ref GrooveGridsDT);
            if (Turin1_1GridsDT.Rows.Count > 0)
                AdditionsSyngly(Turin1_1GridsDT, ref GrooveGridsDT);

            for (int i = 1; i < DestinationDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DestinationDT.Rows[i]["FrontID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["FrontID"]) &&
                    Convert.ToInt32(DestinationDT.Rows[i]["ColorID"]) == Convert.ToInt32(DestinationDT.Rows[i - 1]["ColorID"]))
                {
                    DestinationDT.Rows[i]["Front"] = string.Empty;
                    DestinationDT.Rows[i]["Color"] = string.Empty;
                }
            }
        }

        #region Inset

        private DataTable InsetDistSizesTable(DataTable SourceDT, bool OrderASC)
        {
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                DataRow NewRow = DT.NewRow();
                NewRow["Height"] = Row["Height"];
                NewRow["Width"] = Row["Width"];
                DT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "Height ASC, Width ASC";
                else
                    DV.Sort = "Height DESC, Width DESC";
                DT = DV.ToTable(true, new string[] { "Height", "Width" });
            }
            return DT;
        }

        private void SimpleInsetsOnly(DataTable SourceDT, ref DataTable DestinationDT, int HeightMargin, int WidthMargin, bool OrderASC, bool IsBox)
        {
            string SizeASC = "Height, Width, Notes";
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            int H = 0;
            int W = 0;
            string N = string.Empty;

            if (!OrderASC)
                SizeASC = "Height DESC, Width DESC, Notes DESC";

            DataRow[] irows = InsetTypesDataTable.Select("(GroupID = 3 OR GroupID = 4) AND InsetTypeID<>29272");
            string filter = string.Empty;
            foreach (DataRow item in irows)
                filter += item["InsetTypeID"].ToString() + ",";
            if (filter.Length > 0)
                filter = "InsetTypeID IN (" + filter.Substring(0, filter.Length - 1) + ")";
            //Нужно добавлять Id Новых филенок
            using (DataView DV = new DataView(SourceDT, filter + " OR InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531) OR InsetTypeID IN (685,686,687,688,29470,29471) OR InsetTypeID IN (28961,3653,3654,3655)", string.Empty, DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    H = 0;
                    W = 0;
                    N = string.Empty;
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), SizeASC, DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "Height", "Width", "Notes" });
                    }

                    for (int y = 0; y < DT3.Rows.Count; y++)
                    {
                        if (Convert.ToInt32(DT3.Rows[y]["Height"]) == H && Convert.ToInt32(DT3.Rows[y]["Width"]) == W &&
                            DT3.Rows[y]["Notes"].ToString() == N)
                            continue;

                        H = Convert.ToInt32(DT3.Rows[y]["Height"]);
                        W = Convert.ToInt32(DT3.Rows[y]["Width"]);
                        N = DT3.Rows[y]["Notes"].ToString();

                        filter = "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND Height=" + Convert.ToInt32(DT3.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT3.Rows[y]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                        if (DT3.Rows[y]["Notes"] != DBNull.Value && DT3.Rows[y]["Notes"].ToString().Length > 0)
                            filter = "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND Height=" + Convert.ToInt32(DT3.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT3.Rows[y]["Width"]) +
                            " AND Notes='" + DT3.Rows[y]["Notes"].ToString() + "'";

                        DataRow[] Srows = SourceDT.Select(filter);
                        if (Srows.Count() == 0)
                            continue;

                        int Count = 0;
                        int Height = Convert.ToInt32(DT3.Rows[y]["Height"]) - HeightMargin;
                        int Width = Convert.ToInt32(DT3.Rows[y]["Width"]) - WidthMargin;
                        string Name = string.Empty;
                        string Notes = DT3.Rows[y]["Notes"].ToString();

                        if (Convert.ToInt32(DT3.Rows[y]["Height"]) <= HeightMargin || Convert.ToInt32(DT3.Rows[y]["Width"]) <= WidthMargin)
                            continue;

                        if (IsBox)
                        {
                            if (Height >= 100 && Width >= 100)
                                continue;
                        }
                        else
                        {
                            if (Height < 100 || Width < 100)
                                continue;
                        }

                        foreach (DataRow item in Srows)
                            Count += Convert.ToInt32(item["Count"]);

                        Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                        if (Notes.Equals("БРВ"))
                            Name += " " + Notes;
                        DataRow[] rows = DestinationDT.Select("Name = '" + Name + "' AND ColorType=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND Height=" + Height + " AND Width=" + Width);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["ColorType"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                            NewRow["Name"] = Name;
                            NewRow["Height"] = Height;
                            NewRow["Width"] = Width;
                            NewRow["Count"] = Count;
                            DestinationDT.Rows.Add(NewRow);

                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                        }
                    }
                }
            }
        }

        private void DakotaInsetsOnly(DataTable SourceDT, ref DataTable DestinationDT, int HeightMargin, int WidthMargin, bool OrderASC, bool IsBox)
        {
            string SizeASC = "Height, Width, Notes";
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            int H = 0;
            int W = 0;
            string N = string.Empty;

            if (!OrderASC)
                SizeASC = "Height DESC, Width DESC, Notes DESC";
            string filter = string.Empty;
            //Нужно добавлять Id Новых филенок
            using (DataView DV = new DataView(SourceDT, "InsetTypeID IN (29272,29275,29279)", string.Empty, DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    H = 0;
                    W = 0;
                    N = string.Empty;
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), SizeASC, DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "Height", "Width", "Notes" });
                    }

                    for (int y = 0; y < DT3.Rows.Count; y++)
                    {
                        if (Convert.ToInt32(DT3.Rows[y]["Height"]) == H && Convert.ToInt32(DT3.Rows[y]["Width"]) == W &&
                            DT3.Rows[y]["Notes"].ToString() == N)
                            continue;

                        H = Convert.ToInt32(DT3.Rows[y]["Height"]);
                        W = Convert.ToInt32(DT3.Rows[y]["Width"]);
                        N = DT3.Rows[y]["Notes"].ToString();

                        filter = "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND Height=" + Convert.ToInt32(DT3.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT3.Rows[y]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                        if (DT3.Rows[y]["Notes"] != DBNull.Value && DT3.Rows[y]["Notes"].ToString().Length > 0)
                            filter = "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND Height=" + Convert.ToInt32(DT3.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT3.Rows[y]["Width"]) +
                            " AND Notes='" + DT3.Rows[y]["Notes"].ToString() + "'";

                        DataRow[] Srows = SourceDT.Select(filter);
                        if (Srows.Count() == 0)
                            continue;

                        int Count = 0;
                        int Height = Convert.ToInt32(DT3.Rows[y]["Height"]) - HeightMargin;
                        int Width = Convert.ToInt32(DT3.Rows[y]["Width"]) - WidthMargin;
                        string Name = string.Empty;
                        string Notes = DT3.Rows[y]["Notes"].ToString();

                        if (Convert.ToInt32(DT3.Rows[y]["Height"]) <= HeightMargin || Convert.ToInt32(DT3.Rows[y]["Width"]) <= WidthMargin)
                            continue;

                        if (IsBox)
                        {
                            if (Height >= 100 && Width >= 100)
                                continue;
                        }
                        else
                        {
                            if (Height < 100 || Width < 100)
                                continue;
                        }

                        foreach (DataRow item in Srows)
                            Count += Convert.ToInt32(item["Count"]);

                        Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                        if (Notes.Equals("БРВ"))
                            Name += " " + Notes;
                        DataRow[] rows = DestinationDT.Select("Name = '" + Name + "' AND ColorType=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND Height=" + Height + " AND Width=" + Width);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["ColorType"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                            NewRow["Name"] = Name;
                            NewRow["Height"] = Height;
                            NewRow["Width"] = Width;
                            NewRow["Count"] = Count;
                            DestinationDT.Rows.Add(NewRow);

                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                        }
                    }
                }
            }
        }

        private void BoxInsetsOnly(DataTable SourceDT, ref DataTable DestinationDT, int HeightMargin, int WidthMargin, bool OrderASC, bool IsBox)
        {
            string SizeASC = "Height, Width";
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();

            if (!OrderASC)
                SizeASC = "Height DESC, Width DESC";

            DataRow[] irows = InsetTypesDataTable.Select("(GroupID = 3 OR GroupID = 4) AND InsetTypeID<>29272");
            string filter = string.Empty;
            foreach (DataRow item in irows)
                filter += item["InsetTypeID"].ToString() + ",";
            if (filter.Length > 0)
                filter = "InsetTypeID IN (" + filter.Substring(0, filter.Length - 1) + ")";

            using (DataView DV = new DataView(SourceDT, filter + " OR InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531) OR InsetTypeID IN (685,686,687,688,29470,29471) OR InsetTypeID IN (28961,3653,3654,3655)", string.Empty, DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), SizeASC, DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "Height", "Width" });
                    }
                    for (int y = 0; y < DT3.Rows.Count; y++)
                    {
                        DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND Height=" + Convert.ToInt32(DT3.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT3.Rows[y]["Width"]));
                        if (Srows.Count() == 0)
                            continue;

                        int Count = 0;
                        int Height = Convert.ToInt32(DT3.Rows[y]["Height"]) - HeightMargin;
                        int Width = Convert.ToInt32(DT3.Rows[y]["Width"]) - WidthMargin;
                        string Name = string.Empty;
                        if (Convert.ToInt32(DT3.Rows[y]["Height"]) <= HeightMargin || Convert.ToInt32(DT3.Rows[y]["Width"]) <= WidthMargin)
                            continue;

                        foreach (DataRow item in Srows)
                            Count += Convert.ToInt32(item["Count"]);
                        Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"]));
                        DataRow[] rows = DestinationDT.Select("Name = '" + Name + "' AND ColorType = " + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND Height=" + Height + " AND Width=" + Width);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["ColorType"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                            NewRow["Name"] = Name;
                            NewRow["Height"] = Height;
                            NewRow["Width"] = Width;
                            NewRow["Count"] = Count;
                            DestinationDT.Rows.Add(NewRow);

                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                        }
                    }
                }
            }
        }

        private void GridInsetsOnly(DataTable SourceDT, ref DataTable DestinationDT, int HeightMargin, int WidthMargin, bool OrderASC, bool IsBox)
        {
            string SizeASC = "Height, Width";
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();

            if (!OrderASC)
                SizeASC = "Height DESC, Width DESC";
            //InsetTypeID IN (685,686,687,688,29470,29471) РЕШЕТКИ
            //InsetTypeID IN (28961,3653,3654,3655) АПЛИКАЦИИ
            //InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531) ФИЛЕНКИ

            using (DataView DV = new DataView(SourceDT, "InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531) OR InsetTypeID IN (685,686,687,688,29470,29471) OR InsetTypeID IN (28961,3653,3654,3655)", string.Empty, DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "InsetTypeID" });
            }

            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetColorID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]), SizeASC, DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "Height", "Width" });
                    }
                    for (int y = 0; y < DT3.Rows.Count; y++)
                    {
                        DataRow[] Srows = SourceDT.Select("InsetTypeID=" + Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND Height=" + Convert.ToInt32(DT3.Rows[y]["Height"]) + " AND Width=" + Convert.ToInt32(DT3.Rows[y]["Width"]));
                        if (Srows.Count() == 0)
                            continue;

                        int Count = 0;
                        int Height = Convert.ToInt32(DT3.Rows[y]["Height"]) - HeightMargin;
                        int Width = Convert.ToInt32(DT3.Rows[y]["Width"]) - WidthMargin;
                        string Name = string.Empty;

                        if (Convert.ToInt32(DT3.Rows[y]["Height"]) <= HeightMargin || Convert.ToInt32(DT3.Rows[y]["Width"]) <= WidthMargin)
                            continue;

                        foreach (DataRow item in Srows)
                            Count += Convert.ToInt32(item["Count"]);

                        if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 685 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 688 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 29470)
                            Name = " 45";
                        if (Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 686 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 687 || Convert.ToInt32(DT1.Rows[i]["InsetTypeID"]) == 29471)
                            Name = " 90";
                        Name = GetInsetTypeName(Convert.ToInt32(Srows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(DT2.Rows[j]["InsetColorID"])) + Name;
                        DataRow[] rows = DestinationDT.Select("Name='" + Name + "' AND ColorType = " + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                            " AND Height=" + Height + " AND Width=" + Width);
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = DestinationDT.NewRow();
                            NewRow["ColorType"] = Convert.ToInt32(DT2.Rows[j]["InsetColorID"]);
                            NewRow["Name"] = Name;
                            NewRow["Height"] = Height;
                            NewRow["Width"] = Width;
                            NewRow["Count"] = Count;
                            DestinationDT.Rows.Add(NewRow);

                        }
                        else
                        {
                            rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                        }
                    }
                }
            }
        }

        private void CollectSimpleInsets(ref DataTable DestinationDT, bool OrderASC, bool IsBox)
        {
            if (LorenzoSimpleDT.Rows.Count > 0)
                SimpleInsetsOnly(LorenzoSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.LorenzoSimpleInsetHeight), Convert.ToInt32(FrontMargins.LorenzoSimpleInsetWidth), OrderASC, IsBox);
            if (ElegantSimpleDT.Rows.Count > 0)
                SimpleInsetsOnly(ElegantSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.ElegantSimpleInsetHeight), Convert.ToInt32(FrontMargins.ElegantSimpleInsetWidth), OrderASC, IsBox);
            if (KansasSimpleDT.Rows.Count > 0)
                SimpleInsetsOnly(KansasSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.KansasSimpleInsetHeight), Convert.ToInt32(FrontMargins.KansasSimpleInsetWidth), OrderASC, IsBox);
            if (DakotaSimpleDT.Rows.Count > 0)
                SimpleInsetsOnly(DakotaSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.DakotaSimpleInsetHeight), Convert.ToInt32(FrontMargins.DakotaSimpleInsetWidth), OrderASC, IsBox);
            if (SofiaSimpleDT.Rows.Count > 0)
                SimpleInsetsOnly(SofiaSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.SofiaSimpleInsetHeight), Convert.ToInt32(FrontMargins.SofiaSimpleInsetWidth), OrderASC, IsBox);
            if (!IsBox && DakotaAppliqueDT.Rows.Count > 0)
                SimpleInsetsOnly(DakotaAppliqueDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.DakotaSimpleInsetHeight), Convert.ToInt32(FrontMargins.DakotaSimpleInsetWidth), OrderASC, IsBox);
            if (!IsBox && SofiaAppliqueDT.Rows.Count > 0)
                SimpleInsetsOnly(SofiaAppliqueDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.SofiaSimpleInsetHeight), Convert.ToInt32(FrontMargins.SofiaSimpleInsetWidth), OrderASC, IsBox);
            if (Turin1SimpleDT.Rows.Count > 0)
                SimpleInsetsOnly(Turin1SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Turin1SimpleInsetHeight), Convert.ToInt32(FrontMargins.Turin1SimpleInsetWidth), OrderASC, IsBox);
            if (Turin1_1SimpleDT.Rows.Count > 0)
                SimpleInsetsOnly(Turin1_1SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Turin1SimpleInsetHeight), Convert.ToInt32(FrontMargins.Turin1SimpleInsetWidth), OrderASC, IsBox);
            if (Turin3SimpleDT.Rows.Count > 0)
                SimpleInsetsOnly(Turin3SimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Turin3SimpleInsetHeight), Convert.ToInt32(FrontMargins.Turin3SimpleInsetWidth), OrderASC, IsBox);
            if (LeonSimpleDT.Rows.Count > 0)
                SimpleInsetsOnly(LeonSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.LeonSimpleInsetHeight), Convert.ToInt32(FrontMargins.LeonSimpleInsetWidth), OrderASC, IsBox);
            if (InfinitiSimpleDT.Rows.Count > 0)
                SimpleInsetsOnly(InfinitiSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.InfinitiSimpleInsetHeight), Convert.ToInt32(FrontMargins.InfinitiSimpleInsetWidth), OrderASC, IsBox);
        }

        private void CollectDakotaInsets(ref DataTable DestinationDT, bool OrderASC, bool IsBox)
        {
            if (DakotaSimpleDT.Rows.Count > 0)
                DakotaInsetsOnly(DakotaSimpleDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.DakotaSimpleInsetHeight), Convert.ToInt32(FrontMargins.DakotaSimpleInsetWidth), OrderASC, IsBox);
        }

        private void CollectGridInsets(ref DataTable DestinationDT, bool OrderASC, bool IsBox)
        {
            if (LorenzoGridsDT.Rows.Count > 0)
                GridInsetsOnly(LorenzoGridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.LorenzoGridInsetHeight), Convert.ToInt32(FrontMargins.LorenzoGridInsetWidth), OrderASC, IsBox);
            if (ElegantGridsDT.Rows.Count > 0)
                GridInsetsOnly(ElegantGridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.ElegantGridInsetHeight), Convert.ToInt32(FrontMargins.ElegantGridInsetWidth), OrderASC, IsBox);
            if (KansasGridsDT.Rows.Count > 0)
                GridInsetsOnly(KansasGridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.KansasGridInsetHeight), Convert.ToInt32(FrontMargins.KansasGridInsetWidth), OrderASC, IsBox);
            if (DakotaGridsDT.Rows.Count > 0)
                GridInsetsOnly(DakotaGridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.DakotaGridInsetHeight), Convert.ToInt32(FrontMargins.DakotaGridInsetWidth), OrderASC, IsBox);
            if (SofiaGridsDT.Rows.Count > 0)
                GridInsetsOnly(SofiaGridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.SofiaGridInsetHeight), Convert.ToInt32(FrontMargins.SofiaGridInsetWidth), OrderASC, IsBox);
            //if (!IsBox && SofiaAppliqueDT.Rows.Count > 0)
            //    GridInsetsOnly(SofiaAppliqueDT, ref DestinationDT,
            //        Convert.ToInt32(FrontMargins.SofiaGridInsetHeight), Convert.ToInt32(FrontMargins.SofiaGridInsetWidth), OrderASC, IsBox);
            if (Turin1GridsDT.Rows.Count > 0)
                GridInsetsOnly(Turin1GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Turin1GridInsetHeight), Convert.ToInt32(FrontMargins.Turin1GridInsetWidth), OrderASC, IsBox);
            if (Turin1_1GridsDT.Rows.Count > 0)
                GridInsetsOnly(Turin1_1GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Turin1GridInsetHeight), Convert.ToInt32(FrontMargins.Turin1GridInsetWidth), OrderASC, IsBox);
            if (Turin3GridsDT.Rows.Count > 0)
                GridInsetsOnly(Turin3GridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Turin3GridInsetHeight), Convert.ToInt32(FrontMargins.Turin3GridInsetWidth), OrderASC, IsBox);
            if (LeonGridsDT.Rows.Count > 0)
                GridInsetsOnly(LeonGridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.LeonGridInsetHeight), Convert.ToInt32(FrontMargins.LeonGridInsetWidth), OrderASC, IsBox);
            if (InfinitiGridsDT.Rows.Count > 0)
                GridInsetsOnly(InfinitiGridsDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.InfinitiGridInsetHeight), Convert.ToInt32(FrontMargins.InfinitiGridInsetWidth), OrderASC, IsBox);
        }

        private void CollectBoxInsets(ref DataTable DestinationDT, bool OrderASC, bool IsBox)
        {
            if (LorenzoBoxesDT.Rows.Count > 0)
                BoxInsetsOnly(LorenzoBoxesDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.LorenzoBoxInsetHeight), Convert.ToInt32(FrontMargins.LorenzoBoxInsetWidth), OrderASC, IsBox);
            if (ElegantBoxesDT.Rows.Count > 0)
                BoxInsetsOnly(ElegantBoxesDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.ElegantBoxInsetHeight), Convert.ToInt32(FrontMargins.ElegantBoxInsetWidth), OrderASC, IsBox);
            if (KansasBoxesDT.Rows.Count > 0)
                BoxInsetsOnly(KansasBoxesDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.KansasBoxInsetHeight), Convert.ToInt32(FrontMargins.KansasBoxInsetWidth), OrderASC, IsBox);
            if (DakotaBoxesDT.Rows.Count > 0)
                BoxInsetsOnly(DakotaBoxesDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.DakotaBoxInsetHeight), Convert.ToInt32(FrontMargins.DakotaBoxInsetWidth), OrderASC, IsBox);
            if (SofiaBoxesDT.Rows.Count > 0)
                BoxInsetsOnly(SofiaBoxesDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.SofiaBoxInsetHeight), Convert.ToInt32(FrontMargins.SofiaBoxInsetWidth), OrderASC, IsBox);
            if (Turin1BoxesDT.Rows.Count > 0)
                BoxInsetsOnly(Turin1BoxesDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Turin1BoxInsetHeight), Convert.ToInt32(FrontMargins.Turin1BoxInsetWidth), OrderASC, IsBox);
            if (Turin3BoxesDT.Rows.Count > 0)
                BoxInsetsOnly(Turin3BoxesDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.Turin3BoxInsetHeight), Convert.ToInt32(FrontMargins.Turin3BoxInsetWidth), OrderASC, IsBox);
            if (LeonBoxesDT.Rows.Count > 0)
                BoxInsetsOnly(LeonBoxesDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.LeonBoxInsetHeight), Convert.ToInt32(FrontMargins.LeonBoxInsetWidth), OrderASC, IsBox);
            if (InfinitiBoxesDT.Rows.Count > 0)
                BoxInsetsOnly(InfinitiBoxesDT, ref DestinationDT,
                    Convert.ToInt32(FrontMargins.InfinitiBoxInsetHeight), Convert.ToInt32(FrontMargins.InfinitiBoxInsetWidth), OrderASC, IsBox);
        }

        #endregion

        public void ClearOrders()
        {
            FrontsID.Clear();
            BagetWithAngelOrdersDT.Clear();
            NotArchDecorOrdersDT.Clear();
            ArchDecorOrdersDT.Clear();
            GridsDecorOrdersDT.Clear();

            LorenzoOrdersDT.Clear();
            ElegantOrdersDT.Clear();
            KansasOrdersDT.Clear();
            DakotaOrdersDT.Clear();
            SofiaOrdersDT.Clear();
            Turin1OrdersDT.Clear();
            Turin1_1OrdersDT.Clear();
            Turin3OrdersDT.Clear();
            LeonOrdersDT.Clear();
            InfinitiOrdersDT.Clear();

            LorenzoCurvedOrdersDT.Clear();
            ElegantCurvedOrdersDT.Clear();
            KansasCurvedOrdersDT.Clear();
            SofiaCurvedOrdersDT.Clear();
            DakotaCurvedOrdersDT.Clear();
            Turin1CurvedOrdersDT.Clear();
            Turin1_1CurvedOrdersDT.Clear();
            Turin3CurvedOrdersDT.Clear();
            InfinitiCurvedOrdersDT.Clear();
        }

        public ArrayList GetFrontsID
        {
            set
            {
                FrontsID = value;
            }
        }

        public bool GetOrders(int WorkAssignmentID, int FactoryID)
        {
            GetNotArchDecorOrders(ref NotArchDecorOrdersDT, WorkAssignmentID, FactoryID);
            GetBagetWithAngleOrders(ref BagetWithAngelOrdersDT, WorkAssignmentID, FactoryID);
            GetArchDecorOrders(ref ArchDecorOrdersDT, WorkAssignmentID, FactoryID);
            GetGridsDecorOrders(ref GridsDecorOrdersDT, WorkAssignmentID, FactoryID);

            GetCurvedFrontsOrders(ref LorenzoCurvedOrdersDT, WorkAssignmentID, FactoryID, @"(15580,15581,15582,15583,15584,15585,15586,15587)");
            GetCurvedFrontsOrders(ref ElegantCurvedOrdersDT, WorkAssignmentID, FactoryID, @"(-1)");
            GetCurvedFrontsOrders(ref KansasCurvedOrdersDT, WorkAssignmentID, FactoryID, @"(1658,1659,1660,1661,1991,1992,1993,1994)");
            GetCurvedFrontsOrders(ref SofiaCurvedOrdersDT, WorkAssignmentID, FactoryID, @"(1654,1655,1656,1657,1987,1988,1989,1990)");
            GetCurvedFrontsOrders(ref DakotaCurvedOrdersDT, WorkAssignmentID, FactoryID, @"(29212,29214,29215,29216)");
            GetCurvedFrontsOrders(ref Turin1_1CurvedOrdersDT, WorkAssignmentID, FactoryID, @"(-1)");
            GetCurvedFrontsOrders(ref Turin1CurvedOrdersDT, WorkAssignmentID, FactoryID, @"(1646,1647,1648,1649,1979,1980,1981,1982)");
            GetCurvedFrontsOrders(ref Turin3CurvedOrdersDT, WorkAssignmentID, FactoryID, @"(1650,1651,1652,1653,1983,1984,1985,1986)");
            GetCurvedFrontsOrders(ref InfinitiCurvedOrdersDT, WorkAssignmentID, FactoryID, @"(14958,14959,14960,14961,14994,14995,14996,14997)");

            ProfileNamesDT.Clear();
            for (int i = 0; i < FrontsID.Count; i++)
            {
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Elegant))
                {
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Elegant);
                    GetFrontsOrders(ref ElegantOrdersDT, WorkAssignmentID, FactoryID, Fronts.Elegant);
                }
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Lorenzo))
                {
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Lorenzo);
                    GetFrontsOrders(ref LorenzoOrdersDT, WorkAssignmentID, FactoryID, Fronts.Lorenzo);
                }
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Kansas))
                {
                    GetFrontsOrders(ref KansasOrdersDT, WorkAssignmentID, FactoryID, Fronts.Kansas);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Kansas);
                }
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.KansasPat))
                {
                    GetFrontsOrders(ref KansasOrdersDT, WorkAssignmentID, FactoryID, Fronts.KansasPat);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.KansasPat);
                }
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.DakotaPat))
                {
                    GetFrontsOrders(ref DakotaOrdersDT, WorkAssignmentID, FactoryID, Fronts.DakotaPat);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.DakotaPat);
                }
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Dakota))
                {
                    GetFrontsOrders(ref DakotaOrdersDT, WorkAssignmentID, FactoryID, Fronts.Dakota);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Dakota);
                }
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Sofia))
                {
                    GetFrontsOrders(ref SofiaOrdersDT, WorkAssignmentID, FactoryID, Fronts.Sofia);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Sofia);
                }
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Turin1))
                {
                    GetFrontsOrders(ref Turin1OrdersDT, WorkAssignmentID, FactoryID, Fronts.Turin1);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Turin1);
                }
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Turin1_1))
                {
                    GetFrontsOrders(ref Turin1_1OrdersDT, WorkAssignmentID, FactoryID, Fronts.Turin1_1);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Turin1_1);
                }
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Turin3))
                {
                    GetFrontsOrders(ref Turin3OrdersDT, WorkAssignmentID, FactoryID, Fronts.Turin3);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Turin3);
                }
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.LeonTPS))
                {
                    GetFrontsOrders(ref LeonOrdersDT, WorkAssignmentID, FactoryID, Fronts.LeonTPS);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.LeonTPS);
                }
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.Infiniti))
                {
                    GetFrontsOrders(ref InfinitiOrdersDT, WorkAssignmentID, FactoryID, Fronts.Infiniti);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Infiniti);
                }
                if (Convert.ToInt32(Convert.ToInt32(FrontsID[i])) == Convert.ToInt32(Fronts.InfinitiPat))
                {
                    GetFrontsOrders(ref InfinitiOrdersDT, WorkAssignmentID, FactoryID, Fronts.InfinitiPat);
                    GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.InfinitiPat);
                }
            }

            if (LorenzoCurvedOrdersDT.Rows.Count == 0 && ElegantCurvedOrdersDT.Rows.Count == 0 && KansasCurvedOrdersDT.Rows.Count == 0 && SofiaCurvedOrdersDT.Rows.Count == 0 && DakotaCurvedOrdersDT.Rows.Count == 0 && Turin1CurvedOrdersDT.Rows.Count == 0 && Turin1_1CurvedOrdersDT.Rows.Count == 0 && Turin3CurvedOrdersDT.Rows.Count == 0 && InfinitiCurvedOrdersDT.Rows.Count == 0 &&
                LorenzoOrdersDT.Rows.Count == 0 && ElegantOrdersDT.Rows.Count == 0 && KansasOrdersDT.Rows.Count == 0 && DakotaOrdersDT.Rows.Count == 0 && SofiaOrdersDT.Rows.Count == 0 && Turin1OrdersDT.Rows.Count == 0 && Turin1_1OrdersDT.Rows.Count == 0 && Turin3OrdersDT.Rows.Count == 0 && LeonOrdersDT.Rows.Count == 0 && InfinitiOrdersDT.Rows.Count == 0 &&
                BagetWithAngelOrdersDT.Rows.Count == 0 && NotArchDecorOrdersDT.Rows.Count == 0 && ArchDecorOrdersDT.Rows.Count == 0 && GridsDecorOrdersDT.Rows.Count == 0)
                return false;
            else
                return true;

        }

        public void GetCurrentDate()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.UsersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    CurrentDate = Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        public void CreateExcel(int WorkAssignmentID, Machines Machine, string ClientName, string BatchName, ref string sSourceFileName)
        {
            GetCurrentDate();

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont Calibri11F = hssfworkbook.CreateFont();
            Calibri11F.FontHeightInPoints = 11;
            Calibri11F.FontName = "Calibri";

            HSSFFont CalibriBold11F = hssfworkbook.CreateFont();
            CalibriBold11F.FontHeightInPoints = 11;
            CalibriBold11F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold11F.FontName = "Calibri";

            HSSFFont Serif8F = hssfworkbook.CreateFont();
            Serif8F.FontHeightInPoints = 8;
            Serif8F.FontName = "MS Sans Serif";

            HSSFFont Serif10F = hssfworkbook.CreateFont();
            Serif10F.FontHeightInPoints = 10;
            Serif10F.FontName = "MS Sans Serif";

            HSSFFont SerifBold10F = hssfworkbook.CreateFont();
            SerifBold10F.FontHeightInPoints = 10;
            SerifBold10F.FontName = "MS Sans Serif";
            SerifBold10F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;

            HSSFCellStyle Calibri11CS = hssfworkbook.CreateCellStyle();
            Calibri11CS.SetFont(Calibri11F);

            HSSFCellStyle CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.SetFont(CalibriBold11F);

            HSSFCellStyle TableHeaderCS = hssfworkbook.CreateCellStyle();
            TableHeaderCS.Alignment = HSSFCellStyle.ALIGN_LEFT;
            TableHeaderCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.SetFont(Serif8F);

            HSSFCellStyle TableHeaderDecCS = hssfworkbook.CreateCellStyle();
            TableHeaderDecCS.Alignment = HSSFCellStyle.ALIGN_LEFT;
            TableHeaderDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.SetFont(Serif8F);

            HSSFCellStyle WorkerColumnCS = hssfworkbook.CreateCellStyle();
            WorkerColumnCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            WorkerColumnCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.BottomBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.LeftBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.RightBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.TopBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.SetFont(Serif10F);

            HSSFCellStyle TableContentCS = hssfworkbook.CreateCellStyle();
            TableContentCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableContentCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableContentCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableContentCS.RightBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableContentCS.TopBorderColor = HSSFColor.BLACK.index;
            TableContentCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountCS = hssfworkbook.CreateCellStyle();
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountDecCS = hssfworkbook.CreateCellStyle();
            TotamAmountDecCS.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            #endregion

            int Admission = 0;
            string MachineName = string.Empty;

            switch (Machine)
            {
                case Machines.Balistrini:
                    Admission = 10;
                    MachineName = "Balistrini";
                    break;
                case Machines.ELME:
                    Admission = 20;
                    MachineName = "Elme";
                    break;
                case Machines.Rapid:
                    Admission = 30;
                    MachineName = "Rapid";
                    break;
                default:
                    break;
            }

            LorenzoSimpleDT.Clear();
            ElegantSimpleDT.Clear();
            KansasSimpleDT.Clear();
            DakotaSimpleDT.Clear();
            SofiaSimpleDT.Clear();
            Turin1SimpleDT.Clear();
            Turin1_1SimpleDT.Clear();
            Turin3SimpleDT.Clear();
            LeonSimpleDT.Clear();
            InfinitiSimpleDT.Clear();

            LorenzoVitrinaDT.Clear();
            ElegantVitrinaDT.Clear();
            KansasVitrinaDT.Clear();
            DakotaVitrinaDT.Clear();
            SofiaVitrinaDT.Clear();
            Turin1VitrinaDT.Clear();
            Turin1_1VitrinaDT.Clear();
            Turin3VitrinaDT.Clear();
            LeonVitrinaDT.Clear();
            InfinitiVitrinaDT.Clear();

            Turin1RemovingBoxesDT.Clear();
            Turin3RemovingBoxesDT.Clear();

            GetVitrinaFronts(LorenzoOrdersDT, ref LorenzoVitrinaDT);
            GetVitrinaFronts(ElegantOrdersDT, ref ElegantVitrinaDT);
            GetVitrinaFronts(KansasOrdersDT, ref KansasVitrinaDT);
            GetVitrinaFronts(DakotaOrdersDT, ref DakotaVitrinaDT);
            GetVitrinaFronts(SofiaOrdersDT, ref SofiaVitrinaDT);
            GetVitrinaFronts(Turin1OrdersDT, ref Turin1VitrinaDT);
            GetVitrinaFronts(Turin1_1OrdersDT, ref Turin1_1VitrinaDT);
            GetVitrinaFronts(Turin3OrdersDT, ref Turin3VitrinaDT);
            GetVitrinaFronts(LeonOrdersDT, ref LeonVitrinaDT);
            GetVitrinaFronts(InfinitiOrdersDT, ref InfinitiVitrinaDT);

            GetRemovingBoxesFronts(Turin1OrdersDT, ref Turin1RemovingBoxesDT, 138);
            GetRemovingBoxesFronts(Turin1_1OrdersDT, ref Turin1RemovingBoxesDT, 138);
            GetRemovingBoxesFronts(Turin3OrdersDT, ref Turin3RemovingBoxesDT, 138);

            GetSimpleFronts(LorenzoOrdersDT, ref LorenzoSimpleDT, 222);
            GetSimpleFronts(ElegantOrdersDT, ref ElegantSimpleDT, 222);
            GetSimpleFronts(KansasOrdersDT, ref KansasSimpleDT, 222);
            GetSimpleFronts(DakotaOrdersDT, ref DakotaSimpleDT, 222);
            GetSimpleFronts(SofiaOrdersDT, ref SofiaSimpleDT, 222);
            GetSimpleFronts(Turin1OrdersDT, ref Turin1SimpleDT, 175);
            GetSimpleFronts(Turin1_1OrdersDT, ref Turin1_1SimpleDT, 175);
            GetSimpleFronts(Turin3OrdersDT, ref Turin3SimpleDT, 175);
            GetSimpleFronts(LeonOrdersDT, ref LeonSimpleDT, 175);
            GetSimpleFronts(InfinitiOrdersDT, ref InfinitiSimpleDT, 222);

            LorenzoGridsDT.Clear();
            ElegantGridsDT.Clear();
            KansasGridsDT.Clear();
            DakotaGridsDT.Clear();
            SofiaGridsDT.Clear();
            Turin1GridsDT.Clear();
            Turin1_1GridsDT.Clear();
            Turin3GridsDT.Clear();
            LeonGridsDT.Clear();
            InfinitiGridsDT.Clear();

            DakotaAppliqueDT.Clear();
            GetAppliqueFronts(DakotaOrdersDT, ref DakotaAppliqueDT);
            SofiaAppliqueDT.Clear();
            GetAppliqueFronts(SofiaOrdersDT, ref SofiaAppliqueDT);

            GetGridFronts(LorenzoOrdersDT, ref LorenzoGridsDT);
            GetGridFronts(ElegantOrdersDT, ref ElegantGridsDT);
            GetGridFronts(KansasOrdersDT, ref KansasGridsDT);
            GetGridFronts(DakotaOrdersDT, ref DakotaGridsDT);
            GetGridFronts(SofiaOrdersDT, ref SofiaGridsDT);
            GetGridFronts(Turin1OrdersDT, ref Turin1GridsDT);
            GetGridFronts(Turin1_1OrdersDT, ref Turin1_1GridsDT);
            GetGridFronts(Turin3OrdersDT, ref Turin3GridsDT);
            GetGridFronts(LeonOrdersDT, ref LeonGridsDT);
            GetGridFronts(InfinitiOrdersDT, ref InfinitiGridsDT);

            LorenzoBoxesDT.Clear();
            ElegantBoxesDT.Clear();
            KansasBoxesDT.Clear();
            DakotaBoxesDT.Clear();
            SofiaBoxesDT.Clear();
            Turin1BoxesDT.Clear();
            Turin1_1BoxesDT.Clear();
            Turin3BoxesDT.Clear();
            LeonBoxesDT.Clear();
            InfinitiBoxesDT.Clear();

            GetBoxFronts(LorenzoOrdersDT, ref LorenzoBoxesDT, 222);
            GetBoxFronts(ElegantOrdersDT, ref ElegantBoxesDT, 222);
            GetBoxFronts(KansasOrdersDT, ref KansasBoxesDT, 222);
            GetBoxFronts(DakotaOrdersDT, ref DakotaBoxesDT, 222);
            GetBoxFronts(SofiaOrdersDT, ref SofiaBoxesDT, 222);
            GetBoxFronts(Turin1OrdersDT, ref Turin1BoxesDT, 175);
            GetBoxFronts(Turin1_1OrdersDT, ref Turin1_1BoxesDT, 175);
            GetBoxFronts(Turin3OrdersDT, ref Turin3BoxesDT, 175);
            GetBoxFronts(LeonOrdersDT, ref LeonBoxesDT, 175);
            GetBoxFronts(InfinitiOrdersDT, ref InfinitiBoxesDT, 222);

            BagetWithAngleAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            NotArchDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            ArchDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            CurvedAssemblyToExcel(ref hssfworkbook,
                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            GridsDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            Admission = 0;

            InsetToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, 0, WorkAssignmentID, BatchName, ClientName);

            FilenkaToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName);
            
            TrimmingToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, Admission, 0, WorkAssignmentID, BatchName, ClientName);

            AdditionsToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName);

            GashToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, 0, WorkAssignmentID, BatchName, ClientName, MachineName);

            OrdersToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName);

            DataTable DistFrameColorsDT = DistFrameColorsTable(LorenzoOrdersDT, true);
            AssemblyDT.Clear();
            FrontType = 0;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LorenzoSimpleDT, ref AssemblyDT, FrontType);
                CollectAssemblyBoxes(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LorenzoBoxesDT, ref AssemblyDT, FrontType);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LorenzoGridsDT, ref AssemblyDT, FrontType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(KansasOrdersDT, true);
            FrontType = 9;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ElegantSimpleDT, ref AssemblyDT, FrontType);
                CollectAssemblyBoxes(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ElegantBoxesDT, ref AssemblyDT, FrontType);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), ElegantGridsDT, ref AssemblyDT, FrontType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(KansasOrdersDT, true);
            FrontType = 8;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), KansasSimpleDT, ref AssemblyDT, FrontType);
                CollectAssemblyBoxes(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), KansasBoxesDT, ref AssemblyDT, FrontType);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), KansasGridsDT, ref AssemblyDT, FrontType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(DakotaOrdersDT, true);
            FrontType = 7;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), DakotaSimpleDT, ref AssemblyDT, FrontType);
                CollectAssemblyBoxes(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), DakotaBoxesDT, ref AssemblyDT, FrontType);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), DakotaGridsDT, ref AssemblyDT, FrontType);
                CollectAssemblyApplique(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), DakotaAppliqueDT, ref AssemblyDT, FrontType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Turin1_1OrdersDT, true);
            FrontType = 6;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Turin1_1SimpleDT, ref AssemblyDT, FrontType);
                CollectAssemblyBoxes(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Turin1_1BoxesDT, ref AssemblyDT, FrontType);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Turin1_1GridsDT, ref AssemblyDT, FrontType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(SofiaOrdersDT, true);
            FrontType = 1;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), SofiaSimpleDT, ref AssemblyDT, FrontType);
                CollectAssemblyBoxes(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), SofiaBoxesDT, ref AssemblyDT, FrontType);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), SofiaGridsDT, ref AssemblyDT, FrontType);
                CollectAssemblyApplique(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), SofiaAppliqueDT, ref AssemblyDT, FrontType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Turin1OrdersDT, true);
            FrontType = 2;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Turin1SimpleDT, ref AssemblyDT, FrontType);
                CollectAssemblyBoxes(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Turin1BoxesDT, ref AssemblyDT, FrontType);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Turin1GridsDT, ref AssemblyDT, FrontType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(Turin3OrdersDT, true);
            FrontType = 3;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Turin3SimpleDT, ref AssemblyDT, FrontType);
                CollectAssemblyBoxes(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Turin3BoxesDT, ref AssemblyDT, FrontType);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), Turin3GridsDT, ref AssemblyDT, FrontType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(LeonOrdersDT, true);
            FrontType = 4;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LeonSimpleDT, ref AssemblyDT, FrontType);
                CollectAssemblyBoxes(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LeonBoxesDT, ref AssemblyDT, FrontType);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), LeonGridsDT, ref AssemblyDT, FrontType);
            }
            DistFrameColorsDT.Clear();
            DistFrameColorsDT = DistFrameColorsTable(InfinitiOrdersDT, true);
            FrontType = 5;
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                CollectAssemblySimple(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), InfinitiSimpleDT, ref AssemblyDT, FrontType);
                CollectAssemblyBoxes(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), InfinitiBoxesDT, ref AssemblyDT, FrontType);
                CollectAssemblyGrids(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), InfinitiGridsDT, ref AssemblyDT, FrontType);
            }

            decimal div1 = 25;
            decimal div2 = 2.14m;
            decimal time = 0;
            decimal cost = 0;
            PlanningTimebyCount(AssemblyDT, div1, div2, ref time, ref cost);

            AssemblyToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName, time, cost);

            DeyingToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName, Machine);

            DeyingByMainOrderToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            //string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");

            string tempFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
            string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = @"\\192.168.1.6\Public\ТПС\Infinium\Задания\";
            //string tempFolder = @"\\192.168.1.6\Public\USERS_2016\_ДЕЙСТВУЮЩИЕ\ПРОИЗВОДСТВО\ТПС\инфиниум\";
            string CurrentMonthName = DateTime.Now.ToString("MMMM");
            tempFolder = Path.Combine(tempFolder, CurrentMonthName);
            if (!(Directory.Exists(tempFolder)))
            {
                Directory.CreateDirectory(tempFolder);
            }
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            sw.Stop();
            System.Diagnostics.Process.Start(file.FullName);

            //string sSourceFolder = System.Environment.GetEnvironmentVariable("TEMP");
            //string sFolderPath = "Общие файлы/Производство/Задания в работу";
            //string sDestFolder = Configs.DocumentsPath + sFolderPath;
            //sSourceFileName = GetFileName(sDestFolder, BatchName);

            //FileInfo file = new FileInfo(sSourceFolder + @"\" + sSourceFileName);
            //FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            //hssfworkbook.Write(NewFile);
            //NewFile.Close();

        }

        private string GetFileName(string sDestFolder, string ExcelName)
        {
            string sExtension = ".xls";
            string sFileName = ExcelName;

            int j = 1;
            while (FM.FileExist(sDestFolder + "/" + sFileName + sExtension, Configs.FTPType))
            {
                sFileName = ExcelName + "(" + j++ + ")";
            }
            sFileName = sFileName + sExtension;
            return sFileName;
        }

        private void GetPlanningCurved(DataTable table, ref decimal time, ref decimal cost)
        {
            int VitrinaCount = 0;
            int NotVitrinaCount = 0;

            for (int x = 0; x < table.Rows.Count; x++)
            {
                if (table.Rows[x]["Count"] != DBNull.Value)
                {
                    // Витрины
                    if (Convert.ToInt32(table.Rows[x]["InsetTypeID"]) == 1)
                        VitrinaCount += Convert.ToInt32(table.Rows[x]["Count"]);
                    // Глухие
                    if (Convert.ToInt32(table.Rows[x]["InsetTypeID"]) != 1 && Convert.ToInt32(table.Rows[x]["InsetTypeID"]) != -1)
                        NotVitrinaCount += Convert.ToInt32(table.Rows[x]["Count"]);
                }
            }

            time = Decimal.Round(VitrinaCount / 4 + NotVitrinaCount / 2, 3, MidpointRounding.AwayFromZero);
            cost = Decimal.Round(time * 2.14m, 2, MidpointRounding.AwayFromZero);
        }

        private void PlanningTimebyCount(DataTable table, decimal div1, decimal div2, ref decimal time, ref decimal cost)
        {
            for (int x = 0; x < table.Rows.Count; x++)
            {
                if (table.Rows[x]["Count"] != DBNull.Value)
                    time += Convert.ToInt32(table.Rows[x]["Count"]);
            }

            if (div1 != 0)
                time = Decimal.Round(time / div1, 3, MidpointRounding.AwayFromZero);

            cost = Decimal.Round(time * div2, 2, MidpointRounding.AwayFromZero);
        }

        private void GetPlanningFilenka(DataTable table, decimal div1, decimal div2, decimal div3, ref decimal time, ref decimal cost)
        {
            decimal filenkaCount = 0;
            decimal allCount = 0;

            for (int x = 0; x < table.Rows.Count; x++)
            {
                if (table.Rows[x]["Square"] != DBNull.Value)
                {
                    // Фл04, Фл07
                    string name = table.Rows[x]["Name"].ToString();
                    string substr1 = "Фл04";
                    string substr2 = "Фл07";

                    if (name.Contains((substr1)) || name.Contains((substr2)))
                        filenkaCount += Convert.ToDecimal(table.Rows[x]["Square"]);
                    else
                        allCount += Convert.ToDecimal(table.Rows[x]["Square"]);
                }
            }

            time = Decimal.Round(filenkaCount / div1 + allCount / div2, 3, MidpointRounding.AwayFromZero);
            cost = Decimal.Round(time * div3, 2, MidpointRounding.AwayFromZero);
        }

        private void PlanningTimebySquare(DataTable table, decimal div1, decimal div2, ref decimal time, ref decimal cost)
        {
            for (int x = 0; x < table.Rows.Count; x++)
            {
                if (table.Rows[x]["Square"] != DBNull.Value)
                    time += Convert.ToDecimal(table.Rows[x]["Square"]);
            }

            if (div1 != 0)
                time = Decimal.Round(time / div1, 3, MidpointRounding.AwayFromZero);

            cost = Decimal.Round(time * div2, 2, MidpointRounding.AwayFromZero);
        }

        private void PlanningTimeGashRapid(DataTable table, ref decimal time, ref decimal cost)
        {
            decimal sum1 = 0;
            decimal sum2 = 0;
            for (int x = 0; x < table.Rows.Count; x++)
            {
                int Height = Convert.ToInt32(table.Rows[x]["Height"]);

                if (table.Rows[x]["Count"] != DBNull.Value)
                {
                    if (Height <= 296)
                    {
                        sum1 += Convert.ToInt32(table.Rows[x]["Count"]);
                    }
                    else
                    {
                        sum2 += Convert.ToInt32(table.Rows[x]["Count"]);
                    }
                }
            }

            time = sum1 * 2 / 200 + sum2 / 200;
            cost = Decimal.Round(time * 2.14m, 2, MidpointRounding.AwayFromZero);
        }

        private void PlanningTimeDeyning(DataTable table, Machines machine, ref decimal time, ref decimal cost)
        {
            int div = 7;
            decimal Square = 0;

            for (int x = 0; x < table.Rows.Count; x++)
            {
                if (table.Rows[x]["Square"] != DBNull.Value)
                {
                    Square += Convert.ToDecimal(table.Rows[x]["Square"]);
                }
            }

            if (machine == Machines.Balistrini)
                div = 5;
            time = Decimal.Round(Square / div, 3, MidpointRounding.AwayFromZero);
            cost = Decimal.Round(time * 1.25m, 2, MidpointRounding.AwayFromZero);
        }

        private void PlanningTimeMarketPacking(DataTable table, ref decimal time, ref decimal cost)
        {
            decimal VitrinaCount = 0;
            decimal Square = 0;

            for (int x = 0; x < table.Rows.Count; x++)
            {
                if (table.Rows[x]["Count"] != DBNull.Value)
                {
                    // Витрины
                    if (table.Rows[x]["InsetColor"].ToString() == "Витрина")
                        VitrinaCount += Convert.ToDecimal(table.Rows[x]["Count"]);
                    // квадратура всех фасадов
                    Square += Convert.ToDecimal(table.Rows[x]["Square"]);
                }
            }

            time = Decimal.Round(VitrinaCount / 26 + Square / 8, 3, MidpointRounding.AwayFromZero);
            cost = Decimal.Round(time * 2.14m, 2, MidpointRounding.AwayFromZero);
        }

        public void OrdersToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName)
        {
            int RowIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Заказы");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            if (LorenzoBoxesDT.Rows.Count > 0 || LorenzoGridsDT.Rows.Count > 0 || LorenzoSimpleDT.Rows.Count > 0)
            {
                SummingOrders(LorenzoOrdersDT, LorenzoBoxesDT, LorenzoGridsDT, LorenzoSimpleDT, LorenzoVitrinaDT, "Лоренцо ШУФ", "Лоренцо РЕШ", "Лоренцо");
                OrdersToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (ElegantBoxesDT.Rows.Count > 0 || ElegantGridsDT.Rows.Count > 0 || ElegantSimpleDT.Rows.Count > 0)
            {
                SummingOrders(ElegantOrdersDT, ElegantBoxesDT, ElegantGridsDT, ElegantSimpleDT, ElegantVitrinaDT, "Элегант ШУФ", "Элегант РЕШ", "Элегант");
                OrdersToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (KansasBoxesDT.Rows.Count > 0 || KansasGridsDT.Rows.Count > 0 || KansasSimpleDT.Rows.Count > 0)
            {
                SummingOrders(KansasOrdersDT, KansasBoxesDT, KansasGridsDT, KansasSimpleDT, KansasVitrinaDT, "Канзас ШУФ", "Канзас РЕШ", "Канзас");
                OrdersToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (DakotaBoxesDT.Rows.Count > 0 || DakotaGridsDT.Rows.Count > 0 || DakotaAppliqueDT.Rows.Count > 0 || DakotaSimpleDT.Rows.Count > 0)
            {
                SummingSofiaOrders(DakotaOrdersDT, DakotaBoxesDT, DakotaGridsDT, DakotaAppliqueDT, DakotaSimpleDT, DakotaVitrinaDT, "Дакота ШУФ", "Дакота РЕШ", "Дакота Аппл", "Дакота");
                OrdersToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (SofiaBoxesDT.Rows.Count > 0 || SofiaGridsDT.Rows.Count > 0 || SofiaAppliqueDT.Rows.Count > 0 || SofiaSimpleDT.Rows.Count > 0)
            {
                SummingSofiaOrders(SofiaOrdersDT, SofiaBoxesDT, SofiaGridsDT, SofiaAppliqueDT, SofiaSimpleDT, SofiaVitrinaDT, "София ШУФ", "София РЕШ", "София Аппл", "София");
                OrdersToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (Turin1BoxesDT.Rows.Count > 0 || Turin1GridsDT.Rows.Count > 0 || Turin1SimpleDT.Rows.Count > 0)
            {
                SummingOrders(Turin1OrdersDT, Turin1BoxesDT, Turin1GridsDT, Turin1SimpleDT, Turin1VitrinaDT, "Турин 1 ШУФ", "Турин 1 РЕШ", "Турин 1");
                OrdersToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (Turin1_1BoxesDT.Rows.Count > 0 || Turin1_1GridsDT.Rows.Count > 0 || Turin1_1SimpleDT.Rows.Count > 0)
            {
                SummingOrders(Turin1_1OrdersDT, Turin1_1BoxesDT, Turin1_1GridsDT, Turin1_1SimpleDT, Turin1_1VitrinaDT, "Турин 1 ШУФ", "Турин 1 РЕШ", "Турин 1");
                OrdersToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (Turin3BoxesDT.Rows.Count > 0 || Turin3GridsDT.Rows.Count > 0 || Turin3SimpleDT.Rows.Count > 0)
            {
                SummingOrders(Turin3OrdersDT, Turin3BoxesDT, Turin3GridsDT, Turin3SimpleDT, Turin3VitrinaDT, "Турин 3 ШУФ", "Турин 3 РЕШ", "Турин 3");
                OrdersToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (LeonBoxesDT.Rows.Count > 0 || LeonGridsDT.Rows.Count > 0 || LeonSimpleDT.Rows.Count > 0)
            {
                SummingOrders(LeonOrdersDT, LeonBoxesDT, LeonGridsDT, LeonSimpleDT, LeonVitrinaDT, "Леон ШУФ", "Леон РЕШ", "Леон");
                OrdersToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            if (InfinitiBoxesDT.Rows.Count > 0 || InfinitiGridsDT.Rows.Count > 0 || InfinitiSimpleDT.Rows.Count > 0)
            {
                SummingOrders(InfinitiOrdersDT, InfinitiBoxesDT, InfinitiGridsDT, InfinitiSimpleDT, InfinitiVitrinaDT, "Инфинити ШУФ", "Инфинити РЕШ", "Инфинити");
                OrdersToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, WorkAssignmentID, BatchName, ClientName, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
        }

        private void DeyingToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName, Machines Machine)
        {
            DeyingDT.Clear();

            DataTable DT1 = new DataTable();

            using (DataView DV = new DataView(LorenzoOrdersDT, string.Empty, "ColorID", DataViewRowState.CurrentRows))
            {
                DT1.Clear();
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), LorenzoSimpleDT, ref DeyingDT, string.Empty);
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), LorenzoBoxesDT, ref DeyingDT, " ШУФ");
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), LorenzoGridsDT, ref DeyingDT, " РЕШ");
            }

            using (DataView DV = new DataView(ElegantOrdersDT, string.Empty, "ColorID", DataViewRowState.CurrentRows))
            {
                DT1.Clear();
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), ElegantSimpleDT, ref DeyingDT, string.Empty);
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), ElegantBoxesDT, ref DeyingDT, " ШУФ");
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), ElegantGridsDT, ref DeyingDT, " РЕШ");
            }

            using (DataView DV = new DataView(KansasOrdersDT, string.Empty, "ColorID", DataViewRowState.CurrentRows))
            {
                DT1.Clear();
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), KansasSimpleDT, ref DeyingDT, string.Empty);
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), KansasBoxesDT, ref DeyingDT, " ШУФ");
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), KansasGridsDT, ref DeyingDT, " РЕШ");
            }

            using (DataView DV = new DataView(DakotaOrdersDT, string.Empty, "ColorID", DataViewRowState.CurrentRows))
            {
                DT1.Clear();
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), DakotaSimpleDT, ref DeyingDT, string.Empty);
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), DakotaBoxesDT, ref DeyingDT, " ШУФ");
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), DakotaGridsDT, ref DeyingDT, " РЕШ");
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), DakotaAppliqueDT, ref DeyingDT, " Аппл");
            }
            using (DataView DV = new DataView(SofiaOrdersDT, string.Empty, "ColorID", DataViewRowState.CurrentRows))
            {
                DT1.Clear();
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), SofiaSimpleDT, ref DeyingDT, string.Empty);
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), SofiaBoxesDT, ref DeyingDT, " ШУФ");
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), SofiaGridsDT, ref DeyingDT, " РЕШ");
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), SofiaAppliqueDT, ref DeyingDT, " Аппл");
            }
            using (DataView DV = new DataView(Turin1OrdersDT, string.Empty, "ColorID", DataViewRowState.CurrentRows))
            {
                DT1.Clear();
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), Turin1SimpleDT, ref DeyingDT, string.Empty);
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), Turin1BoxesDT, ref DeyingDT, " ШУФ");
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), Turin1GridsDT, ref DeyingDT, " РЕШ");
            }
            //using (DataView DV = new DataView(Turin1_1OrdersDT, string.Empty, "ColorID", DataViewRowState.CurrentRows))
            //{
            //    DT1.Clear();
            //    DT1 = DV.ToTable(true, new string[] { "ColorID" });
            //}
            //for (int i = 0; i < DT1.Rows.Count; i++)
            //{
            //    CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), Turin1_1SimpleDT, ref DeyingDT, string.Empty);
            //    CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), Turin1_1BoxesDT, ref DeyingDT, " ШУФ");
            //    CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), Turin1_1GridsDT, ref DeyingDT, " РЕШ");
            //}
            using (DataView DV = new DataView(Turin3OrdersDT, string.Empty, "ColorID", DataViewRowState.CurrentRows))
            {
                DT1.Clear();
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), Turin3SimpleDT, ref DeyingDT, string.Empty);
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), Turin3BoxesDT, ref DeyingDT, " ШУФ");
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), Turin3GridsDT, ref DeyingDT, " РЕШ");
            }
            using (DataView DV = new DataView(LeonOrdersDT, string.Empty, "ColorID", DataViewRowState.CurrentRows))
            {
                DT1.Clear();
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), LeonSimpleDT, ref DeyingDT, string.Empty);
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), LeonBoxesDT, ref DeyingDT, " ШУФ");
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), LeonGridsDT, ref DeyingDT, " РЕШ");
            }
            using (DataView DV = new DataView(InfinitiOrdersDT, string.Empty, "ColorID", DataViewRowState.CurrentRows))
            {
                DT1.Clear();
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), InfinitiSimpleDT, ref DeyingDT, string.Empty);
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), InfinitiBoxesDT, ref DeyingDT, " ШУФ");
                CollectDeying(Convert.ToInt32(DT1.Rows[i]["ColorID"]), InfinitiGridsDT, ref DeyingDT, " РЕШ");
            }

            if (DeyingDT.Rows.Count > 0)
                DeyingToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName, "Покраска", Machine);
        }

        private void DeyingByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            DataTable DistMainOrdersDT = DistMainOrdersTable(LorenzoOrdersDT, ElegantOrdersDT, KansasOrdersDT, SofiaOrdersDT, Turin1OrdersDT, Turin1_1OrdersDT, Turin3OrdersDT, LeonOrdersDT, InfinitiOrdersDT, DakotaOrdersDT, true);
            DataTable DT = KansasOrdersDT.Clone();
            DataTable DT1 = new DataTable();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, MainOrders.DocNumber, MainOrders.MainOrderID, Batch.MegaBatchID, Batch.BatchID FROM MainOrders" +
                    " INNER JOIN BatchDetails ON MainOrders.MainOrderID=BatchDetails.MainOrderID" +
                    " INNER JOIN Batch ON BatchDetails.BatchID=Batch.BatchID" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.CLientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrders.MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MegaOrders.ClientID, ClientName, MegaOrders.OrderNumber, MainOrders.MainOrderID, MainOrders.Notes, Batch.MegaBatchID, Batch.BatchID FROM MainOrders" +
                    " INNER JOIN BatchDetails ON MainOrders.MainOrderID=BatchDetails.MainOrderID" +
                    " INNER JOIN Batch ON BatchDetails.BatchID=Batch.BatchID" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrders.MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }
            }

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                int RowIndex = 0;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet("ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 25 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 20 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);

                HSSFCell cell = null;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;
                RowIndex++;
                RowIndex++;
                for (int i = 0; i < DistMainOrdersDT.Rows.Count; i++)
                {
                    if (Convert.ToInt32(DistMainOrdersDT.Rows[i]["GroupType"]) == 1)
                        continue;

                    int MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]);
                    int MegaBatchID = 0;
                    int BatchID = 0;
                    DeyingDT.Clear();

                    using (DataView DV = new DataView(LorenzoOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = LorenzoSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = LorenzoBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = LorenzoGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    using (DataView DV = new DataView(ElegantOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = ElegantSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = ElegantBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = ElegantGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    using (DataView DV = new DataView(KansasOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = KansasSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = KansasBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = KansasGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    using (DataView DV = new DataView(DakotaOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = DakotaSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = DakotaBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = DakotaGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");

                        DT.Clear();
                        rows = DakotaAppliqueDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " АППЛ");
                    }

                    using (DataView DV = new DataView(SofiaOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = SofiaSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = SofiaBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = SofiaGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");

                        DT.Clear();
                        rows = SofiaAppliqueDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " АППЛ");
                    }

                    using (DataView DV = new DataView(Turin1OrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = Turin1SimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = Turin1BoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = Turin1GridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    //using (DataView DV = new DataView(Turin1_1OrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    //{
                    //    DT1.Clear();
                    //    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    //}
                    //for (int j = 0; j < DT1.Rows.Count; j++)
                    //{
                    //    DT.Clear();
                    //    DataRow[] rows = Turin1_1SimpleDT.Select("MainOrderID=" + MainOrderID);
                    //    foreach (DataRow item in rows)
                    //        DT.Rows.Add(item.ItemArray);
                    //    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                    //    DT.Clear();
                    //    rows = Turin1_1BoxesDT.Select("MainOrderID=" + MainOrderID);
                    //    foreach (DataRow item in rows)
                    //        DT.Rows.Add(item.ItemArray);
                    //    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                    //    DT.Clear();
                    //    rows = Turin1_1GridsDT.Select("MainOrderID=" + MainOrderID);
                    //    foreach (DataRow item in rows)
                    //        DT.Rows.Add(item.ItemArray);
                    //    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    //}
                    using (DataView DV = new DataView(Turin3OrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = Turin3SimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = Turin3BoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = Turin3GridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    using (DataView DV = new DataView(LeonOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = LeonSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = LeonBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = LeonGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    using (DataView DV = new DataView(InfinitiOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = InfinitiSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = InfinitiBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = InfinitiGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        MegaBatchID = Convert.ToInt32(CRows[0]["MegaBatchID"]);
                        BatchID = Convert.ToInt32(CRows[0]["BatchID"]);
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DeyingDT.Rows.Count > 0)
                        DeyingByMainOrderToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DeyingDT, WorkAssignmentID,
                            "ЗОВ " + MegaBatchID + ", " + BatchID + ", " + MainOrderID, ClientName, OrderName, string.Empty, ref RowIndex);
                }
            }

            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                int RowIndex = 0;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Маркет");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 25 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 20 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);
                
                HSSFCell cell = null;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;
                RowIndex++;
                RowIndex++;
                for (int i = 0; i < DistMainOrdersDT.Rows.Count; i++)
                {
                    if (Convert.ToInt32(DistMainOrdersDT.Rows[i]["GroupType"]) == 0)
                        continue;
                    int MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]);
                    int MegaBatchID = 0;
                    int BatchID = 0;
                    string Notes = string.Empty;

                    DeyingDT.Clear();
                    using (DataView DV = new DataView(LorenzoOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = LorenzoSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = LorenzoBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = LorenzoGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    using (DataView DV = new DataView(ElegantOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = ElegantSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = ElegantBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = ElegantGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    using (DataView DV = new DataView(KansasOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = KansasSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = KansasBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = KansasGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    using (DataView DV = new DataView(DakotaOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = DakotaSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = DakotaBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = DakotaGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");

                        DT.Clear();
                        rows = DakotaAppliqueDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " АППЛ");
                    }

                    using (DataView DV = new DataView(SofiaOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = SofiaSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = SofiaBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = SofiaGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");

                        DT.Clear();
                        rows = SofiaAppliqueDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " АППЛ");
                    }

                    using (DataView DV = new DataView(Turin1OrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = Turin1SimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = Turin1BoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = Turin1GridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    //using (DataView DV = new DataView(Turin1_1OrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    //{
                    //    DT1.Clear();
                    //    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    //}
                    //for (int j = 0; j < DT1.Rows.Count; j++)
                    //{
                    //    DT.Clear();
                    //    DataRow[] rows = Turin1_1SimpleDT.Select("MainOrderID=" + MainOrderID);
                    //    foreach (DataRow item in rows)
                    //        DT.Rows.Add(item.ItemArray);
                    //    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                    //    DT.Clear();
                    //    rows = Turin1_1BoxesDT.Select("MainOrderID=" + MainOrderID);
                    //    foreach (DataRow item in rows)
                    //        DT.Rows.Add(item.ItemArray);
                    //    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                    //    DT.Clear();
                    //    rows = Turin1_1GridsDT.Select("MainOrderID=" + MainOrderID);
                    //    foreach (DataRow item in rows)
                    //        DT.Rows.Add(item.ItemArray);
                    //    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    //}

                    using (DataView DV = new DataView(Turin3OrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = Turin3SimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = Turin3BoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = Turin3GridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    using (DataView DV = new DataView(LeonOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = LeonSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = LeonBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = LeonGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    using (DataView DV = new DataView(InfinitiOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                    {
                        DT1.Clear();
                        DT1 = DV.ToTable(true, new string[] { "ColorID" });
                    }
                    for (int j = 0; j < DT1.Rows.Count; j++)
                    {
                        DT.Clear();
                        DataRow[] rows = InfinitiSimpleDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                        DT.Clear();
                        rows = InfinitiBoxesDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                        DT.Clear();
                        rows = InfinitiGridsDT.Select("MainOrderID=" + MainOrderID);
                        foreach (DataRow item in rows)
                            DT.Rows.Add(item.ItemArray);
                        CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                    }

                    string C = "Маркетинг ";
                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        MegaBatchID = Convert.ToInt32(CRows[0]["MegaBatchID"]);
                        BatchID = Convert.ToInt32(CRows[0]["BatchID"]);
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                        if (Convert.ToInt32(CRows[0]["ClientID"]) == 101)
                            C = "Москва-1 ";
                    }
                    if (DeyingDT.Rows.Count > 0)
                        DeyingByMainOrderToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DeyingDT, WorkAssignmentID,
                            C + MegaBatchID + ", " + BatchID + ", " + MainOrderID, ClientName, OrderName, Notes, ref RowIndex);
                }
            }
            for (int i = 0; i < DistMainOrdersDT.Rows.Count; i++)
            {
                int MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]);
                int MegaBatchID = 0;
                int BatchID = 0;
                string Notes = string.Empty;

                DeyingDT.Clear();
                using (DataView DV = new DataView(LorenzoOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                {
                    DT1.Clear();
                    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                }
                for (int j = 0; j < DT1.Rows.Count; j++)
                {
                    DT.Clear();
                    DataRow[] rows = LorenzoSimpleDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                    DT.Clear();
                    rows = LorenzoBoxesDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                    DT.Clear();
                    rows = LorenzoGridsDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                }

                using (DataView DV = new DataView(ElegantOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                {
                    DT1.Clear();
                    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                }
                for (int j = 0; j < DT1.Rows.Count; j++)
                {
                    DT.Clear();
                    DataRow[] rows = ElegantSimpleDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                    DT.Clear();
                    rows = ElegantBoxesDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                    DT.Clear();
                    rows = ElegantGridsDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                }

                using (DataView DV = new DataView(KansasOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                {
                    DT1.Clear();
                    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                }
                for (int j = 0; j < DT1.Rows.Count; j++)
                {
                    DT.Clear();
                    DataRow[] rows = KansasSimpleDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                    DT.Clear();
                    rows = KansasBoxesDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                    DT.Clear();
                    rows = KansasGridsDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                }

                using (DataView DV = new DataView(DakotaOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                {
                    DT1.Clear();
                    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                }
                for (int j = 0; j < DT1.Rows.Count; j++)
                {
                    DT.Clear();
                    DataRow[] rows = DakotaSimpleDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                    DT.Clear();
                    rows = DakotaBoxesDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                    DT.Clear();
                    rows = DakotaGridsDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");

                    DT.Clear();
                    rows = DakotaAppliqueDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " АППЛ");
                }

                using (DataView DV = new DataView(SofiaOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                {
                    DT1.Clear();
                    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                }
                for (int j = 0; j < DT1.Rows.Count; j++)
                {
                    DT.Clear();
                    DataRow[] rows = SofiaSimpleDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                    DT.Clear();
                    rows = SofiaBoxesDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                    DT.Clear();
                    rows = SofiaGridsDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");

                    DT.Clear();
                    rows = SofiaAppliqueDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " АППЛ");
                }

                using (DataView DV = new DataView(Turin1OrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                {
                    DT1.Clear();
                    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                }
                for (int j = 0; j < DT1.Rows.Count; j++)
                {
                    DT.Clear();
                    DataRow[] rows = Turin1SimpleDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                    DT.Clear();
                    rows = Turin1BoxesDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                    DT.Clear();
                    rows = Turin1GridsDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                }

                //using (DataView DV = new DataView(Turin1_1OrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                //{
                //    DT1.Clear();
                //    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                //}
                //for (int j = 0; j < DT1.Rows.Count; j++)
                //{
                //    DT.Clear();
                //    DataRow[] rows = Turin1_1SimpleDT.Select("MainOrderID=" + MainOrderID);
                //    foreach (DataRow item in rows)
                //        DT.Rows.Add(item.ItemArray);
                //    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                //    DT.Clear();
                //    rows = Turin1_1BoxesDT.Select("MainOrderID=" + MainOrderID);
                //    foreach (DataRow item in rows)
                //        DT.Rows.Add(item.ItemArray);
                //    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                //    DT.Clear();
                //    rows = Turin1_1GridsDT.Select("MainOrderID=" + MainOrderID);
                //    foreach (DataRow item in rows)
                //        DT.Rows.Add(item.ItemArray);
                //    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                //}

                using (DataView DV = new DataView(Turin3OrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                {
                    DT1.Clear();
                    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                }
                for (int j = 0; j < DT1.Rows.Count; j++)
                {
                    DT.Clear();
                    DataRow[] rows = Turin3SimpleDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                    DT.Clear();
                    rows = Turin3BoxesDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                    DT.Clear();
                    rows = Turin3GridsDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                }

                using (DataView DV = new DataView(LeonOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                {
                    DT1.Clear();
                    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                }
                for (int j = 0; j < DT1.Rows.Count; j++)
                {
                    DT.Clear();
                    DataRow[] rows = LeonSimpleDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                    DT.Clear();
                    rows = LeonBoxesDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                    DT.Clear();
                    rows = LeonGridsDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                }

                using (DataView DV = new DataView(InfinitiOrdersDT, "MainOrderID=" + MainOrderID, "ColorID", DataViewRowState.CurrentRows))
                {
                    DT1.Clear();
                    DT1 = DV.ToTable(true, new string[] { "ColorID" });
                }
                for (int j = 0; j < DT1.Rows.Count; j++)
                {
                    DT.Clear();
                    DataRow[] rows = InfinitiSimpleDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, string.Empty);

                    DT.Clear();
                    rows = InfinitiBoxesDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " ШУФ");

                    DT.Clear();
                    rows = InfinitiGridsDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(Convert.ToInt32(DT1.Rows[j]["ColorID"]), DT, ref DeyingDT, " РЕШ");
                }

                if (Convert.ToInt32(DistMainOrdersDT.Rows[i]["GroupType"]) == 0)
                {
                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        MegaBatchID = Convert.ToInt32(CRows[0]["MegaBatchID"]);
                        BatchID = Convert.ToInt32(CRows[0]["BatchID"]);
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DeyingDT.Rows.Count > 0)
                        DeyingByMainOrderToExcelSingly(ref hssfworkbook,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            WorkAssignmentID, "ЗОВ " + MegaBatchID + ", " + BatchID + ", " + MainOrderID, ClientName, OrderName, OrderName.Replace("/", "-"), Notes);
                }
                if (Convert.ToInt32(DistMainOrdersDT.Rows[i]["GroupType"]) == 1)
                {
                    string C = "Маркетинг ";
                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        MegaBatchID = Convert.ToInt32(CRows[0]["MegaBatchID"]);
                        BatchID = Convert.ToInt32(CRows[0]["BatchID"]);
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                        if (Convert.ToInt32(CRows[0]["ClientID"]) == 101)
                            C = "Москва-1 ";
                    }
                    if (DeyingDT.Rows.Count > 0)
                        DeyingByMainOrderToExcelSingly(ref hssfworkbook,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            WorkAssignmentID, C + MegaBatchID + ", " + BatchID + ", " + MainOrderID, ClientName, OrderName, OrderName.Replace("/", "-"), Notes);
                }
            }

        }

        private void SummingOrders(DataTable SourceDT, DataTable BoxesDT, DataTable GridsDT, DataTable SimpleDT, DataTable VitrinaDT,
            string BoxName, string GridName, string FrontName)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = InsetDistSizesTable(SourceDT, true);

            DataTable DT = SimpleDT.Clone();
            foreach (DataRow item in SimpleDT.Select("InsetTypeID<>4"))
                DT.Rows.Add(item.ItemArray);

            CollectOrders(DistinctSizesDT, DT, ref SummOrdersDT, 2, FrontName);
            CollectOrders(DistinctSizesDT, BoxesDT, ref SummOrdersDT, 1, BoxName);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 2, FrontName);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, GridName);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        private void SummingSofiaOrders(DataTable SourceDT, DataTable BoxesDT, DataTable GridsDT, DataTable AppliqueDT, DataTable SimpleDT, DataTable VitrinaDT,
            string BoxName, string GridName, string AppliqueName, string FrontName)
        {
            SummOrdersDT.Dispose();
            SummOrdersDT = new DataTable();
            SummOrdersDT.Columns.Add(new DataColumn("Sizes", Type.GetType("System.String")));
            SummOrdersDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            SummOrdersDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));

            DataRow NewRow1 = SummOrdersDT.NewRow();
            NewRow1["Sizes"] = "Профиль";
            SummOrdersDT.Rows.Add(NewRow1);

            DataTable DistinctSizesDT = InsetDistSizesTable(SourceDT, true);

            DataTable DT = SimpleDT.Clone();
            foreach (DataRow item in SimpleDT.Select("InsetTypeID<>4"))
                DT.Rows.Add(item.ItemArray);

            CollectOrders(DistinctSizesDT, DT, ref SummOrdersDT, 2, FrontName);
            CollectOrders(DistinctSizesDT, BoxesDT, ref SummOrdersDT, 1, BoxName);
            CollectOrders(DistinctSizesDT, VitrinaDT, ref SummOrdersDT, 2, FrontName);
            CollectOrders(DistinctSizesDT, GridsDT, ref SummOrdersDT, 3, GridName);
            CollectOrders(DistinctSizesDT, AppliqueDT, ref SummOrdersDT, 4, AppliqueName);
            SummOrdersDT.Columns.Add(new DataColumn("TotalAmount", Type.GetType("System.String")));

            using (DataView DV = new DataView(SummOrdersDT.Copy()))
            {
                SummOrdersDT.Clear();
                DV.Sort = "Height, Width";
                SummOrdersDT = DV.ToTable();
            }

            DataRow NewRow2 = SummOrdersDT.NewRow();
            NewRow2["Sizes"] = "Квадратура";
            SummOrdersDT.Rows.Add(NewRow2);

            DataRow NewRow3 = SummOrdersDT.NewRow();
            NewRow3["Sizes"] = "Кол-во";
            SummOrdersDT.Rows.Add(NewRow3);

            decimal TotalSquare = 0;
            int TotalCount = 0;

            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Sizes" || SummOrdersDT.Columns[y].ColumnName == "TotalAmount"
                    || SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                decimal Square = 0;
                int Count = 0;

                for (int x = 0; x < SummOrdersDT.Rows.Count; x++)
                {
                    if (SummOrdersDT.Rows[x]["Height"] != DBNull.Value && SummOrdersDT.Rows[x]["Width"] != DBNull.Value && SummOrdersDT.Rows[x][y] != DBNull.Value)
                    {
                        Square += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        Count += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                        TotalSquare += Convert.ToDecimal(SummOrdersDT.Rows[x]["Height"]) * Convert.ToDecimal(SummOrdersDT.Rows[x]["Width"]) * Convert.ToDecimal(SummOrdersDT.Rows[x][y]) / 1000000;
                        TotalCount += Convert.ToInt32(SummOrdersDT.Rows[x][y]);
                    }
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1][y] = Count;
                SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2][y] = Square;
            }
            TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 1]["TotalAmount"] = TotalCount;
            SummOrdersDT.Rows[SummOrdersDT.Rows.Count - 2]["TotalAmount"] = TotalSquare;
        }

        public void TrimmingToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int Admission, int BoxAdmission, int WorkAssignmentID, string BatchName, string ClientName)
        {
            TrimmingDT.Clear();

            TrimCollectSimpleFronts(ref TrimmingDT, Admission, true);
            TrimCollectGridFronts(ref TrimmingDT, Admission, true);
            TrimCollectBoxFronts(ref TrimmingDT, BoxAdmission, true);

            decimal div1 = 370;
            decimal div2 = 2.14m;
            decimal time = 0;
            decimal cost = 0;
            PlanningTimebyCount(TrimmingDT, div1, div2, ref time, ref cost);

            if (TrimmingDT.Rows.Count == 0)
                return;

            DataTable DT = TrimmingDT.Copy();
            DataColumn Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
            Col1.SetOrdinal(4);

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Торцовка");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 17 * 256);
            //sheet1.SetColumnWidth(2, 13 * 256);
            //sheet1.SetColumnWidth(3, 13 * 256);
            sheet1.SetColumnWidth(4, 11 * 256);

            int RowIndex = 0;

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(time));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(cost));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "ТСК-01");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal SticksCount = 0;
            int CType = 0;
            int PType = 0;
            int AllTotalAmount = 0;
            int Count = 0;
            int Height = 0;

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["ColorID"]);
                PType = Convert.ToInt32(DT.Rows[0]["ProfileType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value && DT.Rows[x]["Height"] != DBNull.Value)
                {
                    Count = Convert.ToInt32(DT.Rows[x]["Count"]);
                    Height = Convert.ToInt32(DT.Rows[x]["Height"]);
                    SticksCount += (Height + 4) * Count;
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    Count = Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" || DT.Columns[y].ColumnName == "ProfileType"
                        || DT.Columns[y].ColumnName == "VitrinaNotes" || DT.Columns[y].ColumnName == "GridNotes"
                        || DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "GridCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1
                    && (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorID"]) || PType != Convert.ToInt32(DT.Rows[x + 1]["ProfileType"])))
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" || DT.Columns[y].ColumnName == "ProfileType"
                            || DT.Columns[y].ColumnName == "VitrinaNotes" || DT.Columns[y].ColumnName == "GridNotes"
                            || DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "GridCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    CType = Convert.ToInt32(DT.Rows[x + 1]["ColorID"]);
                    PType = Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]);
                    Count = 0;
                    Height = 0;
                    SticksCount = 0;
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" || DT.Columns[y].ColumnName == "ProfileType"
                            || DT.Columns[y].ColumnName == "VitrinaNotes" || DT.Columns[y].ColumnName == "GridNotes"
                            || DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "GridCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" || DT.Columns[y].ColumnName == "ProfileType"
                            || DT.Columns[y].ColumnName == "VitrinaNotes" || DT.Columns[y].ColumnName == "GridNotes"
                            || DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "GridCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 1, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 1, RowIndex, 4));
        }

        public void AdditionsToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName)
        {
            RemovingQuarterDT.Clear();
            CollectRemovingQuarter(ref RemovingQuarterDT, true);

            RemovingBoxesDT.Clear();
            CollectRemovingBoxes(ref RemovingBoxesDT, true);

            GrooveGridsDT.Clear();
            CollectGrooveGrids(ref GrooveGridsDT, true);

            if (RemovingQuarterDT.Rows.Count == 0 && RemovingBoxesDT.Rows.Count == 0 && GrooveGridsDT.Rows.Count == 0)
                return;

            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Доп. задания");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 11 * 256);
            sheet1.SetColumnWidth(3, 7 * 256);
            sheet1.SetColumnWidth(4, 23 * 256);

            DataTable DT = new DataTable();
            DataColumn Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));

            if (RemovingQuarterDT.Rows.Count > 0)
            {
                DT.Dispose();
                Col1.Dispose();
                DT = RemovingQuarterDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(4);

                AdditionsToExcelSingly(ref hssfworkbook,
                    Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, "Снятие четверти", ref RowIndex);
            }

            if (RemovingBoxesDT.Rows.Count > 0)
            {
                DT.Dispose();
                Col1.Dispose();
                DT = RemovingBoxesDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(4);

                AdditionsToExcelSingly(ref hssfworkbook,
                    Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, "Снятие шуфляд", ref RowIndex);
            }

            if (GrooveGridsDT.Rows.Count > 0)
            {
                DT.Dispose();
                Col1.Dispose();
                DT = GrooveGridsDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(4);

                AdditionsToExcelSingly(ref hssfworkbook,
                    Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, "Пазировка под решетку", ref RowIndex);
            }
        }

        public void AdditionsToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string PageName, ref int RowIndex)
        {
            //HSSFCell cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 2), 1, "УТВЕРЖДАЮ_____________");
            //cell.CellStyle = Calibri11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(0), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            //cell.CellStyle = Calibri11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 4), 0, "Клиент:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 4), 1, ClientName);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 5), 0, "Партия:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 5), 1, BatchName);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 3), 0, "Задание №" + WorkAssignmentID.ToString());
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 3), 1, PageName);
            //cell.CellStyle = CalibriBold11CS;
            HSSFCell cell = null;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal SticksCount = 0;
            int CType = 0;
            int AllTotalAmount = 0;
            int Count = 0;
            int Height = 0;

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["ColorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value && DT.Rows[x]["Height"] != DBNull.Value)
                {
                    Count = Convert.ToInt32(DT.Rows[x]["Count"]);
                    Height = Convert.ToInt32(DT.Rows[x]["Height"]);
                    SticksCount += (Height + 4) * Count;
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    Count = Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1 && CType != Convert.ToInt32(DT.Rows[x + 1]["ColorID"]))
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    CType = Convert.ToInt32(DT.Rows[x + 1]["ColorID"]);
                    Count = 0;
                    Height = 0;
                    SticksCount = 0;
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 1, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 1, RowIndex, 4));
        }

        public void GashToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int Admission, int WorkAssignmentID, string BatchName, string ClientName, string MachineName)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Запил 45");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 17 * 256);
            sheet1.SetColumnWidth(4, 11 * 256);

            DataTable DT = new DataTable();
            DataColumn Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));

            if (MachineName == "Balistrini" || MachineName == "Elme")
            {
                GashDT.Clear();
                GashCollectSimpleFronts(ref GashDT, 0, true);
                GashCollectGridFronts(ref GashDT, 0, true);

                DT.Dispose();
                Col1.Dispose();
                DT = GashDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(4);

                decimal div1 = 165;
                decimal div2 = 2.14m;
                decimal time = 0;
                decimal cost = 0;
                PlanningTimebyCount(DT, div1, div2, ref time, ref cost);

                if (DT.Rows.Count > 0)
                    GashToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, 
                        DT, WorkAssignmentID, BatchName, ClientName, MachineName, time, cost, ref RowIndex);
                RowIndex++;
                RowIndex++;

                GashDT.Clear();
                GashCollectBoxFronts(ref GashDT, Admission, true);

                DT.Dispose();
                Col1.Dispose();
                DT = GashDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(4);

                time = 0;
                cost = 0;
                PlanningTimeGashRapid(DT, ref time, ref cost);

                if (DT.Rows.Count > 0)
                    GashToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, "Rapid",
                        time, cost, ref RowIndex);
            }
            if (MachineName == "Rapid")
            {
                GashDT.Clear();
                GashCollectSimpleFronts(ref GashDT, Admission, true);
                GashCollectGridFronts(ref GashDT, Admission, true);
                GashCollectBoxFronts(ref GashDT, Admission, true);

                DT.Dispose();
                Col1.Dispose();
                DT = GashDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(4);

                decimal time = 0;
                decimal cost = 0;
                PlanningTimeGashRapid(DT, ref time, ref cost);
                if (DT.Rows.Count > 0)
                    GashToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, "Rapid",
                        time, cost, ref RowIndex);
            }
            RowIndex++;
        }

        public void InsetToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int Admission, int WorkAssignmentID, string BatchName, string ClientName)
        {
            InsetDT.Clear();
            CollectGridInsets(ref InsetDT, false, false);
            if (InsetDT.Rows.Count == 0)
                return;

            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки2");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 11 * 256);
            sheet1.SetColumnWidth(3, 7 * 256);
            sheet1.SetColumnWidth(4, 23 * 256);

            if (InsetDT.Rows.Count > 0)
            {
                DataTable DT = InsetDT.Copy();
                DataColumn Col1 = new DataColumn();

                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(4);

                decimal div1 = 7;
                decimal div2 = 2.14m;
                decimal time = 0;
                decimal cost = 0;
                PlanningTimebyCount(DT, div1, div2, ref time, ref cost);

                InsetToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName,
                        string.Empty, "Сборка решеток", time, cost, ref RowIndex);
                RowIndex++;
                RowIndex++;

                InsetToExcelSingly(ref hssfworkbook,
                    Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName,
                    "ДУБЛЬ", "Сборка решеток", time, cost, ref RowIndex);
                RowIndex++;
                RowIndex++;

                div1 = 40;
                div2 = 2.14m;
                time = 0;
                cost = 0;
                PlanningTimebyCount(DT, div1, div2, ref time, ref cost);

                InsetToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName,
                        string.Empty, "Пила DFTP-400", time, cost, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            RowIndex++;
        }

        public void FilenkaToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName)
        {
            InsetDT.Clear();
            FilenkaBoxesDT.Clear();
            CollectBoxInsets(ref InsetDT, false, false);
            CollectSimpleInsets(ref InsetDT, false, true);

            foreach (DataRow item in InsetDT.Rows)
            {
                decimal TotalSquare = 0;
                DataRow NewRow = FilenkaBoxesDT.NewRow();
                NewRow["ColorType"] = item["ColorType"];
                NewRow["Name"] = item["Name"];
                NewRow["Height"] = item["Height"];
                NewRow["Width"] = item["Width"];
                NewRow["Count"] = item["Count"];
                TotalSquare = Decimal.Round(Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                NewRow["Square"] = TotalSquare;
                FilenkaBoxesDT.Rows.Add(NewRow);
            }

            InsetDT.Clear();
            FilenkaSimpleDT.Clear();
            CollectSimpleInsets(ref InsetDT, false, false);
            foreach (DataRow item in InsetDT.Rows)
            {
                decimal TotalSquare = 0;
                DataRow NewRow = FilenkaSimpleDT.NewRow();
                NewRow["ColorType"] = item["ColorType"];
                NewRow["Name"] = item["Name"];
                NewRow["Height"] = item["Height"];
                NewRow["Width"] = item["Width"];
                NewRow["Count"] = item["Count"];
                TotalSquare = Decimal.Round(Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                NewRow["Square"] = TotalSquare;
                FilenkaSimpleDT.Rows.Add(NewRow);
            }

            InsetDT.Clear();
            DakotaFilenkaSimpleDT.Clear();
            CollectDakotaInsets(ref InsetDT, false, false);
            foreach (DataRow item in InsetDT.Rows)
            {
                decimal TotalSquare = 0;
                DataRow NewRow = DakotaFilenkaSimpleDT.NewRow();
                NewRow["ColorType"] = item["ColorType"];
                NewRow["Name"] = item["Name"];
                NewRow["Height"] = item["Height"];
                NewRow["Width"] = item["Width"];
                NewRow["Count"] = item["Count"];
                TotalSquare = Decimal.Round(Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                NewRow["Square"] = TotalSquare;
                DakotaFilenkaSimpleDT.Rows.Add(NewRow);
            }

            if (FilenkaBoxesDT.Rows.Count == 0 && FilenkaSimpleDT.Rows.Count == 0 && DakotaFilenkaSimpleDT.Rows.Count == 0)
                return;

            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Филенка");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);

            DataTable DT = new DataTable();
            DataColumn Col1 = new DataColumn("Col1", System.Type.GetType("System.String"));
            DataColumn Col2 = new DataColumn("Col2", System.Type.GetType("System.String"));
            DataColumn Col3 = new DataColumn("Col3", System.Type.GetType("System.String"));

            decimal div1 = 54;
            decimal div2 = 2.14m;
            decimal div3 = 2.14m;
            decimal time = 0;
            decimal cost = 0;

            if (FilenkaBoxesDT.Rows.Count > 0)
            {
                DT = FilenkaBoxesDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(4);

                PlanningTimebyCount(DT, div1, div2, ref time, ref cost);

                FilenkaBoxesToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT,
                        WorkAssignmentID, BatchName, ClientName, time, cost, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            if (FilenkaSimpleDT.Rows.Count > 0)
            {
                DT.Dispose();
                Col1.Dispose();
                DT = FilenkaSimpleDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(4);

                div1 = 54;
                div2 = 2.14m;
                time = 0;
                cost = 0;
                PlanningTimebyCount(DT, div1, div2, ref time, ref cost);

                FilenkaSimple1ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT,
                        WorkAssignmentID, BatchName, ClientName, "Вставка", time, cost, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            if (FilenkaSimpleDT.Rows.Count > 0)
            {
                DT.Dispose();
                Col1.Dispose();
                DT = FilenkaSimpleDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
                Col1.SetOrdinal(4);
                Col2.SetOrdinal(5);
                Col3.SetOrdinal(6);
                
                decimal time1 = 0;
                decimal cost1 = 0;
                decimal time2 = 0;
                decimal cost2 = 0;
                decimal time3 = 0;
                decimal cost3 = 0;
                decimal time4 = 0;
                decimal cost4 = 0;
                div1 = 8.5m;
                div2 = 9.5m;
                div3 = 2.14m;
                GetPlanningFilenka(DT, div1, div2, div3, ref time1, ref cost1);
                div1 = 14;
                div2 = 2.14m;
                PlanningTimebySquare(DT, div1, div2, ref time2, ref cost2);
                div1 = 7.2m;
                div2 = 10.3m;
                div3 = 2.14m;
                GetPlanningFilenka(DT, div1, div2, div3, ref time3, ref cost3);
                div1 = 7.2m;
                div2 = 10.3m;
                div3 = 1.25m;
                GetPlanningFilenka(DT, div1, div2, div3, ref time4, ref cost4);

                FilenkaSimple2ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT,
                        WorkAssignmentID, BatchName, ClientName, "Филенка", time1, cost1, time2, cost2,
                        time3, cost3, time4, cost4, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            if (DakotaFilenkaSimpleDT.Rows.Count > 0)
            {
                DT.Dispose();
                Col1.Dispose();
                DT = DakotaFilenkaSimpleDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(4);

                div1 = 54;
                div2 = 2.14m;
                time = 0;
                cost = 0;
                PlanningTimebyCount(DT, div1, div2, ref time, ref cost);

                FilenkaSimple1ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT,
                        WorkAssignmentID, BatchName, ClientName, "Вставка", time, cost, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }

            if (DakotaFilenkaSimpleDT.Rows.Count > 0)
            {
                DT.Dispose();
                Col1.Dispose();
                DT = DakotaFilenkaSimpleDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
                Col1.SetOrdinal(4);
                Col2.SetOrdinal(5);
                Col3.SetOrdinal(6);

                decimal time1 = 0;
                decimal cost1 = 0;
                decimal time2 = 0;
                decimal cost2 = 0;
                decimal time3 = 0;
                decimal cost3 = 0;
                decimal time4 = 0;
                decimal cost4 = 0;
                div1 = 8.5m;
                div2 = 9.5m;
                div3 = 2.14m;
                GetPlanningFilenka(DT, div1, div2, div3, ref time1, ref cost1);
                div1 = 14;
                div2 = 2.14m;
                PlanningTimebySquare(DT, div1, div2, ref time2, ref cost2);
                div1 = 7.2m;
                div2 = 10.3m;
                div3 = 2.14m;
                GetPlanningFilenka(DT, div1, div2, div3, ref time3, ref cost3);
                div1 = 7.2m;
                div2 = 10.3m;
                div3 = 1.25m;

                FilenkaSimple2ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT,
                        WorkAssignmentID, BatchName, ClientName, "Филенка", time1, cost1, time2, cost2,
                        time3, cost3, time4, cost4, ref RowIndex);
                RowIndex++;
                RowIndex++;
            }
            RowIndex++;
        }

        public void AssemblyToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName, decimal Time, decimal Cost)
        {
            int RowIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Сборка");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 20 * 256);
            sheet1.SetColumnWidth(2, 20 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 6 * 256);
            sheet1.SetColumnWidth(5, 6 * 256);

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Time));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Cost));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "Сборка");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Квадратура");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            if (AssemblyDT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(AssemblyDT.Rows[0]["ColorType"]);
            }

            for (int x = 0; x < AssemblyDT.Rows.Count; x++)
            {
                if (AssemblyDT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(AssemblyDT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(AssemblyDT.Rows[x]["Count"]);
                }
                if (AssemblyDT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(AssemblyDT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(AssemblyDT.Rows[x]["Square"]);
                }

                for (int y = 0; y < AssemblyDT.Columns.Count; y++)
                {
                    if (AssemblyDT.Columns[y].ColumnName == "FrontType" || AssemblyDT.Columns[y].ColumnName == "ColorType")
                        continue;

                    Type t = AssemblyDT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(AssemblyDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(AssemblyDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(AssemblyDT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }
                if (x + 1 <= AssemblyDT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(AssemblyDT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < AssemblyDT.Columns.Count; y++)
                        {
                            if (AssemblyDT.Columns[y].ColumnName == "ColorType" || AssemblyDT.Columns[y].ColumnName == "FrontType")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(AssemblyDT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == AssemblyDT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < AssemblyDT.Columns.Count; y++)
                    {
                        if (AssemblyDT.Columns[y].ColumnName == "FrontType" || AssemblyDT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    cell.CellStyle = TableHeaderDecCS;

                    RowIndex++;

                    for (int y = 0; y < AssemblyDT.Columns.Count; y++)
                    {
                        if (AssemblyDT.Columns[y].ColumnName == "FrontType" || AssemblyDT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
        }

        public void DeyingToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName, string PageName, Machines machine)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet(PageName);
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 20 * 256);
            sheet1.SetColumnWidth(2, 20 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 6 * 256);
            sheet1.SetColumnWidth(5, 6 * 256);

            HSSFCell cell = null;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            RowIndex++;
            RowIndex++;
            DataTable DT = new DataTable();
            DataColumn Col1 = new DataColumn("Col1", System.Type.GetType("System.String"));
            DataColumn Col2 = new DataColumn("Col2", System.Type.GetType("System.String"));
            DataColumn Col3 = new DataColumn("Col3", System.Type.GetType("System.String"));

            if (DeyingDT.Rows.Count > 0)
            {
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);

                decimal time = 0;
                decimal cost = 0;
                PlanningTimeDeyning(DT, machine, ref time, ref cost);

                DyeingWomen1ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Жен1. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, time, cost, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingWomen2ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Жен2. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                Col2.SetOrdinal(7);
                Col3.SetOrdinal(8);
                DT.Columns["Square"].SetOrdinal(9);
                DyeingMen1ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Муж1. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingWomen3ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Жен3. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingMen2ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Муж2. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                Col2.SetOrdinal(7);
                DT.Columns["Square"].SetOrdinal(8);

                time = 0;
                cost = 0;
                PlanningTimeMarketPacking(DT, ref time, ref cost);

                DyeingPackingToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Упаковка. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, time, cost, ref RowIndex);
                
                //DT.Dispose();
                //Col1.Dispose();
                //Col2.Dispose();
                //Col3.Dispose();
                //DT = DeyingDT.Copy();
                //Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                //Col1.SetOrdinal(6);
                //DT.Columns["Square"].SetOrdinal(7);
                //DT.Columns["Notes"].SetOrdinal(8);
                //DyeingBoringToExcel(ref hssfworkbook,
                //        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, ClientName, BatchName,
                //    "Сверление. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", ref RowIndex);
            }
        }

        public void DeyingByMainOrderToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes)
        {
            int RowIndex = 0;

            int Index = hssfworkbook.GetSheetIndex(PageName);

            int j = 0;
            string PageName1 = PageName;
            while (Index != -1)
            {
                PageName1 = PageName + "(" + j++ + ")";
                Index = hssfworkbook.GetSheetIndex(PageName1);
            }
            HSSFSheet sheet1 = hssfworkbook.CreateSheet(PageName1);
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 25 * 256);
            sheet1.SetColumnWidth(1, 20 * 256);
            sheet1.SetColumnWidth(2, 20 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 6 * 256);
            sheet1.SetColumnWidth(5, 6 * 256);
            DataTable DT = new DataTable();
            DataColumn Col1 = new DataColumn("Col1", System.Type.GetType("System.String"));
            DataColumn Col2 = new DataColumn("Col2", System.Type.GetType("System.String"));
            DataColumn Col3 = new DataColumn("Col3", System.Type.GetType("System.String"));

            HSSFCell cell = null;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            RowIndex++;
            RowIndex++;
            if (DeyingDT.Rows.Count > 0)
            {
                //DT.Dispose();
                //Col1.Dispose();
                //Col2.Dispose();
                //Col3.Dispose();
                //DT = DeyingDT.Copy();
                //Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                //Col1.SetOrdinal(6);
                //DT.Columns["Square"].SetOrdinal(7);
                //DyeingWomen1ToExcel(ref hssfworkbook,
                //        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, ClientName, BatchName,
                //    "Жен1. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", ref RowIndex);
                //RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingWomen2ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, OrderName,
                    "Жен2. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", Notes, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                Col2.SetOrdinal(7);
                Col3.SetOrdinal(8);
                DT.Columns["Square"].SetOrdinal(9);
                DyeingMen1ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, OrderName,
                    "Муж1. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", Notes, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingWomen3ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, OrderName,
                    "Жен3. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", Notes, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingMen2ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, OrderName,
                    "Муж2. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", Notes, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                Col2.SetOrdinal(7);
                DT.Columns["Square"].SetOrdinal(8);

                decimal div1 = 165;
                decimal div2 = 2.14m;
                decimal time = 0;
                decimal cost = 0;
                PlanningTimeMarketPacking(DT, ref time, ref cost);

                DyeingPackingToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, OrderName,
                    "Упаковка. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", Notes, time, cost, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DT.Columns["Notes"].SetOrdinal(8);

                div1 = 48;
                div2 = 2.14m;
                time = 0;
                cost = 0;
                PlanningTimebyCount(DT, div1, div2, ref time, ref cost);

                DyeingBoringToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, OrderName,
                    "Сверление. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", Notes, time, cost, ref RowIndex);
            }

            RowIndex++;
        }

        public void DeyingByMainOrderToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string Notes, ref int RowIndex)
        {
            DataTable TempDT = new DataTable();
            DataColumn Col1 = new DataColumn("Col1", System.Type.GetType("System.String"));
            DataColumn Col2 = new DataColumn("Col2", System.Type.GetType("System.String"));
            DataColumn Col3 = new DataColumn("Col3", System.Type.GetType("System.String"));
            
            if (DT.Rows.Count > 0)
            {
                TempDT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                TempDT = DT.Copy();
                Col1 = TempDT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = TempDT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                Col2.SetOrdinal(7);
                TempDT.Columns["Square"].SetOrdinal(8);

                decimal div1 = 165;
                decimal div2 = 2.14m;
                decimal time = 0;
                decimal cost = 0;
                PlanningTimeMarketPacking(DT, ref time, ref cost);

                DyeingPackingToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, TempDT, WorkAssignmentID, BatchName, ClientName, OrderName,
                    "Упаковка. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", Notes, time, cost, ref RowIndex);
                RowIndex++;

                TempDT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                TempDT = DT.Copy();
                Col1 = TempDT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                TempDT.Columns["Square"].SetOrdinal(7);
                TempDT.Columns["Notes"].SetOrdinal(8);
                
                div1 = 48;
                div2 = 2.14m;
                time = 0;
                cost = 0;
                PlanningTimebyCount(DT, div1, div2, ref time, ref cost);

                DyeingBoringToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, TempDT, WorkAssignmentID, BatchName, ClientName, OrderName,
                    "Сверление. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", Notes, time, cost, ref RowIndex);
            }

            RowIndex++;
        }

        public void GashToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string PageName, decimal Time, decimal Cost, ref int RowIndex)
        {

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Time));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Cost));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Витрины");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Решетки");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            decimal SticksCount = 0;
            int CType = 0;
            int PType = 0;
            int AllTotalAmount = 0;
            int Count = 0;
            int Height = 0;

            if (DT.Rows.Count > 0)
            {
                CType = Convert.ToInt32(DT.Rows[0]["ColorID"]);
                PType = Convert.ToInt32(DT.Rows[0]["ProfileType"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value && DT.Rows[x]["Height"] != DBNull.Value)
                {
                    Count = Convert.ToInt32(DT.Rows[x]["Count"]);
                    Height = Convert.ToInt32(DT.Rows[x]["Height"]);
                    SticksCount += (Height + 4) * Count;
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    Count = Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" || DT.Columns[y].ColumnName == "ProfileType" ||
                        DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "GridCount")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1
                    && (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorID"]) || PType != Convert.ToInt32(DT.Rows[x + 1]["ProfileType"])))
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" || DT.Columns[y].ColumnName == "ProfileType" ||
                            DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "GridCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    CType = Convert.ToInt32(DT.Rows[x + 1]["ColorID"]);
                    PType = Convert.ToInt32(DT.Rows[x + 1]["ProfileType"]);
                    Count = 0;
                    Height = 0;
                    SticksCount = 0;
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" || DT.Columns[y].ColumnName == "ProfileType" ||
                            DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "GridCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    SticksCount = SticksCount * 1.15m / 2620;
                    SticksCount = Decimal.Round(SticksCount, 1, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(SticksCount + " палок");
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" || DT.Columns[y].ColumnName == "ProfileType" ||
                            DT.Columns[y].ColumnName == "VitrinaCount" || DT.Columns[y].ColumnName == "GridCount")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 1, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 1, RowIndex, 4));
        }

        public void InsetToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string PageName, decimal time, decimal cost, ref int RowIndex)
        {

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(time));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(cost));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            string str = string.Empty;
            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Height"]) * Convert.ToDecimal(DT.Rows[x]["Width"]) * Convert.ToDecimal(DT.Rows[x]["Count"]) / 1000000;
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (DT.Columns[y].ColumnName == "Name")
                        str = DT.Rows[x][y].ToString();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }


                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue("Квадратура: " + Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;

                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue("Квадратура: " + Convert.ToDouble(TotalSquare));
                    cell.CellStyle = TableHeaderDecCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 3, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue("Квадратура: " + Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
        }

        public void FilenkaSimple1ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string PageName, decimal time, decimal cost, ref int RowIndex)
        {

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(time));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(cost));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Филенка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Пила");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    cell.CellStyle = TableHeaderDecCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 3, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
        }

        public void FilenkaSimple2ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string PageName, decimal time1, decimal cost1,
            decimal time2, decimal cost2, decimal time3, decimal cost3, decimal time4, decimal cost4, ref int RowIndex)
        {

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения (фрезер):");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;
            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(time1));
            cell.CellStyle = Calibri11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения (клей):");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;
            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(time2));
            cell.CellStyle = Calibri11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения (пресс):");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;
            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(time3));
            cell.CellStyle = Calibri11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения (обрезка):");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;
            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(time4));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд (фрезер):");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;
            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(cost1));
            cell.CellStyle = Calibri11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд (клей):");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;
            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(cost2));
            cell.CellStyle = Calibri11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд (пресс):");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;
            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(cost3));
            cell.CellStyle = Calibri11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд (обрезка):");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;
            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(cost4));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Филенка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Фрезер");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Клей");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Пресс");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    cell.CellStyle = TableHeaderDecCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 3, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
        }

        public void FilenkaBoxesToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, decimal time, decimal cost, ref int RowIndex)
        {

            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(time));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(cost));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "Вставка ВП-204");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Филенка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Пила");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    TotalSquare = Decimal.Round(TotalSquare, 3, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    cell.CellStyle = TableHeaderDecCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    AllTotalSquare = Decimal.Round(AllTotalSquare, 3, MidpointRounding.AwayFromZero);
                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
        }

        public void OrdersToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, int WorkAssignmentID, string BatchName, string ClientName, ref int RowIndex)
        {
            HSSFCell cell = null;

            HSSFFont Serif8F = hssfworkbook.CreateFont();
            Serif8F.FontHeightInPoints = 8;
            Serif8F.FontName = "Calibri";

            HSSFFont Serif10F = hssfworkbook.CreateFont();
            Serif10F.FontHeightInPoints = 10;
            Serif10F.FontName = "Calibri";

            HSSFCellStyle TableHeaderCS7 = hssfworkbook.CreateCellStyle();
            TableHeaderCS7.Alignment = HSSFCellStyle.ALIGN_LEFT;
            TableHeaderCS7.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS7.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS7.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS7.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS7.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS7.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS7.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS7.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS7.SetFont(Serif8F);

            HSSFCellStyle TableHeaderCS9 = hssfworkbook.CreateCellStyle();
            TableHeaderCS9.Alignment = HSSFCellStyle.ALIGN_LEFT;
            TableHeaderCS9.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS9.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS9.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS9.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS9.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS9.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS9.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS9.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS9.SetFont(Serif10F);

            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 2), 1, "УТВЕРЖДАЮ_____________");
            //cell.CellStyle = Calibri11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            //cell.CellStyle = Calibri11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 4), 0, "Клиент:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 4), 1, ClientName);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 5), 0, "Партия:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 5), 1, BatchName);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 3), 0, "Задание №" + WorkAssignmentID.ToString());
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 3), 1, "Заказы");
            //cell.CellStyle = CalibriBold11CS;
            //RowIndex += 6;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "Заказы");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;

            int ColumnIndex = -1;
            string ColumnName = string.Empty;

            for (int x = 0; x < SummOrdersDT.Columns.Count; x++)
            {
                if (SummOrdersDT.Columns[x].ColumnName == "Height" || SummOrdersDT.Columns[x].ColumnName == "Width")
                    continue;
                ColumnIndex++;
                ColumnName = SummOrdersDT.Columns[x].ColumnName;
                if (ColumnName == "Sizes")
                {
                    ColumnName = "Размер";
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), ColumnIndex, ColumnName);
                    cell.CellStyle = TableHeaderCS7;
                    sheet1.SetColumnWidth(ColumnIndex, 12 * 256);
                    continue;
                }
                if (ColumnName == "TotalAmount")
                {
                    ColumnName = "Итого";
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), ColumnIndex, ColumnName);
                    cell.CellStyle = TableHeaderCS7;
                    sheet1.SetColumnWidth(ColumnIndex, 8 * 256);
                    continue;
                }
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), ColumnIndex, ColumnName);
                cell.CellStyle = TableHeaderCS7;
                sheet1.SetColumnWidth(ColumnIndex, 19 * 256);
            }
            sheet1.SetColumnWidth(0, 15 * 256);
            RowIndex++;

            ColumnIndex = -1;
            for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
            {
                if (SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                    continue;
                Type t = SummOrdersDT.Rows[0][y].GetType();

                ColumnIndex++;

                if (int.TryParse(SummOrdersDT.Rows[0][y].ToString(), out int IntValue))
                {
                    cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                    cell.SetCellValue(IntValue);
                    cell.CellStyle = TableHeaderCS7;
                    continue;
                }

                if (t.Name == "String" || t.Name == "DBNull")
                {
                    cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                    cell.SetCellValue(SummOrdersDT.Rows[0][y].ToString());
                    cell.CellStyle = TableHeaderCS7;
                    continue;
                }
            }
            RowIndex++;

            for (int x = 1; x < SummOrdersDT.Rows.Count; x++)
            {
                ColumnIndex = -1;
                for (int y = 0; y < SummOrdersDT.Columns.Count; y++)
                {
                    if (SummOrdersDT.Columns[y].ColumnName == "Height" || SummOrdersDT.Columns[y].ColumnName == "Width")
                        continue;
                    Type t = SummOrdersDT.Rows[x][y].GetType();

                    ColumnIndex++;

                    if (x == SummOrdersDT.Rows.Count - 1 && int.TryParse(SummOrdersDT.Rows[x][y].ToString(), out int IntValue))
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(IntValue);
                        cell.CellStyle = TableHeaderCS9;
                        continue;
                    }

                    if (x == SummOrdersDT.Rows.Count - 2 && double.TryParse(SummOrdersDT.Rows[x][y].ToString(), out double DecValue))
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(DecValue);
                        cell.CellStyle = TableHeaderCS9;
                        continue;
                    }

                    if (int.TryParse(SummOrdersDT.Rows[x][y].ToString(), out IntValue))
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(IntValue);
                        cell.CellStyle = TableHeaderCS9;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        cell.SetCellValue(SummOrdersDT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS9;
                        continue;
                    }
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
        }

        public void DyeingMen1ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Гр.в.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Гр.н.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, "Патина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 9, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(9);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(9);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingMen2ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Лак");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingWomen1ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            decimal Time, decimal Cost, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Time));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Cost));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Зачистка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingWomen2ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Обезжиривание");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingWomen3ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Протирка патины");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingPackingToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            decimal Time, decimal Cost, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Time));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Cost));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Пленка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Упаковка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(8);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(8);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(8);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingBoringToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            decimal Time, decimal Cost, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Time));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Cost));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Сверление");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void CurvedAssemblyToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (LorenzoCurvedOrdersDT.Rows.Count == 0 && ElegantCurvedOrdersDT.Rows.Count == 0 && KansasCurvedOrdersDT.Rows.Count == 0 && SofiaCurvedOrdersDT.Rows.Count == 0 && DakotaCurvedOrdersDT.Rows.Count == 0 && Turin1CurvedOrdersDT.Rows.Count == 0 && Turin1_1CurvedOrdersDT.Rows.Count == 0
                && Turin3CurvedOrdersDT.Rows.Count == 0 && InfinitiCurvedOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(LorenzoCurvedOrdersDT, ElegantCurvedOrdersDT, KansasCurvedOrdersDT, SofiaCurvedOrdersDT,
                Turin1CurvedOrdersDT, Turin1_1CurvedOrdersDT, Turin3CurvedOrdersDT, Turin3CurvedOrdersDT.Clone(), InfinitiCurvedOrdersDT, DakotaCurvedOrdersDT, true);
            DataTable DT = KansasCurvedOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName1 = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Гнутые ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 17 * 256);
                sheet1.SetColumnWidth(1, 15 * 256);
                sheet1.SetColumnWidth(2, 10 * 256);
                sheet1.SetColumnWidth(3, 15 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);
                sheet1.SetColumnWidth(6, 6 * 256);

                HSSFCell cell = null;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;

                CurvedAssemblyDT.Clear();
                DT.Clear();

                DataTable DT1 = new DataTable();
                foreach (DataRow item in LorenzoCurvedOrdersDT.Select("GroupType=0"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in ElegantCurvedOrdersDT.Select("GroupType=0"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in KansasCurvedOrdersDT.Select("GroupType=0"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in SofiaCurvedOrdersDT.Select("GroupType=0"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in DakotaCurvedOrdersDT.Select("GroupType=0"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in Turin1CurvedOrdersDT.Select("GroupType=0"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in Turin1_1CurvedOrdersDT.Select("GroupType=0"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in Turin3CurvedOrdersDT.Select("GroupType=0"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in InfinitiCurvedOrdersDT.Select("GroupType=0"))
                    DT.Rows.Add(item.ItemArray);

                CurvedAssemblyCollect(DT, ref CurvedAssemblyDT);

                DT1 = CurvedAssemblyDT.Copy();

                CurvedAssembly1ToExcelSingly(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    DT1, WorkAssignmentID, BatchName, "ЗОВ", string.Empty, "Гнутые фасады", ref RowIndex);
                RowIndex++;

                CurvedAssembly1ToExcelSingly(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    DT1, WorkAssignmentID, BatchName, "ЗОВ", "ДУБЛЬ", "Гнутые фасады", ref RowIndex);
                RowIndex++;

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    CurvedAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);

                    foreach (DataRow item1 in LorenzoCurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in ElegantCurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in KansasCurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in SofiaCurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in DakotaCurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in Turin1CurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in Turin1_1CurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in Turin3CurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in InfinitiCurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);

                    CurvedAssemblyCollect(DT, ref CurvedAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName1 = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (CurvedAssemblyDT.Rows.Count > 0)
                        CurvedAssembly2ToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, CurvedAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName1, OrderName, "Гнутые фасады", Notes, ref RowIndex);
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Гнутые Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 17 * 256);
                sheet1.SetColumnWidth(1, 15 * 256);
                sheet1.SetColumnWidth(2, 10 * 256);
                sheet1.SetColumnWidth(3, 15 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);
                sheet1.SetColumnWidth(6, 6 * 256);

                HSSFCell cell = null;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;

                CurvedAssemblyDT.Clear();
                DT.Clear();

                DataTable DT1 = new DataTable();
                foreach (DataRow item in LorenzoCurvedOrdersDT.Select("GroupType=1"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in ElegantCurvedOrdersDT.Select("GroupType=1"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in KansasCurvedOrdersDT.Select("GroupType=1"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in SofiaCurvedOrdersDT.Select("GroupType=1"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in DakotaCurvedOrdersDT.Select("GroupType=1"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in Turin1CurvedOrdersDT.Select("GroupType=1"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in Turin1_1CurvedOrdersDT.Select("GroupType=1"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in Turin3CurvedOrdersDT.Select("GroupType=1"))
                    DT.Rows.Add(item.ItemArray);
                foreach (DataRow item in InfinitiCurvedOrdersDT.Select("GroupType=1"))
                    DT.Rows.Add(item.ItemArray);

                CurvedAssemblyCollect(DT, ref CurvedAssemblyDT);

                DT1 = CurvedAssemblyDT.Copy();

                CurvedAssembly1ToExcelSingly(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    DT1, WorkAssignmentID, BatchName, "Маркетинг", string.Empty, "Гнутые фасады", ref RowIndex);
                RowIndex++;

                CurvedAssembly1ToExcelSingly(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    DT1, WorkAssignmentID, BatchName, "Маркетинг", "ДУБЛЬ", "Гнутые фасады", ref RowIndex);
                RowIndex++;

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    CurvedAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);

                    foreach (DataRow item1 in LorenzoCurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in ElegantCurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in KansasCurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in SofiaCurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in DakotaCurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in Turin1CurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in Turin1_1CurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in Turin3CurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);
                    foreach (DataRow item1 in InfinitiCurvedOrdersDT.Select("MainOrderID=" + MainOrderID))
                        DT.Rows.Add(item1.ItemArray);

                    CurvedAssemblyCollect(DT, ref CurvedAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName1 = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (CurvedAssemblyDT.Rows.Count > 0)
                        CurvedAssembly2ToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, CurvedAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName1, OrderName, "Гнутые фасады", Notes, ref RowIndex);
                    RowIndex++;
                }
            }
        }

        public void CurvedAssembly1ToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string PageName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Фасад");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Тип наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int ColorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorID" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
            {
                ColorID = Convert.ToInt32(DT.Rows[0]["ColorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                        DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (ColorID != Convert.ToInt32(DT.Rows[x + 1]["ColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                                DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        ColorID = Convert.ToInt32(DT.Rows[x + 1]["ColorID"]);
                        TotalAmount = 0;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                                DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                            DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void CurvedAssembly2ToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Фасад");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Тип наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int ColorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorID" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
            {
                ColorID = Convert.ToInt32(DT.Rows[0]["ColorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                        DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (ColorID != Convert.ToInt32(DT.Rows[x + 1]["ColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                                DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        ColorID = Convert.ToInt32(DT.Rows[x + 1]["ColorID"]);
                        TotalAmount = 0;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                                DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                            DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        private void BagetWithAngleAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (BagetWithAngelOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(BagetWithAngelOrdersDT, true);
            DataTable DT = BagetWithAngelOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Не арки ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);
                sheet1.SetColumnWidth(6, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    BagetWithAngleAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = BagetWithAngelOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyBagetWithAngleCollect(DT, ref BagetWithAngleAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (BagetWithAngleAssemblyDT.Rows.Count > 0)
                    {
                        BagetWithAngleAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, BagetWithAngleAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        BagetWithAngleAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, BagetWithAngleAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Багет с запилом Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);
                sheet1.SetColumnWidth(6, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    BagetWithAngleAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = BagetWithAngelOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyBagetWithAngleCollect(DT, ref BagetWithAngleAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (BagetWithAngleAssemblyDT.Rows.Count > 0)
                    {
                        BagetWithAngleAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, BagetWithAngleAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        BagetWithAngleAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, BagetWithAngleAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        private void NotArchDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (NotArchDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(NotArchDecorOrdersDT, true);
            DataTable DT = NotArchDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Не арки ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = NotArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Не арки Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = NotArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void BagetWithAngleAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Л. угол");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "П. угол");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }
            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void NotArchDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }
            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        private void ArchDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (ArchDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(ArchDecorOrdersDT, true);
            DataTable DT = ArchDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Арки ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = ArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Арки Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = ArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void ArchDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        private void GridsDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (GridsDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(GridsDecorOrdersDT, true);
            DataTable DT = GridsDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки1 ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = GridsDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки1 Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = GridsDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void GridsDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

    }

    public class GenevaAssignments : IAllFrontParameterName
    {
        FileManager FM = new FileManager();
        bool HeightLess180 = false;

        DateTime CurrentDate;

        int ColorType = 0;

        DataTable NotCurvedAssemblyDT;
        DataTable CurvedAssemblyDT;
        DataTable DecorAssemblyDT;
        DataTable DeyingDT;

        DataTable InsetDT;
        DataTable DecorDT;
        DataTable DecorParametersDT;
        public DataTable TechStoreDataTable = null;
        public DataTable FrontsDataTable = null;
        public DataTable FrameColorsDataTable = null;
        public DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        public DataTable InsetTypesDataTable = null;
        public DataTable InsetColorsDataTable = null;

        //DataTable ProfileNamesDT;

        //DataTable InsetTypeNamesDT;

        DataTable AppliqueDT;
        DataTable GridsDT;
        DataTable SimpleDT;

        DataTable NotCurvedOrdersDT;
        DataTable CurvedOrdersDT;
        DataTable NotArchDecorOrdersDT;
        DataTable ArchDecorOrdersDT;
        DataTable GridsDecorOrdersDT;

        public GenevaAssignments()
        {

        }

        public void GetCurrentDate()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.UsersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    CurrentDate = Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable = new DataTable();
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void GetInsetColorsDT()
        {
            InsetColorsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InsetColors.InsetColorID, InsetColors.GroupID, infiniu2_catalog.dbo.TechStore.TechStoreName AS InsetColorName FROM InsetColors" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON InsetColors.InsetColorID = infiniu2_catalog.dbo.TechStore.TechStoreID ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = -1;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "-";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = 0;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "на выбор";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }

            }

        }

        public void Initialize()
        {
            Create();
            Fill();
        }

        private void Create()
        {
            FrontsDataTable = new DataTable();
            FrameColorsDataTable = new DataTable();
            PatinaDataTable = new DataTable();
            InsetTypesDataTable = new DataTable();
            InsetColorsDataTable = new DataTable();

            DecorDT = new DataTable();
            DecorParametersDT = new DataTable();

            AppliqueDT = new DataTable();
            GridsDT = new DataTable();
            SimpleDT = new DataTable();

            NotCurvedOrdersDT = new DataTable();
            CurvedOrdersDT = new DataTable();
            NotArchDecorOrdersDT = new DataTable();
            ArchDecorOrdersDT = new DataTable();
            GridsDecorOrdersDT = new DataTable();

            InsetDT = new DataTable();
            InsetDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            InsetDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Worker", Type.GetType("System.String")));
            InsetDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            NotCurvedAssemblyDT = new DataTable();
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Worker", Type.GetType("System.String")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            CurvedAssemblyDT = new DataTable();
            CurvedAssemblyDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("InsetType", Type.GetType("System.String")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("FrontID", Type.GetType("System.Int32")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("PatinaID", Type.GetType("System.Int32")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("InsetTypeID", Type.GetType("System.Int32")));
            CurvedAssemblyDT.Columns.Add(new DataColumn("InsetColorID", Type.GetType("System.Int32")));

            DecorAssemblyDT = new DataTable();
            DecorAssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("DecorID", Type.GetType("System.Int32")));

            DeyingDT = new DataTable();
            DeyingDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            DeyingDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            DeyingDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            DeyingDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DeyingDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            DeyingDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            DeyingDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            DeyingDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            DeyingDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));
        }

        private void Fill()
        {
            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            FrontsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            PatinaDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            GetColorsDT();
            GetInsetColorsDT();
            InsetTypesDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetTypes",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }
            TechStoreDataTable = new DataTable();
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore",
            //    ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(TechStoreDataTable);
            //}
            TechStoreDataTable = TablesManager.TechStoreDataTable;

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT * FROM DecorParameters",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorParametersDT);
            }
            DecorDT = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID AND Enabled = 1 ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
                ColorID, InsetColorID, Height, Width, Count, FrontConfigID, Notes FROM FrontsOrders",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(NotCurvedOrdersDT);
                NotCurvedOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));

                CurvedOrdersDT = NotCurvedOrdersDT.Clone();
                AppliqueDT = NotCurvedOrdersDT.Clone();
                GridsDT = NotCurvedOrdersDT.Clone();
                SimpleDT = NotCurvedOrdersDT.Clone();
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(NotArchDecorOrdersDT);
                NotArchDecorOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
                ArchDecorOrdersDT = NotArchDecorOrdersDT.Clone();
                GridsDecorOrdersDT = NotArchDecorOrdersDT.Clone();
            }
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }

        public string GetFront2Name(int TechnoProfileID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + TechnoProfileID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }
        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
                ColorName = Rows[0]["ColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string FrontType = string.Empty;
            try
            {
                DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
                FrontType = Rows[0]["PatinaName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return FrontType;
        }

        public string GetInsetTypeName(int InsetTypeID)
        {
            string InsetType = string.Empty;
            try
            {
                DataRow[] Rows = InsetTypesDataTable.Select("InsetTypeID = " + InsetTypeID);
                InsetType = Rows[0]["InsetTypeName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return InsetType;
        }

        public string GetInsetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = InsetColorsDataTable.Select("InsetColorID = " + ColorID);
                ColorName = Rows[0]["InsetColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        private string GetDecorName(int ID)
        {
            DataRow[] rows = DecorDT.Select("DecorID=" + ID);
            if (rows.Count() > 0)
                return rows[0]["Name"].ToString();
            else
                return string.Empty;
        }

        public bool HasParameter(int ProductID, String Parameter)
        {
            DataRow[] Rows = DecorParametersDT.Select("ProductID = " + ProductID);

            return Convert.ToBoolean(Rows[0][Parameter]);
        }
        
        //private string ProfileName(int ID)
        //{
        //    string name = string.Empty;
        //    DataRow[] rows = ProfileNamesDT.Select("FrontConfigID=" + ID);
        //    if (rows.Count() > 0)
        //        name = rows[0]["TechStoreName"].ToString();
        //    return name;
        //}

        //private string GetTechInsetTypeName(int ID)
        //{
        //    string name = string.Empty;
        //    DataRow[] rows = InsetTypeNamesDT.Select("FrontConfigID=" + ID);
        //    if (rows.Count() > 0)
        //        name = rows[0]["TechStoreName"].ToString();
        //    return name;
        //}

        private void GetGridMargins(int FrontID, ref int MarginHeight, ref int MarginWidth)
        {
            DataRow[] Rows = TechStoreDataTable.Select("TechStoreID = " + FrontID);
            if (Rows.Count() > 0)
            {
                if (Rows[0]["InsetHeightAdmission"] != DBNull.Value)
                    MarginHeight = Convert.ToInt32(Rows[0]["InsetHeightAdmission"]);
                if (Rows[0]["InsetWidthAdmission"] != DBNull.Value)
                    MarginWidth = Convert.ToInt32(Rows[0]["InsetWidthAdmission"]);
            }
        }

        public string GetMarketClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_marketingorders.dbo.MegaOrders" +
                    " WHERE MegaOrderID=(SELECT TOP 1 MegaOrderID FROM infiniu2_marketingorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + "))",
                    ConnectionStrings.MarketingReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        public string GetZOVClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_zovorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + ")",
                    ConnectionStrings.ZOVReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        private string GetOrderName(int MainOrderID, int GroupType)
        {
            string name = string.Empty;
            string ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            if (GroupType == 1)
                ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            SelectCommand = @"SELECT MegaBatchID, BatchID FROM Batch WHERE BatchID IN (SELECT BatchID FROM BatchDetails WHERE MainOrderID = " + MainOrderID + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                if (DA.Fill(DT) > 0 && DT.Rows[0]["MegaBatchID"] != DBNull.Value && DT.Rows[0]["BatchID"] != DBNull.Value)
                    name = DT.Rows[0]["MegaBatchID"].ToString() + ", " + DT.Rows[0]["BatchID"] + ", " + MainOrderID;
            }
            return name;
        }

        private void GetAppliqueFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("FrontID IN (15760, 3737, 3728,3731,3732,3739,3740,3741,3744,3745,3746)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetGridFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            //РЕШЕТКА ОВАЛ И РМк и РМп
            DataRow[] rows = SourceDT.Select("FrontID IN (3729) OR InsetTypeID IN (685,686,687,688,29470,29471)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetSimpleFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select("FrontID NOT IN (15760, 3737, 3728,3731,3732,3739,3740,3741,3744,3745,3746,3729) AND InsetTypeID NOT IN (685,686,687,688,29470,29471)");
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetNotCurvedFrontsOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
                ColorID, InsetColorID, Height, Width, Count, FrontConfigID, Notes FROM FrontsOrders
                WHERE Width<>-1 AND FrontID IN (16269,30364,30366,30367,28945,15760, 3737, 3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,15108,27914)" +
                " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
                    ColorID, InsetColorID, Height, Width, Count, FrontConfigID, Notes FROM FrontsOrders
                    WHERE Width<>-1 AND FrontID IN (16269,30364,30366,30367,28945,15760, 3737, 3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,15108,27914)" +
                    " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetCurvedFrontsOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
                ColorID, InsetColorID, Height, Width, Count, FrontConfigID, Notes FROM FrontsOrders
                WHERE FrontID IN (1975,1976,1977,1978)" +
                " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
                    ColorID, InsetColorID, Height, Width, Count, FrontConfigID, Notes FROM FrontsOrders
                    WHERE FrontID IN (1975,1976,1977,1978)" +
                    " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetNotArchDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID NOT IN (31, 4, 18, 32, 10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID NOT IN (31, 4, 18, 32, 10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetArchDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID IN (31, 4, 18, 32) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID IN (31, 4, 18, 32) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetGridsDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID IN (10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID IN (10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private DataTable DistFrameColorsTable(DataTable SourceDT, bool OrderASC)
        {
            int ColorID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["ColorID"].ToString(), out ColorID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["ColorID"] = ColorID;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "ColorID ASC";
                else
                    DV.Sort = "ColorID DESC";
                DT = DV.ToTable(true, new string[] { "ColorID" });
            }
            return DT;
        }

        private DataTable DistInsetColorsTable(DataTable SourceDT, bool OrderASC)
        {
            int InsetColorID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("InsetColorID", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                //if (Convert.ToInt32(Row["InsetTypeID"]) != 2 && Convert.ToInt32(Row["InsetTypeID"]) != 5 && Convert.ToInt32(Row["InsetTypeID"]) != 6 && Convert.ToInt32(Row["InsetTypeID"]) != 8)
                //    continue;

                if (int.TryParse(Row["InsetColorID"].ToString(), out InsetColorID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["InsetColorID"] = InsetColorID;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "InsetColorID ASC";
                else
                    DV.Sort = "InsetColorID DESC";
                DT = DV.ToTable(true, new string[] { "InsetColorID" });
            }
            return DT;
        }

        private DataTable DistMainOrdersTable(DataTable SourceDT, bool OrderASC)
        {
            int MainOrderID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("MainOrderID", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "MainOrderID ASC";
                else
                    DV.Sort = "MainOrderID DESC";
                DT = DV.ToTable(true, new string[] { "MainOrderID", "GroupType" });
            }
            return DT;
        }

        private void AssemblyDecorCollect(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "DecorID", "ColorID", "PatinaID", "Length", "Height", "Width", "Notes" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                int Count = 0;
                string filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                    " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                if (DT1.Rows[i]["Notes"] != DBNull.Value && DT1.Rows[i]["Notes"].ToString().Length > 0)
                {
                    filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                      " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                      " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) + " AND Notes='" + DT1.Rows[i]["Notes"] + "'";
                }
                DataRow[] rows = SourceDT.Select(filter);
                if (rows.Count() == 0)
                    continue;

                foreach (DataRow item in rows)
                    Count += Convert.ToInt32(item["Count"]);

                string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                    Color += " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["DecorID"] = Convert.ToInt32(DT1.Rows[i]["DecorID"]);
                NewRow["Name"] = GetDecorName(Convert.ToInt32(DT1.Rows[i]["DecorID"]));
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "ColorID"))
                    NewRow["Color"] = Color;
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                //    NewRow["Height"] = DT1.Rows[i]["Height"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                //    NewRow["Height"] = DT1.Rows[i]["Length"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width"))
                //    NewRow["Width"] = DT1.Rows[i]["Width"];

                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                {
                    if (Convert.ToInt32(DT1.Rows[i]["Height"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Height"];
                    if (Convert.ToInt32(DT1.Rows[i]["Length"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Length"];
                }
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                {
                    if (Convert.ToInt32(DT1.Rows[i]["Length"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Length"];
                    if (Convert.ToInt32(DT1.Rows[i]["Height"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Height"];
                }
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width") && Convert.ToInt32(DT1.Rows[i]["Width"]) != -1)
                    NewRow["Width"] = DT1.Rows[i]["Width"];

                NewRow["Count"] = Count;
                NewRow["Notes"] = DT1.Rows[i]["Notes"];
                DestinationDT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Color, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }
        }

        private void AssemblyCurvedCollect(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT, string.Empty, "ColorID, PatinaID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID", "PatinaID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]), "InsetTypeID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetTypeID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                        " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "InsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) + 
                            " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]), "Height", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) + 
                                " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            DataRow[] rows = DestinationDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                                " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) + 
                                " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]));
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Front"] = GetFrontName(Convert.ToInt32(Srows[0]["FrontID"]));
                                if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) == -1)
                                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                                else
                                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));
                                NewRow["InsetType"] = GetInsetTypeName(Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]));
                                NewRow["InsetColor"] = GetColorName(Convert.ToInt32(DT3.Rows[x]["InsetColorID"]));
                                NewRow["Height"] = Convert.ToInt32(DT4.Rows[y]["Height"]);
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                                NewRow["InsetTypeID"] = Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT3.Rows[x]["InsetColorID"]);
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
            DT1.Dispose();
            DT2.Dispose();
            DT3.Dispose();
            DT4.Dispose();
        }

        private void AssemblySimpleCollect(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int Addmission)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "FrontID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                string Name = GetFrontName(Convert.ToInt32(DT1.Rows[i]["FrontID"]));
                using (DataView DV = new DataView(SourceDT, "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND InsetTypeID=1 AND ColorID=" + ColorID, "ColorID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    {
                        decimal Square = 0;
                        int Count = 0;
                        //витрины не дуэт и не трио
                        string filter = "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) +
                            " AND ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                        if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                            filter = "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) +
                            " AND ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                        DataRow[] rows = SourceDT.Select(filter);
                        if (rows.Count() == 0)
                            continue;

                        foreach (DataRow item in rows)
                        {
                            Count += Convert.ToInt32(item["Count"]);
                            Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                        }
                        Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["ColorType"] = ColorID;
                        NewRow["Name"] = Name;
                        if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                        else
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                        NewRow["InsetColor"] = "Витрина";
                        NewRow["Height"] = Convert.ToInt32(rows[0]["Height"]) + Addmission;
                        NewRow["Width"] = Convert.ToInt32(rows[0]["Width"]) + Addmission;
                        NewRow["Count"] = Count;
                        if (rows[0]["Notes"].ToString().Length == 0)
                            NewRow["Notes"] = "текстура не важна";
                        else
                            NewRow["Notes"] = rows[0]["Notes"].ToString() + ", текстура не важна";
                        NewRow["Square"] = Square;
                        DestinationDT.Rows.Add(NewRow);
                    }
                }

                using (DataView DV = new DataView(SourceDT, "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND InsetTypeID=-1 AND ColorID=" + ColorID, "ColorID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    {
                        decimal Square = 0;
                        int Count = 0;
                        //без наполнителя
                        string filter = "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) +
                            " AND ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                        if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                            filter = "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) +
                            " AND ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                        DataRow[] rows = SourceDT.Select(filter);
                        if (rows.Count() == 0)
                            continue;

                        foreach (DataRow item in rows)
                        {
                            Count += Convert.ToInt32(item["Count"]);
                            Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                        }
                        Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["ColorType"] = ColorID;
                        NewRow["Name"] = Name;
                        if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                        else
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"])); 
                        NewRow["InsetColor"] = "-";

                        bool bHeightLess180 = false;
                        bool bWidthLess180 = false;
                        string Notes = rows[0]["Notes"].ToString();
                        if (Convert.ToInt32(rows[0]["Height"]) <= 176)
                            bHeightLess180 = true;
                        if (Convert.ToInt32(rows[0]["Width"]) <= 176)
                            bWidthLess180 = true;

                        NewRow["Height"] = Convert.ToInt32(rows[0]["Height"]) + Addmission;
                        NewRow["Width"] = Convert.ToInt32(rows[0]["Width"]) + Addmission;
                        NewRow["Count"] = Count;
                        if (bHeightLess180)
                        {
                            HeightLess180 = true;
                            if (rows[0]["Notes"].ToString().Length == 0)
                                NewRow["Notes"] = "текстура не важна";
                            else
                                NewRow["Notes"] = rows[0]["Notes"].ToString() + ", текстура не важна";
                        }
                        if (bWidthLess180)
                        {
                            if (!HeightLess180)
                            {
                                if (rows[0]["Notes"].ToString().Length == 0)
                                    NewRow["Notes"] = "текстура не важна";
                                else
                                    NewRow["Notes"] = rows[0]["Notes"].ToString() + ", текстура не важна";
                            }
                        }
                        if (!bHeightLess180 && !bWidthLess180)
                            NewRow["Notes"] = rows[0]["Notes"].ToString();

                        NewRow["Square"] = Square;
                        DestinationDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void AssemblyGridsCollect(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int Addmission)
        {
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "FrontID NOT IN (3729) AND ColorID=" + ColorID, "ColorID, InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                //решетка пп 45
                string filter = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                    filter = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                DataRow[] rows = SourceDT.Select(filter);
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = GetFrontName(Convert.ToInt32(rows[0]["FrontID"])) + " РЕШ";
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"])); 
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["Height"] = Convert.ToInt32(rows[0]["Height"]) + Addmission;
                NewRow["Width"] = Convert.ToInt32(rows[0]["Width"]) + Addmission;
                NewRow["Count"] = Count;
                if (rows[0]["Notes"].ToString().Length == 0)
                    NewRow["Notes"] = "Силик уплотнитель";
                else
                    NewRow["Notes"] = rows[0]["Notes"].ToString() + ", Силик уплотнитель";
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(SourceDT, "FrontID IN (3729) AND ColorID=" + ColorID, "ColorID, InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                //решетка овал
                string filter = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                    filter = "ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                DataRow[] rows = SourceDT.Select(filter);
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = GetFrontName(Convert.ToInt32(rows[0]["FrontID"]));
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"])); 
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"])) + " ОВАЛ";
                NewRow["Height"] = Convert.ToInt32(rows[0]["Height"]) + Addmission;
                NewRow["Width"] = Convert.ToInt32(rows[0]["Width"]) + Addmission;
                NewRow["Count"] = Count;
                if (rows[0]["Notes"].ToString().Length == 0)
                    NewRow["Notes"] = "Силик уплотнитель";
                else
                    NewRow["Notes"] = rows[0]["Notes"].ToString() + ", Силик уплотнитель";
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void AssemblyAppliqueCollect(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int Addmission)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            
            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "FrontID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                int FrontID = Convert.ToInt32(DT1.Rows[i]["FrontID"]);
                string Name = GetFrontName(Convert.ToInt32(DT1.Rows[i]["FrontID"]));

                using (DataView DV = new DataView(SourceDT, "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND ColorID=" + ColorID, "ColorID, InsetTypeID DESC, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    decimal Square = 0;
                    int Count = 0;
                    string filter = "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) +
                            " AND ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                    if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                        filter = "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) +
                        " AND ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                    DataRow[] rows = SourceDT.Select(filter);
                    if (rows.Count() == 0)
                        continue;

                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                        Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                    }
                    Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow["ColorType"] = ColorID;
                    NewRow["Name"] = Name;
                    if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                    NewRow["InsetColor"] = "-";
                    NewRow["Height"] = Convert.ToInt32(rows[0]["Height"]) + Addmission;
                    NewRow["Width"] = Convert.ToInt32(rows[0]["Width"]) + Addmission;
                    NewRow["Count"] = Count;
                    NewRow["Notes"] = rows[0]["Notes"].ToString();
                    NewRow["Square"] = Square;
                    DestinationDT.Rows.Add(NewRow);
                }
            }
        }

        private void CollectDeying(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();

            using (DataView DV = new DataView(SourceDT, string.Empty, "ColorID, PatinaID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID", "PatinaID"});
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]), "FrontID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "FrontID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    string Name = GetFrontName(Convert.ToInt32(DT2.Rows[j]["FrontID"]));
                    //сначала витрины
                    int FrontID = Convert.ToInt32(DT2.Rows[j]["FrontID"]);
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=1 AND FrontID=" + Convert.ToInt32(DT2.Rows[j]["FrontID"]) +
                        " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]),
                        "InsetTypeID, InsetColorID, Height, Width, Notes", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
                    }
                    for (int c = 0; c < DT3.Rows.Count; c++)
                    {
                        decimal Square = 0;
                        int Count = 0;

                        string filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                            " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND FrontID=" + Convert.ToInt32(DT2.Rows[j]["FrontID"]) +
                            " AND InsetTypeID=" + Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[c]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT3.Rows[c]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT3.Rows[c]["Width"]) + " AND (Notes='' OR Notes IS NULL)";

                        if (DT3.Rows[c]["Notes"] != DBNull.Value && DT3.Rows[c]["Notes"].ToString().Length > 0)
                            filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                            " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND FrontID=" + Convert.ToInt32(DT2.Rows[j]["FrontID"]) + 
                            " AND InsetTypeID=" + Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[c]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT3.Rows[c]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT3.Rows[c]["Width"]) + " AND Notes='" + DT3.Rows[c]["Notes"] + "'";

                        DataRow[] rows = SourceDT.Select(filter);

                        if (rows.Count() == 0)
                            continue;
                        foreach (DataRow item in rows)
                        {
                            Count += Convert.ToInt32(item["Count"]);
                            Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                        }
                        Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) == -1)
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                        else
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));
                        
                        NewRow["Name"] = Name;
                        NewRow["InsetColor"] = "Витрина";
                        NewRow["Height"] = rows[0]["Height"];
                        NewRow["Width"] = rows[0]["Width"];
                        NewRow["Count"] = Count;
                        NewRow["Square"] = Square;
                        NewRow["Notes"] = rows[0]["Notes"];
                        DestinationDT.Rows.Add(NewRow);
                    }

                    using (DataView DV = new DataView(SourceDT, "InsetTypeID<>1 AND FrontID=" + Convert.ToInt32(DT2.Rows[j]["FrontID"]) +
                        " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]),
                        "InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
                    }
                    for (int c = 0; c < DT3.Rows.Count; c++)
                    {
                        decimal Square = 0;
                        int Count = 0;
                        string InsetType = string.Empty;
                        string InsetColor = string.Empty;

                        string filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                            " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND FrontID=" + Convert.ToInt32(DT2.Rows[j]["FrontID"]) +
                            " AND InsetTypeID=" + Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[c]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT3.Rows[c]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT3.Rows[c]["Width"]) + " AND (Notes='' OR Notes IS NULL)";

                        if (DT3.Rows[c]["Notes"] != DBNull.Value && DT3.Rows[c]["Notes"].ToString().Length > 0)
                            filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                            " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND FrontID=" + Convert.ToInt32(DT2.Rows[j]["FrontID"]) +
                            " AND InsetTypeID=" + Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[c]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT3.Rows[c]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT3.Rows[c]["Width"]) + " AND Notes='" + DT3.Rows[c]["Notes"] + "'";

                        DataRow[] rows = SourceDT.Select(filter);
                        if (rows.Count() == 0)
                            continue;
                        foreach (DataRow item in rows)
                        {
                            Count += Convert.ToInt32(item["Count"]);
                            Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                        }
                        Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) == -1)
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                        else
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));
                        InsetType = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"]));
                        if (Convert.ToInt32(rows[0]["InsetTypeID"]) != -1)
                        {
                            if (Convert.ToInt32(rows[0]["InsetColorID"]) != -1)
                                InsetColor = " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                        }
                        else
                        {
                            InsetType = string.Empty;
                        }
                        if (Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) == 685 || Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) == 686 || Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) == 687 || Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) == 688 || Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) == 29470 || Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) == 29471)
                            Name = GetFrontName(Convert.ToInt32(rows[0]["FrontID"])) + " РЕШ";
                        NewRow["Name"] = Name;
                        NewRow["InsetColor"] = InsetType + InsetColor;
                        NewRow["Height"] = rows[0]["Height"];
                        NewRow["Width"] = rows[0]["Width"];
                        NewRow["Count"] = Count;
                        NewRow["Square"] = Square;
                        NewRow["Notes"] = rows[0]["Notes"];
                        DestinationDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        #region Inset

        private DataTable InsetDistSizesTable(DataTable SourceDT, bool OrderASC)
        {
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                DataRow NewRow = DT.NewRow();
                NewRow["Height"] = Row["Height"];
                NewRow["Width"] = Row["Width"];
                DT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "Height ASC, Width ASC";
                else
                    DV.Sort = "Height DESC, Width DESC";
                DT = DV.ToTable(true, new string[] { "Height", "Width" });
            }
            return DT;
        }

        private void InsetNewRow(ref DataTable DestinationDT, int ColorType, string Name, int Height, int Width, int Count, string Worker)
        {
            DataRow NewRow = DestinationDT.NewRow();
            NewRow["ColorType"] = ColorType;
            NewRow["Name"] = Name;
            NewRow["Height"] = Height;
            NewRow["Width"] = Width;
            NewRow["Count"] = Count;
            NewRow["Worker"] = Worker;
            DestinationDT.Rows.Add(NewRow);
        }

        private void InsetNewRow(ref DataTable DestinationDT, int ColorType, string Name, int Count, string Worker)
        {
            DataRow NewRow = DestinationDT.NewRow();
            NewRow["ColorType"] = ColorType;
            NewRow["Name"] = Name;
            NewRow["Count"] = Count;
            NewRow["Worker"] = Worker;
            DestinationDT.Rows.Add(NewRow);
        }

        private void InsetCollectByColor(DataTable SourceDT, ref DataTable DestinationDT, bool OrderASC)
        {
            DataTable DistinctColorsDT = DistInsetColorsTable(SourceDT, true);
            DataTable TempColorsDT = SourceDT.Clone();
            for (int i = 0; i < DistinctColorsDT.Rows.Count; i++)
            {
                ColorType++;
                TempColorsDT.Clear();
                DataRow[] rows = SourceDT.Select("InsetColorID=" + Convert.ToInt32(DistinctColorsDT.Rows[i]["InsetColorID"]));
                foreach (DataRow dr in rows)
                    TempColorsDT.Rows.Add(dr.ItemArray);
                InsetGridsCollect(TempColorsDT, ref DestinationDT, ColorType, OrderASC);
            }
        }

        private void InsetGridsCollect(DataTable SourceDT, ref DataTable DestinationDT, int ColorType, bool OrderASC)
        {
            int Height = 0;
            int Width = 0;
            int MarginHeight = 0;
            int MarginWidth = 0;
            int ProfilesCount = 0;
            decimal Square = 0;
            string Worker = string.Empty;
            int FrontID = Convert.ToInt32(SourceDT.Rows[0]["FrontID"]);
            GetGridMargins(FrontID, ref MarginHeight, ref MarginWidth);

            DataTable DistinctSizesDT = InsetDistSizesTable(SourceDT, OrderASC);
            for (int i = 0; i < DistinctSizesDT.Rows.Count; i++)
            {
                if (FrontID == 3729)
                {
                    Height = Convert.ToInt32(DistinctSizesDT.Rows[i]["Height"]);
                    Width = Convert.ToInt32(DistinctSizesDT.Rows[i]["Width"]);
                    Worker = "ОВАЛ";
                }
                else
                {
                    Height = Convert.ToInt32(DistinctSizesDT.Rows[i]["Height"]) - MarginHeight;
                    Width = Convert.ToInt32(DistinctSizesDT.Rows[i]["Width"]) - MarginWidth;
                }
                if (MarginHeight >= Convert.ToInt32(DistinctSizesDT.Rows[i]["Height"]) || MarginWidth >= Convert.ToInt32(DistinctSizesDT.Rows[i]["Width"]))
                    continue;
                string Name = string.Empty;
                if (Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"]) == 685 || Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"]) == 688 || Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"]) == 29470)
                    Name = " 45";
                if (Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"]) == 686 || Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"]) == 687 || Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"]) == 29471)
                    Name = " 90";
                ProfilesCount = 0;
                Square = 0;
                DataRow[] rows = SourceDT.Select("Height=" + Convert.ToInt32(DistinctSizesDT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[i]["Width"]));
                foreach (DataRow dr in rows)
                    ProfilesCount += Convert.ToInt32(dr["Count"]);
                Square = Convert.ToDecimal(Height) * Convert.ToDecimal(Width) * Convert.ToDecimal(ProfilesCount) / 1000000;
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                InsetNewRow(ref DestinationDT, ColorType,
                    GetInsetTypeName(Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(SourceDT.Rows[0]["InsetColorID"])) + Name,
                    Height, Width, ProfilesCount, Worker);
            }
        }

        private void InsetCollectGridFronts(ref DataTable DestinationDT, bool OrderASC)
        {
            if (GridsDT.Rows.Count > 0)
                InsetCollectByColor(GridsDT, ref DestinationDT, OrderASC);
        }

        #endregion

        public void ClearOrders()
        {
            NotCurvedOrdersDT.Clear();
            CurvedOrdersDT.Clear();
            NotArchDecorOrdersDT.Clear();
            ArchDecorOrdersDT.Clear();
            GridsDecorOrdersDT.Clear();
        }

        public bool GetOrders(int WorkAssignmentID, int FactoryID)
        {
            GetNotCurvedFrontsOrders(ref NotCurvedOrdersDT, WorkAssignmentID, FactoryID);
            GetCurvedFrontsOrders(ref CurvedOrdersDT, WorkAssignmentID, FactoryID);
            GetNotArchDecorOrders(ref NotArchDecorOrdersDT, WorkAssignmentID, FactoryID);
            GetArchDecorOrders(ref ArchDecorOrdersDT, WorkAssignmentID, FactoryID);
            GetGridsDecorOrders(ref GridsDecorOrdersDT, WorkAssignmentID, FactoryID);

            //ProfileNamesDT.Clear();
            //GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Geneva);

            //InsetTypeNamesDT.Clear();
            //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Geneva);

            if (NotCurvedOrdersDT.Rows.Count == 0 && NotArchDecorOrdersDT.Rows.Count == 0 && ArchDecorOrdersDT.Rows.Count == 0 && GridsDecorOrdersDT.Rows.Count == 0)
                return false;
            else
                return true;
        }

        public void CreateExcel(int WorkAssignmentID, string ClientName, string BatchName, ref string sSourceFileName)
        {
            GetCurrentDate();
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont Calibri11F = hssfworkbook.CreateFont();
            Calibri11F.FontHeightInPoints = 11;
            Calibri11F.FontName = "Calibri";

            HSSFFont CalibriBold11F = hssfworkbook.CreateFont();
            CalibriBold11F.FontHeightInPoints = 11;
            CalibriBold11F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold11F.FontName = "Calibri";

            HSSFFont Serif8F = hssfworkbook.CreateFont();
            Serif8F.FontHeightInPoints = 8;
            Serif8F.FontName = "MS Sans Serif";

            HSSFFont Serif10F = hssfworkbook.CreateFont();
            Serif10F.FontHeightInPoints = 10;
            Serif10F.FontName = "MS Sans Serif";

            HSSFFont SerifBold10F = hssfworkbook.CreateFont();
            SerifBold10F.FontHeightInPoints = 10;
            SerifBold10F.FontName = "MS Sans Serif";
            SerifBold10F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;

            HSSFCellStyle Calibri11CS = hssfworkbook.CreateCellStyle();
            Calibri11CS.SetFont(Calibri11F);

            HSSFCellStyle CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.SetFont(CalibriBold11F);

            HSSFCellStyle TableHeaderCS = hssfworkbook.CreateCellStyle();
            TableHeaderCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.SetFont(Serif8F);

            HSSFCellStyle TableHeaderDecCS = hssfworkbook.CreateCellStyle();
            TableHeaderDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.SetFont(Serif8F);

            HSSFCellStyle WorkerColumnCS = hssfworkbook.CreateCellStyle();
            WorkerColumnCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            WorkerColumnCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.BottomBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.LeftBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.RightBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.TopBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.SetFont(Serif10F);

            HSSFCellStyle TableContentCS = hssfworkbook.CreateCellStyle();
            TableContentCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableContentCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableContentCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableContentCS.RightBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableContentCS.TopBorderColor = HSSFColor.BLACK.index;
            TableContentCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountCS = hssfworkbook.CreateCellStyle();
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountDecCS = hssfworkbook.CreateCellStyle();
            TotamAmountDecCS.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            #endregion

            NotArchDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            ArchDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            CurvedAssemblyToExcel(ref hssfworkbook,
                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            GridsDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            SimpleDT.Clear();
            GetSimpleFronts(NotCurvedOrdersDT, ref SimpleDT);

            GridsDT.Clear();
            GetGridFronts(NotCurvedOrdersDT, ref GridsDT);

            AppliqueDT.Clear();
            GetAppliqueFronts(NotCurvedOrdersDT, ref AppliqueDT);

            NotCurvedAssemblyToExcel(ref hssfworkbook,
                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName);

            InsetDT.Clear();
            InsetCollectGridFronts(ref InsetDT, false);
            if (InsetDT.Rows.Count > 0)
                InsetToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName);

            DeyingToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName, "Покраска");

            DeyingByMainOrderToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            //string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");

            ////string tempFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
            string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = @"\\192.168.1.6\Public\ТПС\Infinium\Задания\";
            string tempFolder = @"\\192.168.1.6\Public\USERS_2016\_ДЕЙСТВУЮЩИЕ\ПРОИЗВОДСТВО\ТПС\инфиниум\";
            string CurrentMonthName = DateTime.Now.ToString("MMMM");
            tempFolder = Path.Combine(tempFolder, CurrentMonthName);
            if (!(Directory.Exists(tempFolder)))
            {
                Directory.CreateDirectory(tempFolder);
            }
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);

            //string sSourceFolder = System.Environment.GetEnvironmentVariable("TEMP");
            //string sFolderPath = "Общие файлы/Производство/Задания в работу";
            //string sDestFolder = Configs.DocumentsPath + sFolderPath;
            //sSourceFileName = GetFileName(sDestFolder, BatchName);

            //FileInfo file = new FileInfo(sSourceFolder + @"\" + sSourceFileName);
            //FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            //hssfworkbook.Write(NewFile);
            //NewFile.Close();
        }

        private string GetFileName(string sDestFolder, string ExcelName)
        {
            string sExtension = ".xls";
            string sFileName = ExcelName;

            int j = 1;
            while (FM.FileExist(sDestFolder + "/" + sFileName + sExtension, Configs.FTPType))
            {
                sFileName = ExcelName + "(" + j++ + ")";
            }
            sFileName = sFileName + sExtension;
            return sFileName;
        }

        private void DeyingToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName, string PageName)
        {
            DeyingDT.Clear();
            CollectDeying(NotCurvedOrdersDT, ref DeyingDT);
            if (DeyingDT.Rows.Count > 0)
                DeyingToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName, "Покраска");
        }

        private void DeyingByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            DataTable DistMainOrdersDT = DistMainOrdersTable(NotCurvedOrdersDT, true);
            DataTable DT = NotCurvedOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, MainOrders.DocNumber, MainOrders.MainOrderID, Batch.MegaBatchID, Batch.BatchID FROM MainOrders" +
                    " INNER JOIN BatchDetails ON MainOrders.MainOrderID=BatchDetails.MainOrderID" +
                    " INNER JOIN Batch ON BatchDetails.BatchID=Batch.BatchID" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.CLientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrders.MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet("ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 20 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 20 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);

                HSSFCell cell = null;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;
                RowIndex++;
                RowIndex++;
                for (int i = 0; i < DistMainOrdersDT.Rows.Count; i++)
                {
                    if (Convert.ToInt32(DistMainOrdersDT.Rows[i]["GroupType"]) == 1)
                        continue;
                    int MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]);
                    int MegaBatchID = 0;
                    int BatchID = 0;
                    DeyingDT.Clear();
                    DT.Clear();
                    DataRow[] rows = NotCurvedOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(DT, ref DeyingDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        MegaBatchID = Convert.ToInt32(CRows[0]["MegaBatchID"]);
                        BatchID = Convert.ToInt32(CRows[0]["BatchID"]);
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DeyingDT.Rows.Count > 0)
                        DeyingByMainOrderToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DeyingDT, WorkAssignmentID,
                            "ЗОВ " + MegaBatchID + ", " + BatchID + ", " + MainOrderID, ClientName, OrderName, string.Empty, ref RowIndex);
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, MegaOrders.OrderNumber, MainOrders.MainOrderID, MainOrders.Notes, Batch.MegaBatchID, Batch.BatchID FROM MainOrders" +
                    " INNER JOIN BatchDetails ON MainOrders.MainOrderID=BatchDetails.MainOrderID" +
                    " INNER JOIN Batch ON BatchDetails.BatchID=Batch.BatchID" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrders.MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Маркет");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 20 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 20 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);

                HSSFCell cell = null;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;
                RowIndex++;
                RowIndex++;
                for (int i = 0; i < DistMainOrdersDT.Rows.Count; i++)
                {
                    if (Convert.ToInt32(DistMainOrdersDT.Rows[i]["GroupType"]) == 0)
                        continue;
                    int MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]);
                    int MegaBatchID = 0;
                    int BatchID = 0;
                    DeyingDT.Clear();
                    DT.Clear();
                    string Notes = string.Empty;
                    DataRow[] rows = NotCurvedOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(DT, ref DeyingDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        MegaBatchID = Convert.ToInt32(CRows[0]["MegaBatchID"]);
                        BatchID = Convert.ToInt32(CRows[0]["BatchID"]);
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DeyingDT.Rows.Count > 0)
                        DeyingByMainOrderToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DeyingDT, WorkAssignmentID,
                            "ЗОВ " + MegaBatchID + ", " + BatchID + ", " + MainOrderID, ClientName, OrderName, Notes, ref RowIndex);
                }
            }
        }

        public void InsetToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки2");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 35 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 11 * 256);
            sheet1.SetColumnWidth(3, 7 * 256);
            sheet1.SetColumnWidth(4, 23 * 256);
            
            InsetToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    ref sheet1, InsetDT, WorkAssignmentID, BatchName, ClientName, "Сборка решеток Женева", ref RowIndex);

            RowIndex++;
            RowIndex++;

            InsetToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    ref sheet1, InsetDT, WorkAssignmentID, BatchName, ClientName, "Пила DFTP-400", ref RowIndex);
        }

        public void NotCurvedAssemblyToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName)
        {
            if (NotCurvedOrdersDT.Rows.Count == 0)
                return;

            int RowIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Сборка");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            sheet1.SetColumnWidth(1, 20 * 256);
            sheet1.SetColumnWidth(2, 20 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 6 * 256);
            sheet1.SetColumnWidth(5, 6 * 256);
            sheet1.SetColumnWidth(6, 18 * 256);

            HSSFCell cell = null;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            RowIndex++;

            DataTable DistFrameColorsDT = DistFrameColorsTable(NotCurvedOrdersDT, true);
            NotCurvedAssemblyDT.Clear();
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                HeightLess180 = false;
                AssemblySimpleCollect(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), SimpleDT, ref NotCurvedAssemblyDT, 4);
                AssemblyGridsCollect(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), GridsDT, ref NotCurvedAssemblyDT, 4);
                AssemblyAppliqueCollect(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), AppliqueDT, ref NotCurvedAssemblyDT, 4);
            }

            decimal div1 = 0;
            decimal div2 = 0;
            decimal time = 0;
            decimal cost = 0;

            if (NotCurvedAssemblyDT.Rows.Count > 0)
            {
                div1 = 8;
                div2 = 2.14m;
                time = 0;
                cost = 0;
                GetPlanningTime1(NotCurvedAssemblyDT, div1, div2, ref time, ref cost);

                NotCurvedAssemblyToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    ref sheet1, NotCurvedAssemblyDT, WorkAssignmentID, BatchName, ClientName, "Пила", time, cost, ref RowIndex);
                RowIndex++;
            }

            NotCurvedAssemblyDT.Clear();
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySimpleCollect(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), SimpleDT, ref NotCurvedAssemblyDT, 0);
                AssemblyGridsCollect(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), GridsDT, ref NotCurvedAssemblyDT, 0);
                AssemblyAppliqueCollect(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), AppliqueDT, ref NotCurvedAssemblyDT, 0);
            }
            if (NotCurvedAssemblyDT.Rows.Count > 0)
            {
                div1 = 2.2m;
                div2 = 2.14m;
                time = 0;
                cost = 0;
                GetPlanningTime1(NotCurvedAssemblyDT, div1, div2, ref time, ref cost);
                NotCurvedAssemblyToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    ref sheet1, NotCurvedAssemblyDT, WorkAssignmentID, BatchName, ClientName, "Ровер", time, cost, ref RowIndex);
                RowIndex++;

                div1 = 5.98m;
                div2 = 2.14m;
                time = 0;
                cost = 0;
                GetPlanningTime1(NotCurvedAssemblyDT, div1, div2, ref time, ref cost);
                NotCurvedAssemblyToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                     ref sheet1, NotCurvedAssemblyDT, WorkAssignmentID, BatchName, ClientName, "Клей", time, cost, ref RowIndex);
                RowIndex++;

                div1 = 4;
                div2 = 2.14m;
                time = 0;
                cost = 0;
                GetPlanningTime1(NotCurvedAssemblyDT, div1, div2, ref time, ref cost);
                NotCurvedAssemblyToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                     ref sheet1, NotCurvedAssemblyDT, WorkAssignmentID, BatchName, ClientName, "Пресс", time, cost, ref RowIndex);
                RowIndex++;

                div1 = 4;
                div2 = 1.254m;
                time = 0;
                cost = 0;
                GetPlanningTime1(NotCurvedAssemblyDT, div1, div2, ref time, ref cost);
                NotCurvedAssemblyToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                     ref sheet1, NotCurvedAssemblyDT, WorkAssignmentID, BatchName, ClientName, "Заказ", time, cost, ref RowIndex);
            }
        }

        private void GetPlanningTime1(DataTable NotCurvedAssemblyDT, decimal div1, decimal div2, ref decimal time, ref decimal cost)
        {
            for (int x = 0; x < NotCurvedAssemblyDT.Rows.Count; x++)
            {
                if (NotCurvedAssemblyDT.Rows[x]["Square"] != DBNull.Value)
                    time += Convert.ToDecimal(NotCurvedAssemblyDT.Rows[x]["Square"]);
            }

            if (div1 != 0)
                time = Decimal.Round(time / div1, 3, MidpointRounding.AwayFromZero);

            cost = Decimal.Round(time * div2, 2, MidpointRounding.AwayFromZero);
        }

        private void GetPlanningTime2(DataTable NotCurvedAssemblyDT, decimal div1, decimal div2, ref decimal time, ref decimal cost)
        {
            for (int x = 0; x < NotCurvedAssemblyDT.Rows.Count; x++)
            {
                if (NotCurvedAssemblyDT.Rows[x]["Count"] != DBNull.Value)
                    time += Convert.ToInt32(NotCurvedAssemblyDT.Rows[x]["Count"]);
            }

            if (div1 != 0)
                time = Decimal.Round(time / div1, 3, MidpointRounding.AwayFromZero);
            
            cost = Decimal.Round(time * div2, 2, MidpointRounding.AwayFromZero);
        }

        private void CurvedAssemblyToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            DataTable DistMainOrdersDT = DistMainOrdersTable(CurvedOrdersDT, true);
            DataTable DT = CurvedOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Гнутые ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 20 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 20 * 256);
                sheet1.SetColumnWidth(3, 15 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);
                sheet1.SetColumnWidth(6, 6 * 256);

                CurvedAssemblyDT.Clear();
                DT.Clear();

                DataTable DT1 = new DataTable();
                foreach (DataRow item in CurvedOrdersDT.Select("GroupType=0"))
                    DT.Rows.Add(item.ItemArray);

                AssemblyCurvedCollect(DT, ref CurvedAssemblyDT);

                DT1 = CurvedAssemblyDT.Copy();

                CurvedAssembly1ToExcelSingly(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    DT1, WorkAssignmentID, BatchName, "ЗОВ", string.Empty, "Гнутые фасады", ref RowIndex);
                RowIndex++;

                CurvedAssembly1ToExcelSingly(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    DT1, WorkAssignmentID, BatchName, "ЗОВ", "ДУБЛЬ", "Гнутые фасады", ref RowIndex);
                RowIndex++;

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    CurvedAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = CurvedOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyCurvedCollect(DT, ref CurvedAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (CurvedAssemblyDT.Rows.Count > 0)
                        CurvedAssembly2ToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, CurvedAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, OrderName, "Гнутые фасады", Notes, ref RowIndex);
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Гнутые Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 20 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 20 * 256);
                sheet1.SetColumnWidth(3, 15 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);
                sheet1.SetColumnWidth(6, 6 * 256);

                CurvedAssemblyDT.Clear();
                DT.Clear();

                DataTable DT1 = new DataTable();
                foreach (DataRow item in CurvedOrdersDT.Select("GroupType=1"))
                    DT.Rows.Add(item.ItemArray);

                AssemblyCurvedCollect(DT, ref CurvedAssemblyDT);

                DT1 = CurvedAssemblyDT.Copy();

                CurvedAssembly1ToExcelSingly(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    DT1, WorkAssignmentID, BatchName, "Маркетинг", string.Empty, "Гнутые фасады", ref RowIndex);
                RowIndex++;

                CurvedAssembly1ToExcelSingly(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    DT1, WorkAssignmentID, BatchName, "Маркетинг", "ДУБЛЬ", "Гнутые фасады", ref RowIndex);
                RowIndex++;

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    CurvedAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = CurvedOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyCurvedCollect(DT, ref CurvedAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (CurvedAssemblyDT.Rows.Count > 0)
                        CurvedAssembly2ToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, CurvedAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, OrderName, "Гнутые фасады", Notes, ref RowIndex);
                    RowIndex++;
                }
            }
        }

        public void InsetToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS, 
            ref HSSFSheet sheet1, DataTable DT,
            int WorkAssignmentID, string BatchName, string ClientName, string PageName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;

            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }


                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
        }

        public void NotCurvedAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, decimal Time, decimal Cost, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Time));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Cost));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OperationName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Примечание");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            if (NotCurvedAssemblyDT.Rows.Count > 0)
                CType = Convert.ToInt32(NotCurvedAssemblyDT.Rows[0]["ColorType"]);

            for (int x = 0; x < NotCurvedAssemblyDT.Rows.Count; x++)
            {
                if (NotCurvedAssemblyDT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(NotCurvedAssemblyDT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(NotCurvedAssemblyDT.Rows[x]["Count"]);
                }
                if (NotCurvedAssemblyDT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(NotCurvedAssemblyDT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(NotCurvedAssemblyDT.Rows[x]["Square"]);
                }

                for (int y = 0; y < NotCurvedAssemblyDT.Columns.Count; y++)
                {
                    if (NotCurvedAssemblyDT.Columns[y].ColumnName == "ColorType" || NotCurvedAssemblyDT.Columns[y].ColumnName == "Square")
                        continue;

                    Type t = NotCurvedAssemblyDT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(NotCurvedAssemblyDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(NotCurvedAssemblyDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(NotCurvedAssemblyDT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= NotCurvedAssemblyDT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(NotCurvedAssemblyDT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < NotCurvedAssemblyDT.Columns.Count; y++)
                        {
                            if (NotCurvedAssemblyDT.Columns[y].ColumnName == "ColorType" || NotCurvedAssemblyDT.Columns[y].ColumnName == "Square")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(NotCurvedAssemblyDT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == NotCurvedAssemblyDT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < NotCurvedAssemblyDT.Columns.Count; y++)
                    {
                        if (NotCurvedAssemblyDT.Columns[y].ColumnName == "ColorType" || NotCurvedAssemblyDT.Columns[y].ColumnName == "Square")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    cell.CellStyle = TableHeaderDecCS;

                    RowIndex++;

                    for (int y = 0; y < NotCurvedAssemblyDT.Columns.Count; y++)
                    {
                        if (NotCurvedAssemblyDT.Columns[y].ColumnName == "ColorType" || NotCurvedAssemblyDT.Columns[y].ColumnName == "Square")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
        }

        public void CurvedAssembly1ToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string PageName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Партия:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, BatchName);
            //cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Фасад");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Тип наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int ColorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorID" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
            {
                ColorID = Convert.ToInt32(DT.Rows[0]["ColorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                        DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32" || t.Name == "Int64")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (ColorID != Convert.ToInt32(DT.Rows[x + 1]["ColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                                DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        ColorID = Convert.ToInt32(DT.Rows[x + 1]["ColorID"]);
                        TotalAmount = 0;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                                DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                            DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void CurvedAssembly2ToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Фасад");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Тип наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int ColorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorID" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
            {
                ColorID = Convert.ToInt32(DT.Rows[0]["ColorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                        DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (ColorID != Convert.ToInt32(DT.Rows[x + 1]["ColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                                DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        ColorID = Convert.ToInt32(DT.Rows[x + 1]["ColorID"]);
                        TotalAmount = 0;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                                DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                            DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void DeyingToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName,  string ClientName, string PageName)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet(PageName);
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            sheet1.SetColumnWidth(1, 20 * 256);
            sheet1.SetColumnWidth(2, 20 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 6 * 256);
            sheet1.SetColumnWidth(5, 6 * 256);
            HSSFCell cell = null;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            RowIndex++;
            RowIndex++;
            DataTable DT = new DataTable();
            DataColumn Col1 = new DataColumn("Col1", System.Type.GetType("System.String"));
            DataColumn Col2 = new DataColumn("Col2", System.Type.GetType("System.String"));
            DataColumn Col3 = new DataColumn("Col3", System.Type.GetType("System.String"));

            if (DeyingDT.Rows.Count > 0)
            {
                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingWomen1ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Жен1. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingWomen2ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Жен2. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                Col2.SetOrdinal(7);
                Col3.SetOrdinal(8);
                DT.Columns["Square"].SetOrdinal(9);
                DyeingMen1ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Муж1. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingWomen3ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Жен3. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingMen2ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Муж2. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                Col2.SetOrdinal(7);
                DT.Columns["Square"].SetOrdinal(8);

                decimal div1 = 8;
                decimal div2 = 2.14m;
                decimal time = 0;
                decimal cost = 0;

                GetPlanningTime1(DT, div1, div2, ref time, ref cost);

                DyeingPackingToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Упаковка. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, time, cost, ref RowIndex);
                RowIndex++;

                //DT.Dispose();
                //Col1.Dispose();
                //Col2.Dispose();
                //Col3.Dispose();
                //DT = DeyingDT.Copy();
                //Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                //Col1.SetOrdinal(6);
                //DT.Columns["Square"].SetOrdinal(7);
                //DT.Columns["Notes"].SetOrdinal(8);
                //DyeingBoringToExcel(ref hssfworkbook,
                //        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, ClientName, BatchName,
                //    "Сверление. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", ref RowIndex);
            }

            RowIndex++;
        }

        public void DeyingByMainOrderToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string Notes, ref int RowIndex)
        {
            DataTable TempDT = new DataTable();
            DataColumn Col1 = new DataColumn("Col1", System.Type.GetType("System.String"));
            DataColumn Col2 = new DataColumn("Col2", System.Type.GetType("System.String"));
            DataColumn Col3 = new DataColumn("Col3", System.Type.GetType("System.String"));

            if (DT.Rows.Count > 0)
            {
                decimal div1 = 8;
                decimal div2 = 2.14m;
                decimal time = 0;
                decimal cost = 0;
                GetPlanningTime1(NotCurvedAssemblyDT, div1, div2, ref time, ref cost);

                TempDT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                TempDT = DT.Copy();
                Col1 = TempDT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = TempDT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                Col2.SetOrdinal(7);
                TempDT.Columns["Square"].SetOrdinal(8);
                DyeingPackingToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, TempDT, WorkAssignmentID, BatchName, ClientName, OrderName,
                    "Упаковка. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", Notes, time, cost, ref RowIndex);
                RowIndex++;


                div1 = 48;
                div2 = 2.14m;
                time = 0;
                cost = 0;
                GetPlanningTime2(NotCurvedAssemblyDT, div1, div2, ref time, ref cost);

                TempDT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                TempDT = DT.Copy();
                Col1 = TempDT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                TempDT.Columns["Square"].SetOrdinal(7);
                TempDT.Columns["Notes"].SetOrdinal(8);
                DyeingBoringToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, TempDT, WorkAssignmentID, BatchName, ClientName, OrderName,
                    "Сверление. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", Notes, time, cost, ref RowIndex);
            }

            RowIndex++;
        }

        public void DyeingMen1ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Гр.в.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Гр.н.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, "Патина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 9, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(9);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(9);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingMen2ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Лак");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingWomen1ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes, 
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Зачистка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingWomen2ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Обезжиривание");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingWomen3ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Протирка патины");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingPackingToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            decimal Time, decimal Cost, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Time));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Cost));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Пленка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Упаковка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(8);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(8);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(8);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingBoringToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            decimal Time, decimal Cost, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "ч/ч");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Time));
            cell.CellStyle = Calibri11CS;


            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Планово-премиальный фонд:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "руб.");
            cell.CellStyle = Calibri11CS;

            cell = sheet1.CreateRow(RowIndex++).CreateCell(2);
            cell.SetCellValue(Convert.ToDouble(Cost));
            cell.CellStyle = Calibri11CS;

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Сверление");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        private void NotArchDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (NotArchDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(NotArchDecorOrdersDT, true);
            DataTable DT = NotArchDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Не арки ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = NotArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);
                    
                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Не арки Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = NotArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void NotArchDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }
            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        private void ArchDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (ArchDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(ArchDecorOrdersDT, true);
            DataTable DT = ArchDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Арки ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = ArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Арки Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = ArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void ArchDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        private void GridsDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (GridsDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(GridsDecorOrdersDT, true);
            DataTable DT = GridsDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки1 ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = GridsDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки1 Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = GridsDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void GridsDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

    }

    public class Tafel1Assignments : IAllFrontParameterName
    {
        FileManager FM = new FileManager();
        bool HeightLess180 = false;

        DateTime CurrentDate;

        int ColorType = 0;

        DataTable NotCurvedAssemblyDT;
        //DataTable CurvedAssemblyDT;
        DataTable DecorAssemblyDT;
        DataTable DeyingDT;

        DataTable InsetDT;
        DataTable DecorDT;
        DataTable DecorParametersDT;
        public DataTable TechStoreDataTable = null;
        public DataTable FrontsDataTable = null;
        public DataTable FrameColorsDataTable = null;
        public DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        public DataTable InsetTypesDataTable = null;
        public DataTable InsetColorsDataTable = null;

        //DataTable ProfileNamesDT;

        //DataTable InsetTypeNamesDT;

        //DataTable AppliqueDT;
        //DataTable GridsDT;
        DataTable SimpleDT;

        DataTable NotCurvedOrdersDT;
        //DataTable CurvedOrdersDT;
        DataTable NotArchDecorOrdersDT;
        DataTable ArchDecorOrdersDT;
        DataTable GridsDecorOrdersDT;

        public Tafel1Assignments()
        {

        }

        public void GetCurrentDate()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.UsersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    CurrentDate = Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable = new DataTable();
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void GetInsetColorsDT()
        {
            InsetColorsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InsetColors.InsetColorID, InsetColors.GroupID, infiniu2_catalog.dbo.TechStore.TechStoreName AS InsetColorName FROM InsetColors" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON InsetColors.InsetColorID = infiniu2_catalog.dbo.TechStore.TechStoreID ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = -1;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "-";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = 0;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "на выбор";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }

            }

        }

        public void Initialize()
        {
            Create();
            Fill();
        }

        private void Create()
        {
            FrontsDataTable = new DataTable();
            FrameColorsDataTable = new DataTable();
            PatinaDataTable = new DataTable();
            InsetTypesDataTable = new DataTable();
            InsetColorsDataTable = new DataTable();

            DecorDT = new DataTable();
            DecorParametersDT = new DataTable();

            //AppliqueDT = new DataTable();
            //GridsDT = new DataTable();
            SimpleDT = new DataTable();

            NotCurvedOrdersDT = new DataTable();
            //CurvedOrdersDT = new DataTable();
            NotArchDecorOrdersDT = new DataTable();
            ArchDecorOrdersDT = new DataTable();
            GridsDecorOrdersDT = new DataTable();

            InsetDT = new DataTable();
            InsetDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            InsetDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            InsetDT.Columns.Add(new DataColumn("Worker", Type.GetType("System.String")));
            InsetDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            NotCurvedAssemblyDT = new DataTable();
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Worker", Type.GetType("System.String")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            NotCurvedAssemblyDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));

            //CurvedAssemblyDT = new DataTable();
            //CurvedAssemblyDT.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            //CurvedAssemblyDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            //CurvedAssemblyDT.Columns.Add(new DataColumn("InsetType", Type.GetType("System.String")));
            //CurvedAssemblyDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            //CurvedAssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            //CurvedAssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            //CurvedAssemblyDT.Columns.Add(new DataColumn("FrontID", Type.GetType("System.Int32")));
            //CurvedAssemblyDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));
            //CurvedAssemblyDT.Columns.Add(new DataColumn("PatinaID", Type.GetType("System.Int32")));
            //CurvedAssemblyDT.Columns.Add(new DataColumn("InsetTypeID", Type.GetType("System.Int32")));
            //CurvedAssemblyDT.Columns.Add(new DataColumn("InsetColorID", Type.GetType("System.Int32")));

            DecorAssemblyDT = new DataTable();
            DecorAssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("DecorID", Type.GetType("System.Int32")));

            DeyingDT = new DataTable();
            DeyingDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            DeyingDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            DeyingDT.Columns.Add(new DataColumn("InsetColor", Type.GetType("System.String")));
            DeyingDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DeyingDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            DeyingDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            DeyingDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            DeyingDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            DeyingDT.Columns.Add(new DataColumn("ColorType", Type.GetType("System.Int32")));
        }

        private void Fill()
        {
            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            FrontsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            PatinaDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            GetColorsDT();
            GetInsetColorsDT();
            InsetTypesDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetTypes",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }
            TechStoreDataTable = new DataTable();
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore",
            //    ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(TechStoreDataTable);
            //}
            TechStoreDataTable = TablesManager.TechStoreDataTable;

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT * FROM DecorParameters",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorParametersDT);
            }
            DecorDT = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID AND Enabled = 1 ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
                ColorID, InsetColorID, Height, Width, Count, FrontConfigID, Notes FROM FrontsOrders",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(NotCurvedOrdersDT);
                NotCurvedOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));

                //CurvedOrdersDT = NotCurvedOrdersDT.Clone();
                //AppliqueDT = NotCurvedOrdersDT.Clone();
                //GridsDT = NotCurvedOrdersDT.Clone();
                SimpleDT = NotCurvedOrdersDT.Clone();
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(NotArchDecorOrdersDT);
                NotArchDecorOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
                ArchDecorOrdersDT = NotArchDecorOrdersDT.Clone();
                GridsDecorOrdersDT = NotArchDecorOrdersDT.Clone();
            }
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }

        public string GetFront2Name(int TechnoProfileID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + TechnoProfileID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }
        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
                ColorName = Rows[0]["ColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string FrontType = string.Empty;
            try
            {
                DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
                FrontType = Rows[0]["PatinaName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return FrontType;
        }

        public string GetInsetTypeName(int InsetTypeID)
        {
            string InsetType = string.Empty;
            try
            {
                DataRow[] Rows = InsetTypesDataTable.Select("InsetTypeID = " + InsetTypeID);
                InsetType = Rows[0]["InsetTypeName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return InsetType;
        }

        public string GetInsetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            try
            {
                DataRow[] Rows = InsetColorsDataTable.Select("InsetColorID = " + ColorID);
                ColorName = Rows[0]["InsetColorName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ColorName;
        }

        private string GetDecorName(int ID)
        {
            DataRow[] rows = DecorDT.Select("DecorID=" + ID);
            if (rows.Count() > 0)
                return rows[0]["Name"].ToString();
            else
                return string.Empty;
        }

        public bool HasParameter(int ProductID, String Parameter)
        {
            DataRow[] Rows = DecorParametersDT.Select("ProductID = " + ProductID);

            return Convert.ToBoolean(Rows[0][Parameter]);
        }

        //private string ProfileName(int ID)
        //{
        //    string name = string.Empty;
        //    DataRow[] rows = ProfileNamesDT.Select("FrontConfigID=" + ID);
        //    if (rows.Count() > 0)
        //        name = rows[0]["TechStoreName"].ToString();
        //    return name;
        //}

        //private string GetTechInsetTypeName(int ID)
        //{
        //    string name = string.Empty;
        //    DataRow[] rows = InsetTypeNamesDT.Select("FrontConfigID=" + ID);
        //    if (rows.Count() > 0)
        //        name = rows[0]["TechStoreName"].ToString();
        //    return name;
        //}

        private void GetGridMargins(int FrontID, ref int MarginHeight, ref int MarginWidth)
        {
            DataRow[] Rows = TechStoreDataTable.Select("TechStoreID = " + FrontID);
            if (Rows.Count() > 0)
            {
                if (Rows[0]["InsetHeightAdmission"] != DBNull.Value)
                    MarginHeight = Convert.ToInt32(Rows[0]["InsetHeightAdmission"]);
                if (Rows[0]["InsetWidthAdmission"] != DBNull.Value)
                    MarginWidth = Convert.ToInt32(Rows[0]["InsetWidthAdmission"]);
            }
        }

        public string GetMarketClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_marketingorders.dbo.MegaOrders" +
                    " WHERE MegaOrderID=(SELECT TOP 1 MegaOrderID FROM infiniu2_marketingorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + "))",
                    ConnectionStrings.MarketingReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        public string GetZOVClientName(int MainOrderID)
        {
            string ClientName = string.Empty;

            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName FROM Clients WHERE ClientID = " +
                    " (SELECT ClientID FROM infiniu2_zovorders.dbo.MainOrders WHERE MainOrderID = " + MainOrderID + ")",
                    ConnectionStrings.ZOVReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                }
            }

            return ClientName;
        }

        private string GetOrderName(int MainOrderID, int GroupType)
        {
            string name = string.Empty;
            string ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            if (GroupType == 1)
                ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            SelectCommand = @"SELECT MegaBatchID, BatchID FROM Batch WHERE BatchID IN (SELECT BatchID FROM BatchDetails WHERE MainOrderID = " + MainOrderID + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                if (DA.Fill(DT) > 0 && DT.Rows[0]["MegaBatchID"] != DBNull.Value && DT.Rows[0]["BatchID"] != DBNull.Value)
                    name = DT.Rows[0]["MegaBatchID"].ToString() + ", " + DT.Rows[0]["BatchID"] + ", " + MainOrderID;
            }
            return name;
        }

        //private void GetAppliqueFronts(DataTable SourceDT, ref DataTable DestinationDT)
        //{
        //    DataRow[] rows = SourceDT.Select("FrontID IN (15760, 3737, 3728,3731,3732,3739,3740,3741,3744,3745,3746)");
        //    foreach (DataRow dr in rows)
        //        DestinationDT.Rows.Add(dr.ItemArray);
        //}

        //private void GetGridFronts(DataTable SourceDT, ref DataTable DestinationDT)
        //{
        //    //РЕШЕТКА ОВАЛ И РМк и РМп
        //    DataRow[] rows = SourceDT.Select("FrontID IN (3729) OR InsetTypeID IN (685,686,687,688,29470,29471)");
        //    foreach (DataRow dr in rows)
        //        DestinationDT.Rows.Add(dr.ItemArray);
        //}

        private void GetSimpleFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataRow[] rows = SourceDT.Select();
            foreach (DataRow dr in rows)
                DestinationDT.Rows.Add(dr.ItemArray);
        }

        private void GetNotCurvedFrontsOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
                ColorID, InsetColorID, Height, Width, Count, FrontConfigID, Notes FROM FrontsOrders
                WHERE Width<>-1 AND FrontID IN (16579, 16580, 16581, 16582,16583,16584, 29277, 29278)" +
                " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
                    ColorID, InsetColorID, Height, Width, Count, FrontConfigID, Notes FROM FrontsOrders
                    WHERE Width<>-1 AND FrontID IN (16579, 16580, 16581, 16582,16583,16584, 29277, 29278)" +
                    " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        //private void GetCurvedFrontsOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        //{
        //    string SelectCommand = string.Empty;
        //    DataTable DT = new DataTable();

        //    SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
        //        ColorID, InsetColorID, Height, Width, Count, FrontConfigID, Notes FROM FrontsOrders
        //        WHERE FrontID IN (1975,1976,1977,1978)" +
        //        " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
        //    if (FactoryID == 2)
        //        SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, FrontID, PatinaID, InsetTypeID,
        //            ColorID, InsetColorID, Height, Width, Count, FrontConfigID, Notes FROM FrontsOrders
        //            WHERE FrontID IN (1975,1976,1977,1978)" +
        //            " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";
        //    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
        //    {
        //        DA.Fill(DT);
        //    }
        //    foreach (DataRow item in DT.Rows)
        //    {
        //        DataRow NewRow = DestinationDT.NewRow();
        //        NewRow.ItemArray = item.ItemArray;
        //        NewRow["GroupType"] = 0;
        //        DestinationDT.Rows.Add(NewRow);
        //    }

        //    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
        //    {
        //        DT.Clear();
        //        DA.Fill(DT);
        //    }
        //    foreach (DataRow item in DT.Rows)
        //    {
        //        DataRow NewRow = DestinationDT.NewRow();
        //        NewRow.ItemArray = item.ItemArray;
        //        NewRow["GroupType"] = 1;
        //        DestinationDT.Rows.Add(NewRow);
        //    }
        //}

        private void GetNotArchDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID NOT IN (31, 4, 18, 32, 10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID NOT IN (31, 4, 18, 32, 10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetArchDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID IN (31, 4, 18, 32) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID IN (31, 4, 18, 32) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetGridsDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID IN (10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID IN (10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private DataTable DistFrameColorsTable(DataTable SourceDT, bool OrderASC)
        {
            int ColorID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["ColorID"].ToString(), out ColorID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["ColorID"] = ColorID;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "ColorID ASC";
                else
                    DV.Sort = "ColorID DESC";
                DT = DV.ToTable(true, new string[] { "ColorID" });
            }
            return DT;
        }

        private DataTable DistInsetColorsTable(DataTable SourceDT, bool OrderASC)
        {
            int InsetColorID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("InsetColorID", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                //if (Convert.ToInt32(Row["InsetTypeID"]) != 2 && Convert.ToInt32(Row["InsetTypeID"]) != 5 && Convert.ToInt32(Row["InsetTypeID"]) != 6 && Convert.ToInt32(Row["InsetTypeID"]) != 8)
                //    continue;

                if (int.TryParse(Row["InsetColorID"].ToString(), out InsetColorID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["InsetColorID"] = InsetColorID;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "InsetColorID ASC";
                else
                    DV.Sort = "InsetColorID DESC";
                DT = DV.ToTable(true, new string[] { "InsetColorID" });
            }
            return DT;
        }

        private DataTable DistMainOrdersTable(DataTable SourceDT, bool OrderASC)
        {
            int MainOrderID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("MainOrderID", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "MainOrderID ASC";
                else
                    DV.Sort = "MainOrderID DESC";
                DT = DV.ToTable(true, new string[] { "MainOrderID", "GroupType" });
            }
            return DT;
        }

        private void AssemblyDecorCollect(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "DecorID", "ColorID", "PatinaID", "Length", "Height", "Width", "Notes" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                int Count = 0;
                string filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                    " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                if (DT1.Rows[i]["Notes"] != DBNull.Value && DT1.Rows[i]["Notes"].ToString().Length > 0)
                {
                    filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                      " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                      " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) + " AND Notes='" + DT1.Rows[i]["Notes"] + "'";
                }
                DataRow[] rows = SourceDT.Select(filter);
                if (rows.Count() == 0)
                    continue;

                foreach (DataRow item in rows)
                    Count += Convert.ToInt32(item["Count"]);

                string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                    Color += " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["DecorID"] = Convert.ToInt32(DT1.Rows[i]["DecorID"]);
                NewRow["Name"] = GetDecorName(Convert.ToInt32(DT1.Rows[i]["DecorID"]));
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "ColorID"))
                    NewRow["Color"] = Color;
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                //    NewRow["Height"] = DT1.Rows[i]["Height"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                //    NewRow["Height"] = DT1.Rows[i]["Length"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width"))
                //    NewRow["Width"] = DT1.Rows[i]["Width"];

                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                {
                    if (Convert.ToInt32(DT1.Rows[i]["Height"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Height"];
                    if (Convert.ToInt32(DT1.Rows[i]["Length"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Length"];
                }
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                {
                    if (Convert.ToInt32(DT1.Rows[i]["Length"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Length"];
                    if (Convert.ToInt32(DT1.Rows[i]["Height"]) != -1)
                        NewRow["Height"] = DT1.Rows[i]["Height"];
                }
                if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width") && Convert.ToInt32(DT1.Rows[i]["Width"]) != -1)
                    NewRow["Width"] = DT1.Rows[i]["Width"];

                NewRow["Count"] = Count;
                NewRow["Notes"] = DT1.Rows[i]["Notes"];
                DestinationDT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Color, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }
        }

        private void AssemblyCurvedCollect(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();
            DataTable DT4 = new DataTable();

            using (DataView DV = new DataView(SourceDT, string.Empty, "ColorID, PatinaID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID", "PatinaID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]), "InsetTypeID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetTypeID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                        " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]), "InsetColorID", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "InsetColorID" });
                    }
                    for (int x = 0; x < DT3.Rows.Count; x++)
                    {
                        using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]), "Height", DataViewRowState.CurrentRows))
                        {
                            DT4 = DV.ToTable(true, new string[] { "Height", "Width" });
                        }
                        for (int y = 0; y < DT4.Rows.Count; y++)
                        {
                            DataRow[] Srows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                                " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]));
                            if (Srows.Count() == 0)
                                continue;

                            int Count = 0;
                            foreach (DataRow item in Srows)
                                Count += Convert.ToInt32(item["Count"]);

                            DataRow[] rows = DestinationDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                                " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                                " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[x]["InsetColorID"]) +
                                " AND Height=" + Convert.ToInt32(DT4.Rows[y]["Height"]));
                            if (rows.Count() == 0)
                            {
                                DataRow NewRow = DestinationDT.NewRow();
                                NewRow["Front"] = GetFrontName(Convert.ToInt32(Srows[0]["FrontID"]));
                                if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) == -1)
                                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                                else
                                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));
                                NewRow["InsetType"] = GetInsetTypeName(Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]));
                                NewRow["InsetColor"] = GetColorName(Convert.ToInt32(DT3.Rows[x]["InsetColorID"]));
                                NewRow["Height"] = Convert.ToInt32(DT4.Rows[y]["Height"]);
                                NewRow["Count"] = Count;
                                NewRow["FrontID"] = Convert.ToInt32(Srows[0]["FrontID"]);
                                NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                                NewRow["InsetTypeID"] = Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]);
                                NewRow["InsetColorID"] = Convert.ToInt32(DT3.Rows[x]["InsetColorID"]);
                                DestinationDT.Rows.Add(NewRow);
                            }
                            else
                            {
                                rows[0]["Count"] = Convert.ToInt32(rows[0]["Count"]) + Count;
                            }
                        }
                    }
                }
            }
            DT1.Dispose();
            DT2.Dispose();
            DT3.Dispose();
            DT4.Dispose();
        }

        private void AssemblySimpleCollect(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int Addmission)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "FrontID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                string Name = GetFrontName(Convert.ToInt32(DT1.Rows[i]["FrontID"]));
                using (DataView DV = new DataView(SourceDT, "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND InsetTypeID=1 AND ColorID=" + ColorID, "ColorID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    {
                        decimal Square = 0;
                        int Count = 0;
                        //витрины не дуэт и не трио
                        string filter = "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) +
                            " AND ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                        if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                            filter = "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) +
                            " AND ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                        DataRow[] rows = SourceDT.Select(filter);
                        if (rows.Count() == 0)
                            continue;

                        foreach (DataRow item in rows)
                        {
                            Count += Convert.ToInt32(item["Count"]);
                            Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                        }
                        Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["ColorType"] = ColorID;
                        NewRow["Name"] = Name;
                        if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                        else
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                        NewRow["InsetColor"] = "Витрина";
                        NewRow["Height"] = Convert.ToInt32(rows[0]["Height"]) + Addmission;
                        NewRow["Width"] = Convert.ToInt32(rows[0]["Width"]) + Addmission;
                        NewRow["Count"] = Count;
                        NewRow["Notes"] = rows[0]["Notes"].ToString();
                        if (rows[0]["Notes"].ToString().Length == 0)
                            NewRow["Notes"] = "текстура не важна";
                        else
                            NewRow["Notes"] = rows[0]["Notes"].ToString() + ", текстура не важна";
                        NewRow["Square"] = Square;
                        DestinationDT.Rows.Add(NewRow);
                    }
                }

                using (DataView DV = new DataView(SourceDT, "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND InsetTypeID=-1 AND ColorID=" + ColorID, "ColorID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width", "Notes" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    {
                        decimal Square = 0;
                        int Count = 0;
                        //без наполнителя
                        string filter = "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) +
                            " AND ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                        if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                            filter = "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) +
                            " AND ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='" + DT2.Rows[j]["Notes"] + "'";

                        DataRow[] rows = SourceDT.Select(filter);
                        if (rows.Count() == 0)
                            continue;

                        foreach (DataRow item in rows)
                        {
                            Count += Convert.ToInt32(item["Count"]);
                            Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                        }
                        Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);
                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["ColorType"] = ColorID;
                        NewRow["Name"] = Name;
                        if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                        else
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                        NewRow["InsetColor"] = "-";

                        bool bHeightLess180 = false;
                        bool bWidthLess180 = false;

                        if (Convert.ToInt32(rows[0]["Height"]) <= 176)
                            bHeightLess180 = true;
                        if (Convert.ToInt32(rows[0]["Width"]) <= 176)
                            bWidthLess180 = true;

                        NewRow["Notes"] = rows[0]["Notes"].ToString();
                        NewRow["Height"] = Convert.ToInt32(rows[0]["Height"]) + Addmission;
                        NewRow["Width"] = Convert.ToInt32(rows[0]["Width"]) + Addmission;
                        NewRow["Count"] = Count;
                        if (bHeightLess180)
                        {
                            HeightLess180 = true;
                            if (rows[0]["Notes"].ToString().Length == 0)
                                NewRow["Notes"] = "текстура не важна";
                            else
                                NewRow["Notes"] = rows[0]["Notes"].ToString() + ", текстура не важна";
                        }
                        if (bWidthLess180)
                        {
                            if (!HeightLess180)
                            {
                                if (rows[0]["Notes"].ToString().Length == 0)
                                    NewRow["Notes"] = "текстура не важна";
                                else
                                    NewRow["Notes"] = rows[0]["Notes"].ToString() + ", текстура не важна";
                            }
                        }
                        if (!bHeightLess180 && !bWidthLess180)
                            NewRow["Notes"] = rows[0]["Notes"].ToString();

                        NewRow["Square"] = Square;
                        DestinationDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void AssemblyGridsCollect(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int Addmission)
        {
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "FrontID NOT IN (3729) AND ColorID=" + ColorID, "ColorID, InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                //решетка пп 45
                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = GetFrontName(Convert.ToInt32(rows[0]["FrontID"])) + " РЕШ";
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                NewRow["Height"] = Convert.ToInt32(rows[0]["Height"]) + Addmission;
                NewRow["Width"] = Convert.ToInt32(rows[0]["Width"]) + Addmission;
                NewRow["Count"] = Count;
                if (rows[0]["Notes"].ToString().Length == 0)
                    NewRow["Notes"] = "Силик уплотнитель";
                else
                    NewRow["Notes"] = rows[0]["Notes"].ToString() + ", Силик уплотнитель";
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(SourceDT, "FrontID IN (3729) AND ColorID=" + ColorID, "ColorID, InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
            {
                DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width" });
            }
            for (int j = 0; j < DT2.Rows.Count; j++)
            {
                decimal Square = 0;
                int Count = 0;
                //решетка овал
                DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                foreach (DataRow item in rows)
                {
                    Count += Convert.ToInt32(item["Count"]);
                    Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                }
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["ColorType"] = ColorID;
                NewRow["Name"] = GetFrontName(Convert.ToInt32(rows[0]["FrontID"]));
                if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                else
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                NewRow["InsetColor"] = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"])) + " ОВАЛ";
                NewRow["Height"] = Convert.ToInt32(rows[0]["Height"]) + Addmission;
                NewRow["Width"] = Convert.ToInt32(rows[0]["Width"]) + Addmission;
                NewRow["Count"] = Count;
                if (rows[0]["Notes"].ToString().Length == 0)
                    NewRow["Notes"] = "Силик уплотнитель";
                else
                    NewRow["Notes"] = rows[0]["Notes"].ToString() + ", Силик уплотнитель";
                NewRow["Square"] = Square;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void AssemblyAppliqueCollect(int ColorID, DataTable SourceDT, ref DataTable DestinationDT, int Addmission)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "FrontID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                int FrontID = Convert.ToInt32(DT1.Rows[i]["FrontID"]);
                string Name = GetFrontName(Convert.ToInt32(DT1.Rows[i]["FrontID"]));

                using (DataView DV = new DataView(SourceDT, "FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND ColorID=" + ColorID, "ColorID, InsetTypeID DESC, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "ColorID", "PatinaID", "InsetTypeID", "InsetColorID", "Height", "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    decimal Square = 0;
                    int Count = 0;
                    DataRow[] rows = SourceDT.Select("FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) +
                        " AND ColorID=" + Convert.ToInt32(DT2.Rows[j]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT2.Rows[j]["PatinaID"]) + " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]));
                    if (rows.Count() == 0)
                        continue;

                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                        Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                    }
                    Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow["ColorType"] = ColorID;
                    NewRow["Name"] = Name;
                    if (Convert.ToInt32(rows[0]["PatinaID"]) == -1)
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(rows[0]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(rows[0]["PatinaID"]));
                    NewRow["InsetColor"] = "-";
                    NewRow["Height"] = Convert.ToInt32(rows[0]["Height"]) + Addmission;
                    NewRow["Width"] = Convert.ToInt32(rows[0]["Width"]) + Addmission;
                    NewRow["Count"] = Count;
                    NewRow["Notes"] = rows[0]["Notes"].ToString();
                    NewRow["Square"] = Square;
                    DestinationDT.Rows.Add(NewRow);
                }
            }
        }

        private void CollectDeying(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            DataTable DT3 = new DataTable();

            using (DataView DV = new DataView(SourceDT, string.Empty, "ColorID, PatinaID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID", "PatinaID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]), "FrontID", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "FrontID" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    string Name = GetFrontName(Convert.ToInt32(DT2.Rows[j]["FrontID"]));
                    //сначала витрины
                    int FrontID = Convert.ToInt32(DT2.Rows[j]["FrontID"]);
                    using (DataView DV = new DataView(SourceDT, "InsetTypeID=1 AND FrontID=" + Convert.ToInt32(DT2.Rows[j]["FrontID"]) +
                        " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]),
                        "InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "InsetTypeID", "InsetColorID", "Height", "Width" });
                    }
                    for (int c = 0; c < DT3.Rows.Count; c++)
                    {
                        decimal Square = 0;
                        int Count = 0;

                        DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                            " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND FrontID=" + Convert.ToInt32(DT2.Rows[j]["FrontID"]) +
                            " AND InsetTypeID=" + Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[c]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT3.Rows[c]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT3.Rows[c]["Width"]));
                        if (rows.Count() == 0)
                            continue;
                        foreach (DataRow item in rows)
                        {
                            Count += Convert.ToInt32(item["Count"]);
                            Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                        }
                        Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) == -1)
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                        else
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));

                        NewRow["Name"] = Name;
                        NewRow["InsetColor"] = "Витрина";
                        NewRow["Height"] = rows[0]["Height"];
                        NewRow["Width"] = rows[0]["Width"];
                        NewRow["Count"] = Count;
                        NewRow["Square"] = Square;
                        NewRow["Notes"] = rows[0]["Notes"];
                        DestinationDT.Rows.Add(NewRow);
                    }

                    using (DataView DV = new DataView(SourceDT, "InsetTypeID<>1 AND FrontID=" + Convert.ToInt32(DT2.Rows[j]["FrontID"]) +
                        " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]),
                        "InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
                    {
                        DT3 = DV.ToTable(true, new string[] { "InsetTypeID", "InsetColorID", "Height", "Width" });
                    }
                    for (int c = 0; c < DT3.Rows.Count; c++)
                    {
                        decimal Square = 0;
                        int Count = 0;
                        string InsetType = string.Empty;
                        string InsetColor = string.Empty;

                        DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                            " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND FrontID=" + Convert.ToInt32(DT2.Rows[j]["FrontID"]) +
                            " AND InsetTypeID=" + Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) +
                            " AND InsetColorID=" + Convert.ToInt32(DT3.Rows[c]["InsetColorID"]) + " AND Height=" + Convert.ToInt32(DT3.Rows[c]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT3.Rows[c]["Width"]));
                        if (rows.Count() == 0)
                            continue;
                        foreach (DataRow item in rows)
                        {
                            Count += Convert.ToInt32(item["Count"]);
                            Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                        }
                        Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                        DataRow NewRow = DestinationDT.NewRow();
                        NewRow["ColorType"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                        if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) == -1)
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                        else
                            NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + "+" + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));
                        InsetType = GetInsetTypeName(Convert.ToInt32(rows[0]["InsetTypeID"]));
                        if (Convert.ToInt32(rows[0]["InsetTypeID"]) != -1)
                        {
                            if (Convert.ToInt32(rows[0]["InsetColorID"]) != -1)
                                InsetColor = " " + GetInsetColorName(Convert.ToInt32(rows[0]["InsetColorID"]));
                        }
                        else
                        {
                            InsetType = string.Empty;
                        }
                        if (Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) == 685 || Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) == 686 || Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) == 687 || Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) == 688 || Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) == 29470 || Convert.ToInt32(DT3.Rows[c]["InsetTypeID"]) == 29471)
                            Name = GetFrontName(Convert.ToInt32(rows[0]["FrontID"])) + " РЕШ";
                        NewRow["Name"] = Name;
                        NewRow["InsetColor"] = InsetType + InsetColor;
                        NewRow["Height"] = rows[0]["Height"];
                        NewRow["Width"] = rows[0]["Width"];
                        NewRow["Count"] = Count;
                        NewRow["Square"] = Square;
                        NewRow["Notes"] = rows[0]["Notes"];
                        DestinationDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        #region Inset

        private DataTable InsetDistSizesTable(DataTable SourceDT, bool OrderASC)
        {
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                DataRow NewRow = DT.NewRow();
                NewRow["Height"] = Row["Height"];
                NewRow["Width"] = Row["Width"];
                DT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "Height ASC, Width ASC";
                else
                    DV.Sort = "Height DESC, Width DESC";
                DT = DV.ToTable(true, new string[] { "Height", "Width" });
            }
            return DT;
        }

        private void InsetNewRow(ref DataTable DestinationDT, int ColorType, string Name, int Height, int Width, int Count, string Worker)
        {
            DataRow NewRow = DestinationDT.NewRow();
            NewRow["ColorType"] = ColorType;
            NewRow["Name"] = Name;
            NewRow["Height"] = Height;
            NewRow["Width"] = Width;
            NewRow["Count"] = Count;
            NewRow["Worker"] = Worker;
            DestinationDT.Rows.Add(NewRow);
        }

        private void InsetNewRow(ref DataTable DestinationDT, int ColorType, string Name, int Count, string Worker)
        {
            DataRow NewRow = DestinationDT.NewRow();
            NewRow["ColorType"] = ColorType;
            NewRow["Name"] = Name;
            NewRow["Count"] = Count;
            NewRow["Worker"] = Worker;
            DestinationDT.Rows.Add(NewRow);
        }

        private void InsetCollectByColor(DataTable SourceDT, ref DataTable DestinationDT, bool OrderASC)
        {
            DataTable DistinctColorsDT = DistInsetColorsTable(SourceDT, true);
            DataTable TempColorsDT = SourceDT.Clone();
            for (int i = 0; i < DistinctColorsDT.Rows.Count; i++)
            {
                ColorType++;
                TempColorsDT.Clear();
                DataRow[] rows = SourceDT.Select("InsetColorID=" + Convert.ToInt32(DistinctColorsDT.Rows[i]["InsetColorID"]));
                foreach (DataRow dr in rows)
                    TempColorsDT.Rows.Add(dr.ItemArray);
                InsetGridsCollect(TempColorsDT, ref DestinationDT, ColorType, OrderASC);
            }
        }

        private void InsetGridsCollect(DataTable SourceDT, ref DataTable DestinationDT, int ColorType, bool OrderASC)
        {
            int Height = 0;
            int Width = 0;
            int MarginHeight = 0;
            int MarginWidth = 0;
            int ProfilesCount = 0;
            decimal Square = 0;
            string Worker = string.Empty;
            int FrontID = Convert.ToInt32(SourceDT.Rows[0]["FrontID"]);
            GetGridMargins(FrontID, ref MarginHeight, ref MarginWidth);

            DataTable DistinctSizesDT = InsetDistSizesTable(SourceDT, OrderASC);
            for (int i = 0; i < DistinctSizesDT.Rows.Count; i++)
            {
                if (FrontID == 3729)
                {
                    Height = Convert.ToInt32(DistinctSizesDT.Rows[i]["Height"]);
                    Width = Convert.ToInt32(DistinctSizesDT.Rows[i]["Width"]);
                    Worker = "ОВАЛ";
                }
                else
                {
                    Height = Convert.ToInt32(DistinctSizesDT.Rows[i]["Height"]) - MarginHeight;
                    Width = Convert.ToInt32(DistinctSizesDT.Rows[i]["Width"]) - MarginWidth;
                }
                if (MarginHeight >= Convert.ToInt32(DistinctSizesDT.Rows[i]["Height"]) || MarginWidth >= Convert.ToInt32(DistinctSizesDT.Rows[i]["Width"]))
                    continue;
                string Name = string.Empty;
                if (Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"]) == 685 || Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"]) == 688 || Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"]) == 29470)
                    Name = " 45";
                if (Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"]) == 686 || Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"]) == 687 || Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"]) == 29471)
                    Name = " 90";
                ProfilesCount = 0;
                Square = 0;
                DataRow[] rows = SourceDT.Select("Height=" + Convert.ToInt32(DistinctSizesDT.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DistinctSizesDT.Rows[i]["Width"]));
                foreach (DataRow dr in rows)
                    ProfilesCount += Convert.ToInt32(dr["Count"]);
                Square = Convert.ToDecimal(Height) * Convert.ToDecimal(Width) * Convert.ToDecimal(ProfilesCount) / 1000000;
                Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                InsetNewRow(ref DestinationDT, ColorType,
                    GetInsetTypeName(Convert.ToInt32(SourceDT.Rows[0]["InsetTypeID"])) + " " + GetInsetColorName(Convert.ToInt32(SourceDT.Rows[0]["InsetColorID"])) + Name,
                    Height, Width, ProfilesCount, Worker);
            }
        }

        private void InsetCollectGridFronts(ref DataTable DestinationDT, bool OrderASC)
        {
            //if (GridsDT.Rows.Count > 0)
            //    InsetCollectByColor(GridsDT, ref DestinationDT, OrderASC);
        }

        #endregion

        public void ClearOrders()
        {
            NotCurvedOrdersDT.Clear();
            //CurvedOrdersDT.Clear();
            NotArchDecorOrdersDT.Clear();
            ArchDecorOrdersDT.Clear();
            GridsDecorOrdersDT.Clear();
        }

        public bool GetOrders(int WorkAssignmentID, int FactoryID)
        {
            GetNotCurvedFrontsOrders(ref NotCurvedOrdersDT, WorkAssignmentID, FactoryID);
            //GetCurvedFrontsOrders(ref CurvedOrdersDT, WorkAssignmentID, FactoryID);
            GetNotArchDecorOrders(ref NotArchDecorOrdersDT, WorkAssignmentID, FactoryID);
            GetArchDecorOrders(ref ArchDecorOrdersDT, WorkAssignmentID, FactoryID);
            GetGridsDecorOrders(ref GridsDecorOrdersDT, WorkAssignmentID, FactoryID);

            //ProfileNamesDT.Clear();
            //GetProfileNames(ref ProfileNamesDT, WorkAssignmentID, FactoryID, Fronts.Geneva);

            //InsetTypeNamesDT.Clear();
            //GetInsetTypeNames(ref InsetTypeNamesDT, WorkAssignmentID, FactoryID, Fronts.Geneva);

            if (NotCurvedOrdersDT.Rows.Count == 0 && NotArchDecorOrdersDT.Rows.Count == 0 && ArchDecorOrdersDT.Rows.Count == 0 && GridsDecorOrdersDT.Rows.Count == 0)
                return false;
            else
                return true;
        }

        public void CreateExcel(int WorkAssignmentID, string ClientName, string BatchName, ref string sSourceFileName)
        {
            GetCurrentDate();
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont Calibri11F = hssfworkbook.CreateFont();
            Calibri11F.FontHeightInPoints = 11;
            Calibri11F.FontName = "Calibri";

            HSSFFont CalibriBold11F = hssfworkbook.CreateFont();
            CalibriBold11F.FontHeightInPoints = 11;
            CalibriBold11F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold11F.FontName = "Calibri";

            HSSFFont Serif8F = hssfworkbook.CreateFont();
            Serif8F.FontHeightInPoints = 8;
            Serif8F.FontName = "MS Sans Serif";

            HSSFFont Serif10F = hssfworkbook.CreateFont();
            Serif10F.FontHeightInPoints = 10;
            Serif10F.FontName = "MS Sans Serif";

            HSSFFont SerifBold10F = hssfworkbook.CreateFont();
            SerifBold10F.FontHeightInPoints = 10;
            SerifBold10F.FontName = "MS Sans Serif";
            SerifBold10F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;

            HSSFCellStyle Calibri11CS = hssfworkbook.CreateCellStyle();
            Calibri11CS.SetFont(Calibri11F);

            HSSFCellStyle CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.SetFont(CalibriBold11F);

            HSSFCellStyle TableHeaderCS = hssfworkbook.CreateCellStyle();
            TableHeaderCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.SetFont(Serif8F);

            HSSFCellStyle TableHeaderDecCS = hssfworkbook.CreateCellStyle();
            TableHeaderDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.SetFont(Serif8F);

            HSSFCellStyle WorkerColumnCS = hssfworkbook.CreateCellStyle();
            WorkerColumnCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            WorkerColumnCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.BottomBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.LeftBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.RightBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.TopBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.SetFont(Serif10F);

            HSSFCellStyle TableContentCS = hssfworkbook.CreateCellStyle();
            TableContentCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableContentCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableContentCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableContentCS.RightBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableContentCS.TopBorderColor = HSSFColor.BLACK.index;
            TableContentCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountCS = hssfworkbook.CreateCellStyle();
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountDecCS = hssfworkbook.CreateCellStyle();
            TotamAmountDecCS.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            #endregion

            NotArchDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            ArchDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            //CurvedAssemblyToExcel(ref hssfworkbook,
            //    Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            GridsDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            SimpleDT.Clear();
            GetSimpleFronts(NotCurvedOrdersDT, ref SimpleDT);

            //GridsDT.Clear();
            //GetGridFronts(NotCurvedOrdersDT, ref GridsDT);

            //AppliqueDT.Clear();
            //GetAppliqueFronts(NotCurvedOrdersDT, ref AppliqueDT);

            NotCurvedAssemblyToExcel(ref hssfworkbook,
                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName);

            InsetDT.Clear();
            InsetCollectGridFronts(ref InsetDT, false);
            if (InsetDT.Rows.Count > 0)
                InsetToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName);

            DeyingToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName, "Покраска");

            DeyingByMainOrderToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            //string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");

            //string tempFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
            string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = @"\\192.168.1.6\Public\ТПС\Infinium\Задания\";
            string tempFolder = @"\\192.168.1.6\Public\USERS_2016\_ДЕЙСТВУЮЩИЕ\ПРОИЗВОДСТВО\ТПС\инфиниум\";
            string CurrentMonthName = DateTime.Now.ToString("MMMM");
            tempFolder = Path.Combine(tempFolder, CurrentMonthName);
            if (!(Directory.Exists(tempFolder)))
            {
                Directory.CreateDirectory(tempFolder);
            }
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);

            //string sSourceFolder = System.Environment.GetEnvironmentVariable("TEMP");
            //string sFolderPath = "Общие файлы/Производство/Задания в работу";
            //string sDestFolder = Configs.DocumentsPath + sFolderPath;
            //sSourceFileName = GetFileName(sDestFolder, BatchName);

            //FileInfo file = new FileInfo(sSourceFolder + @"\" + sSourceFileName);
            //FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            //hssfworkbook.Write(NewFile);
            //NewFile.Close();
        }

        private string GetFileName(string sDestFolder, string ExcelName)
        {
            string sExtension = ".xls";
            string sFileName = ExcelName;

            int j = 1;
            while (FM.FileExist(sDestFolder + "/" + sFileName + sExtension, Configs.FTPType))
            {
                sFileName = ExcelName + "(" + j++ + ")";
            }
            sFileName = sFileName + sExtension;
            return sFileName;
        }

        private void DeyingToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName, string PageName)
        {
            DeyingDT.Clear();
            CollectDeying(NotCurvedOrdersDT, ref DeyingDT);
            if (DeyingDT.Rows.Count > 0)
                DeyingToExcelSingly(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName, ClientName, "Покраска");
        }

        private void DeyingByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            DataTable DistMainOrdersDT = DistMainOrdersTable(NotCurvedOrdersDT, true);
            DataTable DT = NotCurvedOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, MainOrders.DocNumber, MainOrders.MainOrderID, Batch.MegaBatchID, Batch.BatchID FROM MainOrders" +
                    " INNER JOIN BatchDetails ON MainOrders.MainOrderID=BatchDetails.MainOrderID" +
                    " INNER JOIN Batch ON BatchDetails.BatchID=Batch.BatchID" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.CLientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrders.MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet("ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 20 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 20 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);

                HSSFCell cell = null;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;
                RowIndex++;
                RowIndex++;
                for (int i = 0; i < DistMainOrdersDT.Rows.Count; i++)
                {
                    if (Convert.ToInt32(DistMainOrdersDT.Rows[i]["GroupType"]) == 1)
                        continue;
                    int MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]);
                    int MegaBatchID = 0;
                    int BatchID = 0;
                    DeyingDT.Clear();
                    DT.Clear();
                    DataRow[] rows = NotCurvedOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(DT, ref DeyingDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        MegaBatchID = Convert.ToInt32(CRows[0]["MegaBatchID"]);
                        BatchID = Convert.ToInt32(CRows[0]["BatchID"]);
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DeyingDT.Rows.Count > 0)
                        DeyingByMainOrderToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DeyingDT, WorkAssignmentID,
                            "ЗОВ " + MegaBatchID + ", " + BatchID + ", " + MainOrderID, ClientName, OrderName, string.Empty, ref RowIndex);
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, MegaOrders.OrderNumber, MainOrders.MainOrderID, MainOrders.Notes, Batch.MegaBatchID, Batch.BatchID FROM MainOrders" +
                    " INNER JOIN BatchDetails ON MainOrders.MainOrderID=BatchDetails.MainOrderID" +
                    " INNER JOIN Batch ON BatchDetails.BatchID=Batch.BatchID" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrders.MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Маркет");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 20 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 20 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);
                sheet1.SetColumnWidth(5, 6 * 256);

                HSSFCell cell = null;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                cell.CellStyle = Calibri11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
                cell.CellStyle = Calibri11CS;
                RowIndex++;
                RowIndex++;
                for (int i = 0; i < DistMainOrdersDT.Rows.Count; i++)
                {
                    if (Convert.ToInt32(DistMainOrdersDT.Rows[i]["GroupType"]) == 0)
                        continue;
                    int MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]);
                    int MegaBatchID = 0;
                    int BatchID = 0;
                    DeyingDT.Clear();
                    DT.Clear();
                    string Notes = string.Empty;
                    DataRow[] rows = NotCurvedOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item in rows)
                        DT.Rows.Add(item.ItemArray);
                    CollectDeying(DT, ref DeyingDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        MegaBatchID = Convert.ToInt32(CRows[0]["MegaBatchID"]);
                        BatchID = Convert.ToInt32(CRows[0]["BatchID"]);
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DeyingDT.Rows.Count > 0)
                        DeyingByMainOrderToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DeyingDT, WorkAssignmentID,
                            "ЗОВ " + MegaBatchID + ", " + BatchID + ", " + MainOrderID, ClientName, OrderName, Notes, ref RowIndex);
                }
            }
        }

        public void InsetToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки2");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 35 * 256);
            sheet1.SetColumnWidth(1, 11 * 256);
            sheet1.SetColumnWidth(2, 11 * 256);
            sheet1.SetColumnWidth(3, 7 * 256);
            sheet1.SetColumnWidth(4, 23 * 256);

            InsetToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    ref sheet1, InsetDT, WorkAssignmentID, BatchName, ClientName, "Сборка решеток Женева", ref RowIndex);

            RowIndex++;
            RowIndex++;

            InsetToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    ref sheet1, InsetDT, WorkAssignmentID, BatchName, ClientName, "Пила DFTP-400", ref RowIndex);
        }

        public void NotCurvedAssemblyToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName)
        {
            if (NotCurvedOrdersDT.Rows.Count == 0)
                return;

            int RowIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Сборка");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            sheet1.SetColumnWidth(1, 20 * 256);
            sheet1.SetColumnWidth(2, 20 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 6 * 256);
            sheet1.SetColumnWidth(5, 6 * 256);
            sheet1.SetColumnWidth(6, 18 * 256);

            HSSFCell cell = null;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            RowIndex++;

            DataTable DistFrameColorsDT = DistFrameColorsTable(NotCurvedOrdersDT, true);
            NotCurvedAssemblyDT.Clear();
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                HeightLess180 = false;
                AssemblySimpleCollect(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), SimpleDT, ref NotCurvedAssemblyDT, 4);
                //AssemblyGridsCollect(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), GridsDT, ref NotCurvedAssemblyDT, 4);
                //AssemblyAppliqueCollect(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), AppliqueDT, ref NotCurvedAssemblyDT, 4);
            }
            if (NotCurvedAssemblyDT.Rows.Count > 0)
            {
                RowIndex++;
                NotCurvedAssemblyToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    ref sheet1, NotCurvedAssemblyDT, WorkAssignmentID, BatchName, ClientName, "Пила", ref RowIndex);
                RowIndex++;
            }

            NotCurvedAssemblyDT.Clear();
            for (int i = 0; i < DistFrameColorsDT.Rows.Count; i++)
            {
                AssemblySimpleCollect(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), SimpleDT, ref NotCurvedAssemblyDT, 0);
                //AssemblyGridsCollect(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), GridsDT, ref NotCurvedAssemblyDT, 0);
                //AssemblyAppliqueCollect(Convert.ToInt32(DistFrameColorsDT.Rows[i]["ColorID"]), AppliqueDT, ref NotCurvedAssemblyDT, 0);
            }
            if (NotCurvedAssemblyDT.Rows.Count > 0)
            {
                RowIndex++;
                NotCurvedAssemblyToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                    ref sheet1, NotCurvedAssemblyDT, WorkAssignmentID, BatchName, ClientName, "Ровер", ref RowIndex);
                RowIndex++;
                RowIndex++;
                //NotCurvedAssemblyToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                //     ref sheet1, NotCurvedAssemblyDT, WorkAssignmentID, BatchName, ClientName, "Клей", ref RowIndex);
                //RowIndex++;
                //RowIndex++;
                //NotCurvedAssemblyToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                //     ref sheet1, NotCurvedAssemblyDT, WorkAssignmentID, BatchName, ClientName, "Пресс", ref RowIndex);
                //RowIndex++;
                //RowIndex++;
                NotCurvedAssemblyToExcelSingly(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                     ref sheet1, NotCurvedAssemblyDT, WorkAssignmentID, BatchName, ClientName, "Заказ", ref RowIndex);
            }
        }
        
        public void InsetToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT,
            int WorkAssignmentID, string BatchName, string ClientName, string PageName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;

            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                        continue;
                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }


                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Square")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(3);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
        }

        public void NotCurvedAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OperationName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Примечание");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Работник");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            if (NotCurvedAssemblyDT.Rows.Count > 0)
                CType = Convert.ToInt32(NotCurvedAssemblyDT.Rows[0]["ColorType"]);

            for (int x = 0; x < NotCurvedAssemblyDT.Rows.Count; x++)
            {
                if (NotCurvedAssemblyDT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(NotCurvedAssemblyDT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(NotCurvedAssemblyDT.Rows[x]["Count"]);
                }
                if (NotCurvedAssemblyDT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(NotCurvedAssemblyDT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(NotCurvedAssemblyDT.Rows[x]["Square"]);
                }

                for (int y = 0; y < NotCurvedAssemblyDT.Columns.Count; y++)
                {
                    if (NotCurvedAssemblyDT.Columns[y].ColumnName == "ColorType" || NotCurvedAssemblyDT.Columns[y].ColumnName == "Square")
                        continue;

                    Type t = NotCurvedAssemblyDT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(NotCurvedAssemblyDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(NotCurvedAssemblyDT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(NotCurvedAssemblyDT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= NotCurvedAssemblyDT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(NotCurvedAssemblyDT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < NotCurvedAssemblyDT.Columns.Count; y++)
                        {
                            if (NotCurvedAssemblyDT.Columns[y].ColumnName == "ColorType" || NotCurvedAssemblyDT.Columns[y].ColumnName == "Square")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(NotCurvedAssemblyDT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == NotCurvedAssemblyDT.Rows.Count - 1)
                {
                    RowIndex++;
                    for (int y = 0; y < NotCurvedAssemblyDT.Columns.Count; y++)
                    {
                        if (NotCurvedAssemblyDT.Columns[y].ColumnName == "ColorType" || NotCurvedAssemblyDT.Columns[y].ColumnName == "Square")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Итого:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(TotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(Convert.ToDouble(TotalSquare));
                    cell.CellStyle = TableHeaderDecCS;

                    RowIndex++;

                    for (int y = 0; y < NotCurvedAssemblyDT.Columns.Count; y++)
                    {
                        if (NotCurvedAssemblyDT.Columns[y].ColumnName == "ColorType" || NotCurvedAssemblyDT.Columns[y].ColumnName == "Square")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(6);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }

            CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            CalibriBold11CS.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS.SetFont(CalibriBold11F);

            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "задание начали:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "задание закончили:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "работало человек:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //RowIndex++;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "№ станка:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 0, RowIndex, 1));
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "№ операции:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            //cell.CellStyle = CalibriBold11CS;
            //sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 4));
        }

        public void CurvedAssembly1ToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string PageName, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Партия:");
            //cell.CellStyle = CalibriBold11CS;
            //cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, BatchName);
            //cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Фасад");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Тип наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int ColorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorID" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
            {
                ColorID = Convert.ToInt32(DT.Rows[0]["ColorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                        DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32" || t.Name == "Int64")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (ColorID != Convert.ToInt32(DT.Rows[x + 1]["ColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                                DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        ColorID = Convert.ToInt32(DT.Rows[x + 1]["ColorID"]);
                        TotalAmount = 0;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                                DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                            DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void CurvedAssembly2ToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Фасад");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Тип наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int ColorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorID" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
            {
                ColorID = Convert.ToInt32(DT.Rows[0]["ColorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                        DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (ColorID != Convert.ToInt32(DT.Rows[x + 1]["ColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                                DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        ColorID = Convert.ToInt32(DT.Rows[x + 1]["ColorID"]);
                        TotalAmount = 0;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                                DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "FrontID" || DT.Columns[y].ColumnName == "ColorID" ||
                            DT.Columns[y].ColumnName == "InsetTypeID" || DT.Columns[y].ColumnName == "InsetColorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        public void DeyingToExcelSingly(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName, string ClientName, string PageName)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet(PageName);
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            sheet1.SetColumnWidth(1, 20 * 256);
            sheet1.SetColumnWidth(2, 20 * 256);
            sheet1.SetColumnWidth(3, 6 * 256);
            sheet1.SetColumnWidth(4, 6 * 256);
            sheet1.SetColumnWidth(5, 6 * 256);
            HSSFCell cell = null;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
            cell.CellStyle = Calibri11CS;
            RowIndex++;
            RowIndex++;
            DataTable DT = new DataTable();
            DataColumn Col1 = new DataColumn("Col1", System.Type.GetType("System.String"));
            DataColumn Col2 = new DataColumn("Col2", System.Type.GetType("System.String"));
            DataColumn Col3 = new DataColumn("Col3", System.Type.GetType("System.String"));

            if (DeyingDT.Rows.Count > 0)
            {
                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingWomen1ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Шлифование торцев. и пласти х3 (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingWomen2ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Нанесение грунта на торцы и пласти х2 (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col3 = DT.Columns.Add("Col3", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                Col2.SetOrdinal(7);
                Col3.SetOrdinal(8);
                DT.Columns["Square"].SetOrdinal(9);
                DyeingMen1ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "нанесение эмали (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingWomen3ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Нанесение глянцевого лака (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                DT.Columns["Square"].SetOrdinal(7);
                DyeingMen2ToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Шлифовка и полировка (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                DT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                DT = DeyingDT.Copy();
                Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = DT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                Col2.SetOrdinal(7);
                DT.Columns["Square"].SetOrdinal(8);
                DyeingPackingToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, BatchName, ClientName, string.Empty,
                    "Упаковка. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", string.Empty, ref RowIndex);
                RowIndex++;

                //DT.Dispose();
                //Col1.Dispose();
                //Col2.Dispose();
                //Col3.Dispose();
                //DT = DeyingDT.Copy();
                //Col1 = DT.Columns.Add("Col1", System.Type.GetType("System.String"));
                //Col1.SetOrdinal(6);
                //DT.Columns["Square"].SetOrdinal(7);
                //DT.Columns["Notes"].SetOrdinal(8);
                //DyeingBoringToExcel(ref hssfworkbook,
                //        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, DT, WorkAssignmentID, ClientName, BatchName,
                //    "Сверление. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", ref RowIndex);
            }

            RowIndex++;
        }

        public void DeyingByMainOrderToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string Notes, ref int RowIndex)
        {
            DataTable TempDT = new DataTable();
            DataColumn Col1 = new DataColumn("Col1", System.Type.GetType("System.String"));
            DataColumn Col2 = new DataColumn("Col2", System.Type.GetType("System.String"));
            DataColumn Col3 = new DataColumn("Col3", System.Type.GetType("System.String"));

            if (DT.Rows.Count > 0)
            {
                TempDT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                TempDT = DT.Copy();
                Col1 = TempDT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col2 = TempDT.Columns.Add("Col2", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                Col2.SetOrdinal(7);
                TempDT.Columns["Square"].SetOrdinal(8);
                DyeingPackingToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, TempDT, WorkAssignmentID, BatchName, ClientName, OrderName,
                    "Упаковка. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", Notes, ref RowIndex);
                RowIndex++;

                TempDT.Dispose();
                Col1.Dispose();
                Col2.Dispose();
                Col3.Dispose();
                TempDT = DT.Copy();
                Col1 = TempDT.Columns.Add("Col1", System.Type.GetType("System.String"));
                Col1.SetOrdinal(6);
                TempDT.Columns["Square"].SetOrdinal(7);
                TempDT.Columns["Notes"].SetOrdinal(8);
                DyeingBoringToExcel(ref hssfworkbook,
                        Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, ref sheet1, TempDT, WorkAssignmentID, BatchName, ClientName, OrderName,
                    "Сверление. (" + Security.CurrentUserShortName + " от " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + ")", Notes, ref RowIndex);
            }

            RowIndex++;
        }

        public void DyeingMen1ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Гр.в.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Гр.н.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, "Патина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 9, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(9);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(9);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingMen2ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Лак");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingWomen1ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Зачистка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingWomen2ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Обезжиривание");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingWomen3ToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Протирка патины");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingPackingToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Пленка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Упаковка");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(8);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(8);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType" || DT.Columns[y].ColumnName == "Notes")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(8);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void DyeingBoringToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            ref HSSFSheet sheet1, DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes,
            ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            if (OrderName.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
                cell.CellStyle = CalibriBold11CS;
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, OrderName);
                cell.CellStyle = CalibriBold11CS;
            }
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет наполнителя");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Сверление");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorType" }).Rows.Count;
            }


            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorType"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorType")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorType"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorType"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorType")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorType")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(7);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        private void NotArchDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (NotArchDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(NotArchDecorOrdersDT, true);
            DataTable DT = NotArchDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Не арки ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = NotArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Не арки Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = NotArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void NotArchDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }
            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        private void ArchDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (ArchDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(ArchDecorOrdersDT, true);
            DataTable DT = ArchDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Арки ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = ArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Арки Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = ArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void ArchDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        private void GridsDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (GridsDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(GridsDecorOrdersDT, true);
            DataTable DT = GridsDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки1 ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = GridsDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки1 Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = GridsDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    AssemblyDecorCollect(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void GridsDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

    }

    public class TafelAssignments : IFirstProfilName, IColorName, IPatinaName
    {
        FileManager FM = new FileManager();

        DateTime CurrentDate;

        DataTable DecorAssemblyDT;
        DataTable AssemblyDT;
        DataTable RoughCutDT;

        public DataTable FrontsDataTable = null;
        public DataTable FrameColorsDataTable = null;
        public DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        DataTable DecorDT;
        DataTable DecorParametersDT;

        DataTable NotCurvedOrdersDT;
        DataTable NotArchDecorOrdersDT;
        DataTable ArchDecorOrdersDT;
        DataTable GridsDecorOrdersDT;

        public TafelAssignments()
        {

        }

        public void GetCurrentDate()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.UsersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    CurrentDate = Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        public void Initialize()
        {
            Create();
            Fill();
        }

        private void Create()
        {
            DecorDT = new DataTable();
            DecorParametersDT = new DataTable();

            NotCurvedOrdersDT = new DataTable();
            NotArchDecorOrdersDT = new DataTable();
            ArchDecorOrdersDT = new DataTable();
            GridsDecorOrdersDT = new DataTable();

            DecorAssemblyDT = new DataTable();
            DecorAssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Patina", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Length", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            DecorAssemblyDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            DecorAssemblyDT.Columns.Add(new DataColumn("DecorID", Type.GetType("System.Int32")));

            AssemblyDT = new DataTable();
            AssemblyDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("Height", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Width", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Int32")));
            AssemblyDT.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            AssemblyDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            AssemblyDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));

            RoughCutDT = new DataTable();
            RoughCutDT.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            RoughCutDT.Columns.Add(new DataColumn("FrameColor", Type.GetType("System.String")));
            RoughCutDT.Columns.Add(new DataColumn("Height1", Type.GetType("System.Int32")));
            RoughCutDT.Columns.Add(new DataColumn("Width1", Type.GetType("System.Int32")));
            RoughCutDT.Columns.Add(new DataColumn("Count1", Type.GetType("System.Int32")));
            RoughCutDT.Columns.Add(new DataColumn("Square1", Type.GetType("System.Decimal")));
            RoughCutDT.Columns.Add(new DataColumn("Height2", Type.GetType("System.Int32")));
            RoughCutDT.Columns.Add(new DataColumn("Width2", Type.GetType("System.Int32")));
            RoughCutDT.Columns.Add(new DataColumn("Count2", Type.GetType("System.Int32")));
            RoughCutDT.Columns.Add(new DataColumn("Square2", Type.GetType("System.Decimal")));
            RoughCutDT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));
            RoughCutDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int32")));
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable = new DataTable();
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = FrameColorsDataTable.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = FrameColorsDataTable.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            FrameColorsDataTable.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void Fill()
        {
            FrontsDataTable = new DataTable();
            PatinaDataTable = new DataTable();
            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            GetColorsDT();
            SelectCommand = @"SELECT * FROM Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            DecorDT = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT * FROM DecorParameters",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorParametersDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 FrontsOrdersID, MainOrderID, 
                FrontID, ColorID, PatinaID, InsetTypeID, InsetColorID, TechnoColorID, TechnoInsetTypeID, TechnoInsetColorID, 
                Height, Width, Count, FrontConfigID, Square, FactoryID, IsNonStandard, Notes FROM FrontsOrders",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(NotCurvedOrdersDT);
                NotCurvedOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT TOP 0 DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID, 
                Height, Length, Width, Count, Notes FROM DecorOrders",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(NotArchDecorOrdersDT);
                NotArchDecorOrdersDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
                ArchDecorOrdersDT = NotArchDecorOrdersDT.Clone();
                GridsDecorOrdersDT = NotArchDecorOrdersDT.Clone();
            }
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            return FrontName;
        }

        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
            if (Rows.Count() > 0)
                ColorName = Rows[0]["ColorName"].ToString();
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string PatinaName = string.Empty;
            DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
            if (Rows.Count() > 0)
                PatinaName = Rows[0]["PatinaName"].ToString();
            return PatinaName;
        }

        private string GetDecorName(int ID)
        {
            DataRow[] rows = DecorDT.Select("DecorID=" + ID);
            if (rows.Count() > 0)
                return rows[0]["Name"].ToString();
            else
                return string.Empty;
        }

        public bool HasParameter(int ProductID, String Parameter)
        {
            DataRow[] Rows = DecorParametersDT.Select("ProductID = " + ProductID);

            return Convert.ToBoolean(Rows[0][Parameter]);
        }

        private void GetNotCurvedFrontsOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID, Fronts Front)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, 
                FrontID, ColorID, PatinaID, InsetTypeID, InsetColorID, TechnoColorID, TechnoInsetTypeID, TechnoInsetColorID, 
                Height, Width, Count, FrontConfigID, Square, FactoryID, IsNonStandard, Notes FROM FrontsOrders
                WHERE Width<>-1 AND FrontID=" + Convert.ToInt32(Front) +
                " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT FrontsOrdersID, MainOrderID, 
                FrontID, ColorID, PatinaID, InsetTypeID, InsetColorID, TechnoColorID, TechnoInsetTypeID, TechnoInsetColorID, 
                Height, Width, Count, FrontConfigID, Square, FactoryID, IsNonStandard, Notes FROM FrontsOrders
                    WHERE Width<>-1 AND FrontID=" + Convert.ToInt32(Front) +
                    " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                if (item["Notes"] != DBNull.Value && item["Notes"].ToString().Length == 0)
                    item["Notes"] = DBNull.Value;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetNotArchDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID,  PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID NOT IN (31, 4, 18, 32, 10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID,  PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID NOT IN (31, 4, 18, 32, 10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetArchDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID, PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID IN (31, 4, 18, 32) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID,  PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID IN (31, 4, 18, 32) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void GetGridsDecorOrders(ref DataTable DestinationDT, int WorkAssignmentID, int FactoryID)
        {
            string SelectCommand = string.Empty;
            DataTable DT = new DataTable();

            SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID,  PatinaID,
                Height, Length, Width, Count, Notes FROM DecorOrders
                WHERE FactoryID=" + FactoryID + " AND ProductID IN (10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE ProfilWorkAssignmentID=" + WorkAssignmentID + "))";
            if (FactoryID == 2)
                SelectCommand = @"SELECT DecorOrderID, MainOrderID, ProductID, DecorID, DecorConfigID, ColorID,  PatinaID,
                    Height, Length, Width, Count, Notes FROM DecorOrders
                    WHERE FactoryID=" + FactoryID + " AND ProductID IN (10, 11, 12) AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch WHERE TPSWorkAssignmentID=" + WorkAssignmentID + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 0;
                DestinationDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DT.Clear();
                DA.Fill(DT);
            }
            foreach (DataRow item in DT.Rows)
            {
                DataRow NewRow = DestinationDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                NewRow["GroupType"] = 1;
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private DataTable DistMainOrdersTable(DataTable SourceDT, bool OrderASC)
        {
            int MainOrderID = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("MainOrderID", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            foreach (DataRow Row in SourceDT.Rows)
            {
                if (int.TryParse(Row["MainOrderID"].ToString(), out MainOrderID))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["MainOrderID"] = MainOrderID;
                    NewRow["GroupType"] = Convert.ToInt32(Row["GroupType"]);
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "MainOrderID ASC";
                else
                    DV.Sort = "MainOrderID DESC";
                DT = DV.ToTable(true, new string[] { "MainOrderID", "GroupType" });
            }
            return DT;
        }

        private void GroupAndSortDecor(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();

            using (DataView DV = new DataView(SourceDT))
            {
                DT1 = DV.ToTable(true, new string[] { "DecorID", "ColorID", "PatinaID", "Length", "Height", "Width", "Notes" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                int Count = 0;
                string filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                    " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                if (DT1.Rows[i]["Notes"] != DBNull.Value && DT1.Rows[i]["Notes"].ToString().Length > 0)
                {
                    filter = "DecorID=" + Convert.ToInt32(DT1.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                      " AND Length=" + Convert.ToInt32(DT1.Rows[i]["Length"]) + " AND Height=" + Convert.ToInt32(DT1.Rows[i]["Height"]) +
                      " AND Width=" + Convert.ToInt32(DT1.Rows[i]["Width"]) + " AND Notes='" + DT1.Rows[i]["Notes"] + "'";
                }
                DataRow[] rows = SourceDT.Select(filter);
                if (rows.Count() == 0)
                    continue;

                foreach (DataRow item in rows)
                    Count += Convert.ToInt32(item["Count"]);

                string Color = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                    Color += " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));

                DataRow NewRow = DestinationDT.NewRow();
                NewRow["DecorID"] = Convert.ToInt32(DT1.Rows[i]["DecorID"]);
                NewRow["Name"] = GetDecorName(Convert.ToInt32(DT1.Rows[i]["DecorID"]));
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "ColorID"))
                NewRow["Color"] = Color;
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Height"))
                    NewRow["Height"] = DT1.Rows[i]["Height"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Length"))
                    NewRow["Length"] = DT1.Rows[i]["Length"];
                //if (HasParameter(Convert.ToInt32(rows[0]["ProductID"]), "Width"))
                    NewRow["Width"] = DT1.Rows[i]["Width"];
                NewRow["Count"] = Count;
                NewRow["Notes"] = DT1.Rows[i]["Notes"];
                DestinationDT.Rows.Add(NewRow);
            }
            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, Color, Patina, Length, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }
        }

        private void GroupAndSortFrontsWithHands(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();

            using (DataView DV = new DataView(SourceDT, "Notes='укв-7'", "ColorID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                int FrontID = Convert.ToInt32(DT1.Rows[i]["FrontID"]);
                int ColorID = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                int PatinaID = Convert.ToInt32(DT1.Rows[i]["PatinaID"]);
                using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID + " AND FrontID=" + FrontID + " AND PatinaID=" + PatinaID,
                    "InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "InsetTypeID", "InsetColorID", "Height", "Width" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    decimal Square = 0;
                    int Count = 0;

                    DataRow[] rows = SourceDT.Select("ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                        " AND InsetTypeID=" + Convert.ToInt32(DT2.Rows[j]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(DT2.Rows[j]["InsetColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND Notes='укв-7'");
                    if (rows.Count() == 0)
                        continue;
                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                        Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                    }
                    Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow["Name"] = GetFrontName(Convert.ToInt32(DT1.Rows[i]["FrontID"]));
                    if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    NewRow["Height"] = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    NewRow["Width"] = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    NewRow["Count"] = Count;
                    NewRow["Square"] = Square;
                    NewRow["Notes"] = rows[0]["Notes"];
                    NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                    DestinationDT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, FrameColor, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }
        }

        private void GroupAndSortFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            int H = 0;
            int W = 0;
            string N = string.Empty;

            using (DataView DV = new DataView(SourceDT, string.Empty, "FrontID, ColorID, PatinaID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                H = 0;
                W = 0;
                N = string.Empty;
                int FrontID = Convert.ToInt32(DT1.Rows[i]["FrontID"]);
                int ColorID = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                int PatinaID = Convert.ToInt32(DT1.Rows[i]["PatinaID"]);
                using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID + " AND FrontID=" + FrontID + " AND PatinaID=" + PatinaID,
                    "Height, Width, Notes", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height", "Width", "Notes" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    if (Convert.ToInt32(DT2.Rows[j]["Height"]) == H && Convert.ToInt32(DT2.Rows[j]["Width"]) == W &&
                        DT2.Rows[j]["Notes"].ToString() == N)
                        continue;

                    H = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    W = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    N = DT2.Rows[j]["Notes"].ToString();

                    decimal Square = 0;
                    int Count = 0;
                    string filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                    if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                        filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) +
                        " AND Notes='" + DT2.Rows[j]["Notes"].ToString() + "'";

                    DataRow[] rows = SourceDT.Select(filter);
                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                        Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                    }
                    Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow["Name"] = GetFrontName(Convert.ToInt32(DT1.Rows[i]["FrontID"]));
                    if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    NewRow["Height"] = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    NewRow["Width"] = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    NewRow["Count"] = Count;
                    NewRow["Square"] = Square;
                    NewRow["Notes"] = DT2.Rows[j]["Notes"];
                    NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                    DestinationDT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, FrameColor, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }
        }

        private void GroupAndSortGlossFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            int H = 0;
            int W = 0;
            string N = string.Empty;
            //ШП Американо и т.д.
            using (DataView DV = new DataView(SourceDT, @"FrontID=3663 AND ColorID IN (3694,1881,3695,3696,3697,3698,1893,1890,1884,3699,1882,1885,3700,3701,1891,1886,3702,1889,3703,1894,1892,3704,3705)", string.Empty, DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                H = 0;
                W = 0;
                N = string.Empty;
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]),
                    "Height, Width, Notes", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height", "Width", "Notes" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    if (Convert.ToInt32(DT2.Rows[j]["Height"]) == H && Convert.ToInt32(DT2.Rows[j]["Width"]) == W &&
                        DT2.Rows[j]["Notes"].ToString() == N)
                        continue;

                    H = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    W = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    N = DT2.Rows[j]["Notes"].ToString();

                    decimal Square = 0;
                    int Count = 0;

                    string filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                    if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                        filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) +
                        " AND Notes='" + DT2.Rows[j]["Notes"].ToString() + "'";
                    DataRow[] rows = SourceDT.Select(filter);
                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                        Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                    }
                    Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow["Name"] = GetFrontName(3663);
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    NewRow["Height"] = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    NewRow["Width"] = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    NewRow["Count"] = Count;
                    NewRow["Square"] = Square;
                    NewRow["Notes"] = DT2.Rows[j]["Notes"];
                    NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                    DestinationDT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, FrameColor, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }
        }

        private void GroupAndSortNotGlossFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            int H = 0;
            int W = 0;
            string N = string.Empty;
            //ГЛЯНЕЦ
            using (DataView DV = new DataView(SourceDT, @"FrontID=3664 AND ColorID IN (1881,1893,1883,1884,1882,1885,1886,1889,1894)", string.Empty, DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "ColorID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                H = 0;
                W = 0;
                N = string.Empty;
                using (DataView DV = new DataView(SourceDT, "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]),
                    "Height, Width, Notes", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height", "Width", "Notes" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    if (Convert.ToInt32(DT2.Rows[j]["Height"]) == H && Convert.ToInt32(DT2.Rows[j]["Width"]) == W &&
                        DT2.Rows[j]["Notes"].ToString() == N)
                        continue;

                    H = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    W = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    N = DT2.Rows[j]["Notes"].ToString();

                    decimal Square = 0;
                    int Count = 0;

                    string filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                    if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                        filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) +
                        " AND Notes='" + DT2.Rows[j]["Notes"].ToString() + "'";
                    DataRow[] rows = SourceDT.Select(filter);
                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                        Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                    }
                    Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow["Name"] = GetFrontName(3664);
                    NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    NewRow["Height"] = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    NewRow["Width"] = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    NewRow["Count"] = Count;
                    NewRow["Square"] = Square;
                    NewRow["Notes"] = DT2.Rows[j]["Notes"];
                    NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                    DestinationDT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, FrameColor, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }
        }

        private void GroupAndSortColoredFronts(DataTable SourceDT, ref DataTable DestinationDT)
        {
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            int H = 0;
            int W = 0;
            string N = string.Empty;
            //ШП КР Дуб Венге
            using (DataView DV = new DataView(SourceDT, @"(ColorID = 1890 AND PatinaID = 6) OR (ColorID = 1890 AND PatinaID = 7)", string.Empty, DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                H = 0;
                W = 0;
                N = string.Empty;
                int FrontID = Convert.ToInt32(DT1.Rows[i]["FrontID"]);
                int ColorID = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                int PatinaID = Convert.ToInt32(DT1.Rows[i]["PatinaID"]);
                using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID + " AND FrontID=" + FrontID + " AND PatinaID=" + PatinaID,
                    "InsetTypeID, InsetColorID, Height, Width", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height", "Width", "Notes" });
                }
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    if (Convert.ToInt32(DT2.Rows[j]["Height"]) == H && Convert.ToInt32(DT2.Rows[j]["Width"]) == W &&
                        DT2.Rows[j]["Notes"].ToString() == N)
                        continue;

                    H = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    W = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    N = DT2.Rows[j]["Notes"].ToString();

                    decimal Square = 0;
                    int Count = 0;

                    string filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL)";
                    if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString().Length > 0)
                        filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) +
                        " AND Notes='" + DT2.Rows[j]["Notes"].ToString() + "'";
                    DataRow[] rows = SourceDT.Select(filter);
                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                        Square += Convert.ToDecimal(item["Height"]) * Convert.ToDecimal(item["Width"]) * Convert.ToDecimal(item["Count"]) / 1000000;
                    }
                    Square = Decimal.Round(Square, 3, MidpointRounding.AwayFromZero);

                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow["Name"] = GetFrontName(Convert.ToInt32(DT1.Rows[i]["FrontID"]));
                    if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    NewRow["Height"] = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    NewRow["Width"] = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    NewRow["Count"] = Count;
                    NewRow["Square"] = Square;
                    NewRow["Notes"] = DT2.Rows[j]["Notes"];
                    NewRow["ColorID"] = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                    DestinationDT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DestinationDT.Copy()))
            {
                DV.Sort = "Name, FrameColor, Height, Width";
                DestinationDT.Clear();
                DestinationDT = DV.ToTable();
            }
        }

        private void RoughCutCoolect(DataTable SourceDT, ref DataTable DestinationDT)
        {
            int Admission = 5;
            int HandsAdmission = 0;
            int Deduction = 0;
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            int H = 0;
            int W = 0;
            int TotalHeight = 0;
            int TotalCount = 1;
            int TotalWidth = 0;
            decimal Square1 = 0;
            string N = string.Empty;

            using (DataView DV = new DataView(SourceDT, string.Empty, "FrontID, ColorID, PatinaID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                H = 0;
                W = 0;
                N = string.Empty;
                int FrontID = Convert.ToInt32(DT1.Rows[i]["FrontID"]);
                int ColorID = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                int PatinaID = Convert.ToInt32(DT1.Rows[i]["PatinaID"]);

                using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID + " AND FrontID=" + FrontID + " AND PatinaID=" + PatinaID,
                    "Height, Width, Notes", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height", "Width", "Notes" });
                }
                bool FirstRow = true;
                Square1 = 0;
                Admission = (DT2.Rows.Count - 1) * 5;
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    int Count = 0;
                    HandsAdmission = 0;

                    string filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                           " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                           " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL OR Notes<>'УКВ-7')";
                    if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString() == "УКВ-7")
                    {
                        filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) +
                            " AND Notes='УКВ-7'";
                        Admission += 20;
                        HandsAdmission = -36;
                    }
                    DataRow[] rows = SourceDT.Select(filter);
                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }
                    Admission += 5 * (Count - 1);

                    if (Convert.ToInt32(DT2.Rows[j]["Width"]) * Count + Admission + 10 > 735)
                    {
                        if (Convert.ToInt32(DT2.Rows[j]["Height"]) * Count + Admission + 10 > 735)
                        {
                            TotalCount = Count;
                            TotalHeight = Convert.ToInt32(DT2.Rows[j]["Height"]) + HandsAdmission;
                            TotalWidth = Convert.ToInt32(DT2.Rows[j]["Width"]);
                        }
                        else
                        {
                            TotalWidth = Convert.ToInt32(DT2.Rows[j]["Width"]) + HandsAdmission;
                            TotalHeight += Convert.ToInt32(DT2.Rows[j]["Height"]) * Count;
                        }
                    }
                    else
                    {
                        TotalHeight = Convert.ToInt32(DT2.Rows[j]["Height"]) + HandsAdmission;
                        TotalWidth += Convert.ToInt32(DT2.Rows[j]["Width"]) * Count;
                    }
                }
                TotalWidth = TotalWidth + Admission;
                Square1 += Convert.ToDecimal(TotalHeight) * Convert.ToDecimal(TotalWidth) * TotalCount / 1000000;
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    if (Convert.ToInt32(DT2.Rows[j]["Height"]) == H && Convert.ToInt32(DT2.Rows[j]["Width"]) == W &&
                        DT2.Rows[j]["Notes"].ToString() == N)
                        continue;

                    H = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    W = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    N = DT2.Rows[j]["Notes"].ToString();

                    decimal Square2 = 0;
                    int Count = 0;

                    if (Convert.ToInt32(DT2.Rows[j]["Height"]) >= 40 && Convert.ToInt32(DT2.Rows[j]["Width"]) >= 40)
                        Deduction = 0;
                    else
                    {
                        if (ColorID == 1881 || ColorID == 1893 || ColorID == 1883 || ColorID == 1884 || ColorID == 1882 || ColorID == 1885 ||
                            ColorID == 1886 || ColorID == 1889 || ColorID == 1894 || (ColorID == 1890 && PatinaID == 6) || (ColorID == 1890 && PatinaID == 7))
                            Deduction = 2;

                        if (ColorID == 3694 || ColorID == 3695 || ColorID == 3696 || ColorID == 3697 || ColorID == 3698 || ColorID == 1890 ||
                            ColorID == 3699 || ColorID == 3700 || ColorID == 3701 || ColorID == 1891 || ColorID == 3702 || ColorID == 3703 ||
                            ColorID == 1892 || ColorID == 3704 || ColorID == 3705)
                            Deduction = 1;
                    }

                    string filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL OR Notes<>'УКВ-7')";
                    if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString() == "УКВ-7")
                    {
                        filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) +
                            " AND Notes='УКВ-7'";
                    }
                    DataRow[] rows = SourceDT.Select(filter);
                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                        Square2 += Convert.ToDecimal(item["Height"]) * (Convert.ToDecimal(item["Width"]) - Deduction) * Convert.ToDecimal(item["Count"]) / 1000000;
                    }
                    Square2 = Decimal.Round(Square2, 3, MidpointRounding.AwayFromZero);

                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow["Name"] = GetFrontName(Convert.ToInt32(DT1.Rows[i]["FrontID"]));
                    if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    if (FirstRow)
                    {
                        Square1 = Decimal.Round(Square1, 3, MidpointRounding.AwayFromZero);
                        NewRow["Height1"] = TotalWidth + 10;
                        NewRow["Width1"] = TotalHeight + 10;
                        NewRow["Count1"] = TotalCount;
                        NewRow["Square1"] = Square1;
                    }
                    NewRow["Height2"] = Convert.ToInt32(DT2.Rows[j]["Width"]) - Deduction;
                    NewRow["Width2"] = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    NewRow["Count2"] = Count;
                    NewRow["Square2"] = Square2;
                    NewRow["Notes"] = DT2.Rows[j]["Notes"];
                    NewRow["ColorID"] = ColorID;
                    DestinationDT.Rows.Add(NewRow);
                    FirstRow = false;
                }
            }
        }

        private void RoughCutCoolectByHeight(DataTable SourceDT, ref DataTable DestinationDT)
        {
            int Admission = 5;
            int HandsAdmission = 0;
            int Deduction = 0;
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            int H = 0;
            int W = 0;
            int TotalHeight = 0;
            int TotalCount2 = 0;
            int TotalCount1 = 1;
            int TotalWidth = 0;
            decimal Square1 = 0;
            string N = string.Empty;

            using (DataView DV = new DataView(SourceDT, string.Empty, "FrontID, ColorID, PatinaID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                H = 0;
                W = 0;
                N = string.Empty;
                int FrontID = Convert.ToInt32(DT1.Rows[i]["FrontID"]);
                int ColorID = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                int PatinaID = Convert.ToInt32(DT1.Rows[i]["PatinaID"]);

                using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID + " AND FrontID=" + FrontID + " AND PatinaID=" + PatinaID,
                    "Height, Width, Notes", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height", "Width", "Notes" });
                }
                bool FirstRow = true;
                Square1 = 0;
                Admission = 5;
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    int Count = 0;
                    HandsAdmission = 0;

                    string filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                           " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                           " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL OR Notes<>'УКВ-7')";
                    if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString() == "УКВ-7")
                    {
                        filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) +
                            " AND Notes='УКВ-7'";
                        Admission += 20;
                        HandsAdmission = -36;
                    }
                    DataRow[] rows = SourceDT.Select(filter);
                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    TotalWidth += Convert.ToInt32(DT2.Rows[j]["Width"]) * Count;
                    TotalHeight = Convert.ToInt32(DT2.Rows[j]["Height"]) + HandsAdmission;
                    TotalCount2 += Count;
                }
                if (TotalWidth + (TotalCount2 - 1) * Admission + 10 > 735)
                    TotalCount1 = TotalCount2;
                TotalWidth = TotalWidth + (TotalCount2 - 1) * Admission;
                Square1 += Convert.ToDecimal(TotalHeight) * Convert.ToDecimal(TotalWidth) * TotalCount1 / 1000000;
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    if (Convert.ToInt32(DT2.Rows[j]["Height"]) == H && Convert.ToInt32(DT2.Rows[j]["Width"]) == W &&
                        DT2.Rows[j]["Notes"].ToString() == N)
                        continue;

                    H = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    W = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    N = DT2.Rows[j]["Notes"].ToString();

                    decimal Square2 = 0;
                    int Count = 0;

                    if (Convert.ToInt32(DT2.Rows[j]["Height"]) >= 40 && Convert.ToInt32(DT2.Rows[j]["Width"]) >= 40)
                        Deduction = 0;
                    else
                    {
                        if (ColorID == 1881 || ColorID == 1893 || ColorID == 1883 || ColorID == 1884 || ColorID == 1882 || ColorID == 1885 ||
                            ColorID == 1886 || ColorID == 1889 || ColorID == 1894 || (ColorID == 1890 && PatinaID == 6) || (ColorID == 1890 && PatinaID == 7))
                            Deduction = 2;

                        if (ColorID == 3694 || ColorID == 3695 || ColorID == 3696 || ColorID == 3697 || ColorID == 3698 || ColorID == 1890 ||
                            ColorID == 3699 || ColorID == 3700 || ColorID == 3701 || ColorID == 1891 || ColorID == 3702 || ColorID == 3703 ||
                            ColorID == 1892 || ColorID == 3704 || ColorID == 3705)
                            Deduction = 1;
                    }

                    string filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL OR Notes<>'УКВ-7')";
                    if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString() == "УКВ-7")
                    {
                        filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) +
                            " AND Notes='УКВ-7'";
                    }
                    DataRow[] rows = SourceDT.Select(filter);
                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                        Square2 += Convert.ToDecimal(item["Height"]) * (Convert.ToDecimal(item["Width"]) - Deduction) * Convert.ToDecimal(item["Count"]) / 1000000;
                    }
                    Square2 = Decimal.Round(Square2, 3, MidpointRounding.AwayFromZero);

                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow["Name"] = GetFrontName(Convert.ToInt32(DT1.Rows[i]["FrontID"]));
                    if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    if (FirstRow)
                    {
                        Square1 = Decimal.Round(Square1, 3, MidpointRounding.AwayFromZero);
                        NewRow["Height1"] = TotalWidth + 10;
                        NewRow["Width1"] = TotalHeight + 10;
                        NewRow["Count1"] = TotalCount1;
                        NewRow["Square1"] = Square1;
                    }
                    NewRow["Height2"] = Convert.ToInt32(DT2.Rows[j]["Width"]) - Deduction;
                    NewRow["Width2"] = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    NewRow["Count2"] = Count;
                    NewRow["Square2"] = Square2;
                    NewRow["Notes"] = DT2.Rows[j]["Notes"];
                    NewRow["ColorID"] = ColorID;
                    DestinationDT.Rows.Add(NewRow);
                    FirstRow = false;
                }
            }
        }

        private void RoughCutCoolectByWidth(DataTable SourceDT, ref DataTable DestinationDT)
        {
            int Admission = 5;
            int HandsAdmission = 0;
            int Deduction = 0;
            DataTable DT1 = new DataTable();
            DataTable DT2 = new DataTable();
            int H = 0;
            int W = 0;
            int TotalHeight = 0;
            int TotalCount2 = 0;
            int TotalCount1 = 1;
            int TotalWidth = 0;
            decimal Square1 = 0;
            string N = string.Empty;

            using (DataView DV = new DataView(SourceDT, string.Empty, "FrontID, ColorID, PatinaID", DataViewRowState.CurrentRows))
            {
                DT1 = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID" });
            }
            for (int i = 0; i < DT1.Rows.Count; i++)
            {
                H = 0;
                W = 0;
                N = string.Empty;
                int FrontID = Convert.ToInt32(DT1.Rows[i]["FrontID"]);
                int ColorID = Convert.ToInt32(DT1.Rows[i]["ColorID"]);
                int PatinaID = Convert.ToInt32(DT1.Rows[i]["PatinaID"]);

                using (DataView DV = new DataView(SourceDT, "ColorID=" + ColorID + " AND FrontID=" + FrontID + " AND PatinaID=" + PatinaID,
                    "Height, Width, Notes", DataViewRowState.CurrentRows))
                {
                    DT2 = DV.ToTable(true, new string[] { "Height", "Width", "Notes" });
                }
                bool FirstRow = true;
                Square1 = 0;
                Admission = 5;
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    int Count = 0;
                    HandsAdmission = 0;

                    string filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                           " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                           " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL OR Notes<>'УКВ-7')";
                    if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString() == "УКВ-7")
                    {
                        filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) +
                            " AND Notes='УКВ-7'";
                        Admission += 20;
                        HandsAdmission = -36;
                    }
                    DataRow[] rows = SourceDT.Select(filter);
                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                    }

                    TotalHeight += Convert.ToInt32(DT2.Rows[j]["Height"]) * Count;
                    TotalWidth = Convert.ToInt32(DT2.Rows[j]["Width"]) + HandsAdmission;
                    TotalCount2 += Count;
                }
                if (TotalHeight + (TotalCount2 - 1) * Admission + 10 > 735)
                    TotalCount1 = TotalCount2;
                TotalHeight = TotalHeight + (TotalCount2 - 1) * Admission;
                Square1 += Convert.ToDecimal(TotalHeight) * Convert.ToDecimal(TotalWidth) * TotalCount1 / 1000000;
                for (int j = 0; j < DT2.Rows.Count; j++)
                {
                    if (Convert.ToInt32(DT2.Rows[j]["Height"]) == H && Convert.ToInt32(DT2.Rows[j]["Width"]) == W &&
                        DT2.Rows[j]["Notes"].ToString() == N)
                        continue;

                    H = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    W = Convert.ToInt32(DT2.Rows[j]["Width"]);
                    N = DT2.Rows[j]["Notes"].ToString();

                    decimal Square2 = 0;
                    int Count = 0;

                    if (Convert.ToInt32(DT2.Rows[j]["Height"]) >= 40 && Convert.ToInt32(DT2.Rows[j]["Width"]) >= 40)
                        Deduction = 0;
                    else
                    {
                        if (ColorID == 1881 || ColorID == 1893 || ColorID == 1883 || ColorID == 1884 || ColorID == 1882 || ColorID == 1885 ||
                            ColorID == 1886 || ColorID == 1889 || ColorID == 1894 || (ColorID == 1890 && PatinaID == 6) || (ColorID == 1890 && PatinaID == 7))
                            Deduction = 2;

                        if (ColorID == 3694 || ColorID == 3695 || ColorID == 3696 || ColorID == 3697 || ColorID == 3698 || ColorID == 1890 ||
                            ColorID == 3699 || ColorID == 3700 || ColorID == 3701 || ColorID == 1891 || ColorID == 3702 || ColorID == 3703 ||
                            ColorID == 1892 || ColorID == 3704 || ColorID == 3705)
                            Deduction = 1;
                    }

                    string filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                        " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) + " AND (Notes='' OR Notes IS NULL OR Notes<>'УКВ-7')";
                    if (DT2.Rows[j]["Notes"] != DBNull.Value && DT2.Rows[j]["Notes"].ToString() == "УКВ-7")
                    {
                        filter = "ColorID=" + Convert.ToInt32(DT1.Rows[i]["ColorID"]) + " AND FrontID=" + Convert.ToInt32(DT1.Rows[i]["FrontID"]) + " AND PatinaID=" + Convert.ToInt32(DT1.Rows[i]["PatinaID"]) +
                            " AND Height=" + Convert.ToInt32(DT2.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(DT2.Rows[j]["Width"]) +
                            " AND Notes='УКВ-7'";
                    }
                    DataRow[] rows = SourceDT.Select(filter);
                    foreach (DataRow item in rows)
                    {
                        Count += Convert.ToInt32(item["Count"]);
                        Square2 += Convert.ToDecimal(item["Height"]) * (Convert.ToDecimal(item["Width"]) - Deduction) * Convert.ToDecimal(item["Count"]) / 1000000;
                    }
                    Square2 = Decimal.Round(Square2, 3, MidpointRounding.AwayFromZero);

                    DataRow NewRow = DestinationDT.NewRow();
                    NewRow["Name"] = GetFrontName(Convert.ToInt32(DT1.Rows[i]["FrontID"]));
                    if (Convert.ToInt32(DT1.Rows[i]["PatinaID"]) != -1)
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"])) + " " + GetPatinaName(Convert.ToInt32(DT1.Rows[i]["PatinaID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(DT1.Rows[i]["ColorID"]));
                    if (FirstRow)
                    {
                        Square1 = Decimal.Round(Square1, 3, MidpointRounding.AwayFromZero);
                        NewRow["Height1"] = TotalWidth + 10;
                        NewRow["Width1"] = TotalHeight + 10;
                        NewRow["Count1"] = TotalCount1;
                        NewRow["Square1"] = Square1;
                    }
                    NewRow["Height2"] = Convert.ToInt32(DT2.Rows[j]["Width"]) - Deduction;
                    NewRow["Width2"] = Convert.ToInt32(DT2.Rows[j]["Height"]);
                    NewRow["Count2"] = Count;
                    NewRow["Square2"] = Square2;
                    NewRow["Notes"] = DT2.Rows[j]["Notes"];
                    NewRow["ColorID"] = ColorID;
                    DestinationDT.Rows.Add(NewRow);
                    FirstRow = false;
                }
            }
        }

        private void CalibrationPlate(DataTable SourceDT, ref DataTable DestinationDT)
        {
            for (int i = 0; i < SourceDT.Rows.Count; i++)
            {
                if (SourceDT.Rows[i]["Height1"] == DBNull.Value)
                    continue;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow["Name"] = SourceDT.Rows[i]["Name"];
                NewRow["FrameColor"] = SourceDT.Rows[i]["FrameColor"];
                NewRow["Height"] = SourceDT.Rows[i]["Height1"];
                NewRow["Width"] = SourceDT.Rows[i]["Width1"];
                NewRow["Count"] = SourceDT.Rows[i]["Count1"];
                NewRow["Square"] = SourceDT.Rows[i]["Square1"];
                NewRow["Notes"] = SourceDT.Rows[i]["Notes"];
                NewRow["ColorID"] = SourceDT.Rows[i]["ColorID"];
                DestinationDT.Rows.Add(NewRow);
            }
        }

        private void SetOfCovers(DataTable SourceDT, ref DataTable DestinationDT)
        {
            for (int i = 0; i < SourceDT.Rows.Count; i++)
            {
                if (SourceDT.Rows[i]["Height1"] == DBNull.Value)
                    continue;
                DataRow NewRow = DestinationDT.NewRow();
                NewRow["Name"] = SourceDT.Rows[i]["Name"];
                NewRow["FrameColor"] = SourceDT.Rows[i]["FrameColor"];
                NewRow["Height"] = Convert.ToInt32(SourceDT.Rows[i]["Height1"]) + 10;
                NewRow["Width"] = Convert.ToInt32(SourceDT.Rows[i]["Width1"]) + 10;
                NewRow["Count"] = Convert.ToInt32(SourceDT.Rows[i]["Count1"]) * 2;
                NewRow["Square"] = Decimal.Round(Convert.ToDecimal(SourceDT.Rows[i]["Square1"]) * 2, 3, MidpointRounding.AwayFromZero);
                NewRow["Notes"] = SourceDT.Rows[i]["Notes"];
                NewRow["ColorID"] = SourceDT.Rows[i]["ColorID"];
                DestinationDT.Rows.Add(NewRow);
            }
        }

        public void ClearOrders()
        {
            NotCurvedOrdersDT.Clear();
            NotArchDecorOrdersDT.Clear();
            ArchDecorOrdersDT.Clear();
            GridsDecorOrdersDT.Clear();
        }

        public bool GetOrders(DataTable EditFrontOrdersDT, int WorkAssignmentID, int FactoryID)
        {
            NotCurvedOrdersDT = EditFrontOrdersDT.Copy();
            //GetNotCurvedFrontsOrders(ref NotCurvedOrdersDT, WorkAssignmentID, FactoryID, Fronts.Tafel3);
            //GetNotCurvedFrontsOrders(ref NotCurvedOrdersDT, WorkAssignmentID, FactoryID, Fronts.Tafel2);
            //GetNotCurvedFrontsOrders(ref NotCurvedOrdersDT, WorkAssignmentID, FactoryID, Fronts.Tafel3Gl);
            GetNotArchDecorOrders(ref NotArchDecorOrdersDT, WorkAssignmentID, FactoryID);
            GetArchDecorOrders(ref ArchDecorOrdersDT, WorkAssignmentID, FactoryID);
            GetGridsDecorOrders(ref GridsDecorOrdersDT, WorkAssignmentID, FactoryID);

            if (NotCurvedOrdersDT.Rows.Count == 0 && NotArchDecorOrdersDT.Rows.Count == 0 && ArchDecorOrdersDT.Rows.Count == 0 && GridsDecorOrdersDT.Rows.Count == 0)
                return false;
            else
                return true;
        }

        public void CreateExcel(int WorkAssignmentID, string ClientName, string BatchName, ref string sSourceFileName)
        {
            GetCurrentDate();
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont Calibri11F = hssfworkbook.CreateFont();
            Calibri11F.FontHeightInPoints = 11;
            Calibri11F.FontName = "Calibri";

            HSSFFont CalibriBold11F = hssfworkbook.CreateFont();
            CalibriBold11F.FontHeightInPoints = 11;
            CalibriBold11F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            CalibriBold11F.FontName = "Calibri";

            HSSFFont Serif8F = hssfworkbook.CreateFont();
            Serif8F.FontHeightInPoints = 8;
            Serif8F.FontName = "MS Sans Serif";

            HSSFFont Serif10F = hssfworkbook.CreateFont();
            Serif10F.FontHeightInPoints = 10;
            Serif10F.FontName = "MS Sans Serif";

            HSSFFont SerifBold10F = hssfworkbook.CreateFont();
            SerifBold10F.FontHeightInPoints = 10;
            SerifBold10F.FontName = "MS Sans Serif";
            SerifBold10F.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;

            HSSFCellStyle Calibri11CS = hssfworkbook.CreateCellStyle();
            Calibri11CS.SetFont(Calibri11F);

            HSSFCellStyle CalibriBold11CS = hssfworkbook.CreateCellStyle();
            CalibriBold11CS.SetFont(CalibriBold11F);

            HSSFCellStyle TableHeaderCS = hssfworkbook.CreateCellStyle();
            TableHeaderCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderCS.SetFont(Serif8F);

            HSSFCellStyle TableHeaderDecCS = hssfworkbook.CreateCellStyle();
            TableHeaderDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderDecCS.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderDecCS.SetFont(Serif8F);

            HSSFCellStyle WorkerColumnCS = hssfworkbook.CreateCellStyle();
            WorkerColumnCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            WorkerColumnCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.BottomBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.LeftBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.RightBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WorkerColumnCS.TopBorderColor = HSSFColor.BLACK.index;
            WorkerColumnCS.SetFont(Serif10F);

            HSSFCellStyle TableContentCS = hssfworkbook.CreateCellStyle();
            TableContentCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableContentCS.BottomBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableContentCS.LeftBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableContentCS.RightBorderColor = HSSFColor.BLACK.index;
            TableContentCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableContentCS.TopBorderColor = HSSFColor.BLACK.index;
            TableContentCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountCS = hssfworkbook.CreateCellStyle();
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            HSSFCellStyle TotamAmountDecCS = hssfworkbook.CreateCellStyle();
            TotamAmountDecCS.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            TotamAmountCS.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            TotamAmountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.LeftBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.RightBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            TotamAmountCS.TopBorderColor = HSSFColor.BLACK.index;
            TotamAmountCS.SetFont(SerifBold10F);

            #endregion

            NotArchDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            ArchDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            GridsDecorAssemblyByMainOrderToExcel(ref hssfworkbook, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            AssemblyByMainOrderToExcel(ref hssfworkbook,
                Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, WorkAssignmentID, BatchName);

            //string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");

            //string tempFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
            string FileName = "№" + WorkAssignmentID + " " + BatchName;
            //string tempFolder = @"\\192.168.1.6\Public\ТПС\Infinium\Задания\";
            string tempFolder = @"\\192.168.1.6\Public\USERS_2016\_ДЕЙСТВУЮЩИЕ\ПРОИЗВОДСТВО\ТПС\инфиниум\";
            string CurrentMonthName = DateTime.Now.ToString("MMMM");
            tempFolder = Path.Combine(tempFolder, CurrentMonthName);
            if (!(Directory.Exists(tempFolder)))
            {
                Directory.CreateDirectory(tempFolder);
            }
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);

            //string sSourceFolder = System.Environment.GetEnvironmentVariable("TEMP");
            //string sFolderPath = "Общие файлы/Производство/Задания в работу";
            //string sDestFolder = Configs.DocumentsPath + sFolderPath;
            //sSourceFileName = GetFileName(sDestFolder, BatchName);

            //FileInfo file = new FileInfo(sSourceFolder + @"\" + sSourceFileName);
            //FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            //hssfworkbook.Write(NewFile);
            //NewFile.Close();
        }

        private string GetFileName(string sDestFolder, string ExcelName)
        {
            string sExtension = ".xls";
            string sFileName = ExcelName;

            int j = 1;
            while (FM.FileExist(sDestFolder + "/" + sFileName + sExtension, Configs.FTPType))
            {
                sFileName = ExcelName + "(" + j++ + ")";
            }
            sFileName = sFileName + sExtension;
            return sFileName;
        }

        private DataTable DistGroupNumbersTable(DataRow[] Rows, bool OrderASC)
        {
            int GroupNumber = 0;
            DataTable DT = new DataTable();
            DT.Columns.Add(new DataColumn("GroupNumber", Type.GetType("System.Int32")));
            foreach (DataRow Row in Rows)
            {
                if (int.TryParse(Row["GroupNumber"].ToString(), out GroupNumber))
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow["GroupNumber"] = GroupNumber;
                    DT.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(DT.Copy()))
            {
                DT.Clear();
                if (OrderASC)
                    DV.Sort = "GroupNumber ASC";
                else
                    DV.Sort = "GroupNumber DESC";
                DT = DV.ToTable(true, new string[] { "GroupNumber" });
            }
            return DT;
        }

        private void AssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            DataTable DistMainOrdersDT = DistMainOrdersTable(NotCurvedOrdersDT, true);
            DataTable DT = NotCurvedOrdersDT.Clone();
            DataTable DT1 = NotCurvedOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }
            }

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                for (int i = 0; i < DistMainOrdersDT.Rows.Count; i++)
                {
                    if (Convert.ToInt32(DistMainOrdersDT.Rows[i]["GroupType"]) == 1)
                        continue;
                    int MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }

                    string Notes = string.Empty;

                    RoughCutDT.Clear();
                    DT.Clear();
                    DataTable DistGroupNumbersDT = DistGroupNumbersTable(NotCurvedOrdersDT.Select("MainOrderID=" + MainOrderID), true);
                    for (int j = 0; j < DistGroupNumbersDT.Rows.Count; j++)
                    {
                        bool CollectByHeight = false;
                        int GroupNumber = Convert.ToInt32(DistGroupNumbersDT.Rows[j]["GroupNumber"]);
                        DataRow[] rows = NotCurvedOrdersDT.Select("MainOrderID=" + MainOrderID + " AND GroupNumber=" + GroupNumber);
                        if (rows.Count() == 0)
                            continue;
                        int Height = Convert.ToInt32(rows[0]["Height"]);
                        int Width = Convert.ToInt32(rows[0]["Width"]);
                        DT1.Clear();
                        foreach (DataRow item in rows)
                        {
                            if (Height == Convert.ToInt32(item["Height"]))
                                CollectByHeight = true;
                            else
                                CollectByHeight = false;
                            if (Height == Convert.ToInt32(item["Height"]) && Width == Convert.ToInt32(item["Width"]))
                            {
                                if (Height > Width)
                                    CollectByHeight = true;
                                else
                                    CollectByHeight = false;
                            }
                            DT1.Rows.Add(item.ItemArray);
                            DT.Rows.Add(item.ItemArray);
                        }
                        if (rows.Count() == 1)
                        {
                            RoughCutCoolect(DT1, ref RoughCutDT);
                        }
                        else
                        {
                            if (CollectByHeight)
                                RoughCutCoolectByHeight(DT1, ref RoughCutDT);
                            else
                                RoughCutCoolectByWidth(DT1, ref RoughCutDT);
                        }
                    }
                    if (DT.Rows.Count == 0)
                        continue;

                    int RowIndex = 0;

                    HSSFSheet sheet1 = hssfworkbook.CreateSheet(OrderName.Replace("/", "-"));
                    sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                    sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                    sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                    sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                    sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                    sheet1.SetColumnWidth(0, 16 * 256);
                    sheet1.SetColumnWidth(1, 18 * 256);
                    sheet1.SetColumnWidth(2, 6 * 256);
                    sheet1.SetColumnWidth(3, 6 * 256);
                    sheet1.SetColumnWidth(4, 6 * 256);
                    sheet1.SetColumnWidth(5, 7 * 256);
                    sheet1.SetColumnWidth(6, 6 * 256);
                    sheet1.SetColumnWidth(7, 6 * 256);
                    sheet1.SetColumnWidth(8, 6 * 256);
                    sheet1.SetColumnWidth(9, 7 * 256);

                    HSSFCell cell = null;
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                    cell.CellStyle = Calibri11CS;
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
                    cell.CellStyle = Calibri11CS;
                    RowIndex++;
                    RowIndex++;

                    if (RoughCutDT.Rows.Count > 0)
                    {
                        RoughCutToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            RoughCutDT, WorkAssignmentID, BatchName, ClientName, OrderName, "ДСТП-18", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    SetOfCovers(RoughCutDT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Рубашки", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    CalibrationPlate(RoughCutDT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Калибровка", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    GroupAndSortFronts(DT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Оклейка", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    GroupAndSortGlossFronts(DT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Отделка кромок", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    GroupAndSortNotGlossFronts(DT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Отделка кромок", string.Empty, ref RowIndex);
                        RowIndex++;

                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Лак глянец, шлифовка и полировка глянца", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    GroupAndSortColoredFronts(DT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Бейц, Лак", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    GroupAndSortFronts(DT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Сверление и упаковка", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    GroupAndSortFrontsWithHands(DT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Тафель с ручкой УКВ-7", string.Empty, ref RowIndex);
                        RowIndex++;
                    }
                }
            }

            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                for (int i = 0; i < DistMainOrdersDT.Rows.Count; i++)
                {
                    if (Convert.ToInt32(DistMainOrdersDT.Rows[i]["GroupType"]) == 0)
                        continue;
                    int MainOrderID = Convert.ToInt32(DistMainOrdersDT.Rows[i]["MainOrderID"]);
                    string Notes = string.Empty;

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }

                    RoughCutDT.Clear();
                    DT.Clear();
                    DataTable DistGroupNumbersDT = DistGroupNumbersTable(NotCurvedOrdersDT.Select("MainOrderID=" + MainOrderID), true);
                    for (int j = 0; j < DistGroupNumbersDT.Rows.Count; j++)
                    {
                        bool CollectByHeight = false;
                        int GroupNumber = Convert.ToInt32(DistGroupNumbersDT.Rows[j]["GroupNumber"]);
                        DataRow[] rows = NotCurvedOrdersDT.Select("MainOrderID=" + MainOrderID + " AND GroupNumber=" + GroupNumber);
                        if (rows.Count() == 0)
                            continue;
                        int Height = Convert.ToInt32(rows[0]["Height"]);
                        int Width = Convert.ToInt32(rows[0]["Width"]);
                        DT1.Clear();
                        foreach (DataRow item in rows)
                        {
                            if (Height == Convert.ToInt32(item["Height"]))
                                CollectByHeight = true;
                            else
                                CollectByHeight = false;
                            if (Height == Convert.ToInt32(item["Height"]) && Width == Convert.ToInt32(item["Width"]))
                            {
                                if (Height > Width)
                                    CollectByHeight = true;
                                else
                                    CollectByHeight = false;
                            }
                            DT1.Rows.Add(item.ItemArray);
                            DT.Rows.Add(item.ItemArray);
                        }
                        if (rows.Count() == 1)
                        {
                            RoughCutCoolect(DT1, ref RoughCutDT);
                        }
                        else
                        {
                            if (CollectByHeight)
                                RoughCutCoolectByHeight(DT1, ref RoughCutDT);
                            else
                                RoughCutCoolectByWidth(DT1, ref RoughCutDT);
                        }
                    }

                    if (DT.Rows.Count == 0)
                        continue;

                    int RowIndex = 0;

                    HSSFSheet sheet1 = hssfworkbook.CreateSheet(OrderName.Replace("/", "-"));
                    sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                    sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                    sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                    sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                    sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                    sheet1.SetColumnWidth(0, 16 * 256);
                    sheet1.SetColumnWidth(1, 18 * 256);
                    sheet1.SetColumnWidth(2, 6 * 256);
                    sheet1.SetColumnWidth(3, 6 * 256);
                    sheet1.SetColumnWidth(4, 6 * 256);
                    sheet1.SetColumnWidth(5, 7 * 256);
                    sheet1.SetColumnWidth(6, 6 * 256);
                    sheet1.SetColumnWidth(7, 6 * 256);
                    sheet1.SetColumnWidth(8, 6 * 256);
                    sheet1.SetColumnWidth(9, 7 * 256);

                    HSSFCell cell = null;
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Распечатал: Дата/время " + CurrentDate.ToString("dd.MM.yyyy HH:mm") + " \r\n ФИО: " + Security.CurrentUserShortName);
                    cell.CellStyle = Calibri11CS;
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Плановое время выполнения:");
                    cell.CellStyle = Calibri11CS;
                    RowIndex++;
                    RowIndex++;

                    if (RoughCutDT.Rows.Count > 0)
                    {
                        RoughCutToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            RoughCutDT, WorkAssignmentID, BatchName, ClientName, OrderName, "ДСТП-18", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    SetOfCovers(RoughCutDT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Рубашки", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    CalibrationPlate(RoughCutDT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Калибровка", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    GroupAndSortFronts(DT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Оклейка", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    GroupAndSortGlossFronts(DT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Отделка кромок", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    GroupAndSortNotGlossFronts(DT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Отделка кромок", string.Empty, ref RowIndex);
                        RowIndex++;

                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Лак глянец, шлифовка и полировка глянца", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    GroupAndSortColoredFronts(DT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Бейц, Лак", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    GroupAndSortFronts(DT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Сверление и упаковка", string.Empty, ref RowIndex);
                        RowIndex++;
                    }

                    AssemblyDT.Clear();
                    GroupAndSortFrontsWithHands(DT, ref AssemblyDT);

                    if (AssemblyDT.Rows.Count > 0)
                    {
                        AssemblyToExcel(ref hssfworkbook, ref sheet1, Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS,
                            AssemblyDT, WorkAssignmentID, BatchName, ClientName, OrderName, "Тафель с ручкой УКВ-7", string.Empty, ref RowIndex);
                        RowIndex++;
                    }
                }
            }
        }

        public void RoughCutToExcel(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;

            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(++RowIndex), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            HSSFCellStyle CalibriBold11CS1 = hssfworkbook.CreateCellStyle();
            CalibriBold11CS1.Alignment = HSSFCellStyle.ALIGN_CENTER;
            CalibriBold11CS1.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CalibriBold11CS1.BottomBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS1.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CalibriBold11CS1.LeftBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS1.BorderRight = HSSFCellStyle.BORDER_THIN;
            CalibriBold11CS1.RightBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS1.BorderTop = HSSFCellStyle.BORDER_THIN;
            CalibriBold11CS1.TopBorderColor = HSSFColor.BLACK.index;
            CalibriBold11CS1.SetFont(CalibriBold11F);

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "черновой распил");
            cell.CellStyle = CalibriBold11CS1;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, string.Empty);
            cell.CellStyle = CalibriBold11CS1;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            cell.CellStyle = CalibriBold11CS1;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, string.Empty);
            cell.CellStyle = CalibriBold11CS1;
            sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 2, RowIndex, 5));

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "чистовой размер");
            cell.CellStyle = CalibriBold11CS1;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, string.Empty);
            cell.CellStyle = CalibriBold11CS1;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, string.Empty);
            cell.CellStyle = CalibriBold11CS1;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 9, string.Empty);
            cell.CellStyle = CalibriBold11CS1;
            sheet1.AddMergedRegion(new NPOI.HSSF.Util.Region(RowIndex, 6, RowIndex, 9));

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 9, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 10, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount1 = 0;
            int TotalAmount1 = 0;
            decimal AllTotalSquare1 = 0;
            decimal TotalSquare1 = 0;

            int AllTotalAmount2 = 0;
            int TotalAmount2 = 0;
            decimal AllTotalSquare2 = 0;
            decimal TotalSquare2 = 0;

            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorID"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count1"] != DBNull.Value)
                {
                    AllTotalAmount1 += Convert.ToInt32(DT.Rows[x]["Count1"]);
                    TotalAmount1 += Convert.ToInt32(DT.Rows[x]["Count1"]);
                }
                if (DT.Rows[x]["Square1"] != DBNull.Value)
                {
                    AllTotalSquare1 += Convert.ToDecimal(DT.Rows[x]["Square1"]);
                    TotalSquare1 += Convert.ToDecimal(DT.Rows[x]["Square1"]);
                }
                if (DT.Rows[x]["Count2"] != DBNull.Value)
                {
                    AllTotalAmount2 += Convert.ToInt32(DT.Rows[x]["Count2"]);
                    TotalAmount2 += Convert.ToInt32(DT.Rows[x]["Count2"]);
                }
                if (DT.Rows[x]["Square2"] != DBNull.Value)
                {
                    AllTotalSquare2 += Convert.ToDecimal(DT.Rows[x]["Square2"]);
                    TotalSquare2 += Convert.ToDecimal(DT.Rows[x]["Square2"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorID")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount1);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare1));
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(8);
                        cell.SetCellValue(TotalAmount2);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(9);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare2));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorID"]);
                        TotalAmount1 = 0;
                        TotalSquare1 = 0;
                        TotalAmount2 = 0;
                        TotalSquare2 = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorID")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount1);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare1));
                        cell.CellStyle = TableHeaderDecCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(8);
                        cell.SetCellValue(TotalAmount2);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(9);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare2));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorID")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount1);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare1));
                    cell.CellStyle = TableHeaderDecCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(8);
                    cell.SetCellValue(AllTotalAmount2);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(9);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare2));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        public void AssemblyToExcel(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OrderName, string PageName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "УТВЕРЖДАЮ_____________");
            cell.CellStyle = Calibri11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, PageName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;

            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(++RowIndex), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            RowIndex++;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Профиль");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет профиля");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Высота");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "м.кв.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int CType = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            decimal AllTotalSquare = 0;
            decimal TotalSquare = 0;

            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "ColorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
                CType = Convert.ToInt32(DT.Rows[0]["ColorID"]);

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                if (DT.Rows[x]["Square"] != DBNull.Value)
                {
                    AllTotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                    TotalSquare += Convert.ToDecimal(DT.Rows[x]["Square"]);
                }

                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "ColorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (CType != Convert.ToInt32(DT.Rows[x + 1]["ColorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorID")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderCS;

                        CType = Convert.ToInt32(DT.Rows[x + 1]["ColorID"]);
                        TotalAmount = 0;
                        TotalSquare = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "ColorID")
                                continue;
                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                        cell.SetCellValue(Convert.ToDouble(TotalSquare));
                        cell.CellStyle = TableHeaderDecCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "ColorID")
                            continue;
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(5);
                    cell.SetCellValue(Convert.ToDouble(AllTotalSquare));
                    cell.CellStyle = TableHeaderDecCS;
                }
                RowIndex++;
            }
        }

        private void NotArchDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (NotArchDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(NotArchDecorOrdersDT, true);
            DataTable DT = NotArchDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Не арки ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = NotArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    GroupAndSortDecor(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Не арки Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = NotArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    GroupAndSortDecor(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        NotArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void NotArchDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }
            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        private void ArchDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (ArchDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(ArchDecorOrdersDT, true);
            DataTable DT = ArchDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Арки ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = ArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    GroupAndSortDecor(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Арки Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = ArchDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    GroupAndSortDecor(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        ArchDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void ArchDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

        private void GridsDecorAssemblyByMainOrderToExcel(ref HSSFWorkbook hssfworkbook,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            int WorkAssignmentID, string BatchName)
        {
            if (GridsDecorOrdersDT.Rows.Count == 0)
                return;

            DataTable DistMainOrdersDT = DistMainOrdersTable(GridsDecorOrdersDT, true);
            DataTable DT = GridsDecorOrdersDT.Clone();
            DataTable ZOVOrdersNames = new DataTable();
            DataTable MarketOrdersNames = new DataTable();
            string MainOrdersID = string.Empty;
            string ClientName = string.Empty;
            string OrderName = string.Empty;
            string Notes = string.Empty;

            if (DistMainOrdersDT.Select("GroupType=0").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, DocNumber, MainOrderID FROM MainOrders" +
                    " INNER JOIN infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID=infiniu2_zovreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(ZOVOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки1 ЗОВ");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=0"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = GridsDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    GroupAndSortDecor(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = ZOVOrdersNames.Select("MainOrderID=" + Convert.ToInt32(item["MainOrderID"]));
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        OrderName = CRows[0]["DocNumber"].ToString();
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
            if (DistMainOrdersDT.Select("GroupType=1").Count() > 0)
            {
                MainOrdersID = string.Empty;
                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                    MainOrdersID += Convert.ToInt32(item["MainOrderID"]) + ",";
                MainOrdersID = MainOrdersID.Substring(0, MainOrdersID.Length - 1);
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientName, OrderNumber, MainOrderID, Notes FROM MainOrders" +
                    " INNER JOIN MegaOrders ON MainOrders.MegaOrderID=MegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID=infiniu2_marketingreference.dbo.Clients.ClientID" +
                    " WHERE MainOrderID IN (" + MainOrdersID + ")", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarketOrdersNames);
                }

                int RowIndex = 0;
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Решетки1 Маркетинг");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.SetColumnWidth(0, 30 * 256);
                sheet1.SetColumnWidth(1, 20 * 256);
                sheet1.SetColumnWidth(2, 9 * 256);
                sheet1.SetColumnWidth(3, 6 * 256);
                sheet1.SetColumnWidth(4, 6 * 256);

                foreach (DataRow item in DistMainOrdersDT.Select("GroupType=1"))
                {
                    DecorAssemblyDT.Clear();
                    DT.Clear();
                    int MainOrderID = Convert.ToInt32(item["MainOrderID"]);
                    DataRow[] rows = GridsDecorOrdersDT.Select("MainOrderID=" + MainOrderID);
                    foreach (DataRow item1 in rows)
                        DT.Rows.Add(item1.ItemArray);
                    GroupAndSortDecor(DT, ref DecorAssemblyDT);

                    DataRow[] CRows = MarketOrdersNames.Select("MainOrderID=" + MainOrderID);
                    if (CRows.Count() > 0)
                    {
                        ClientName = CRows[0]["ClientName"].ToString();
                        Notes = CRows[0]["Notes"].ToString();
                        OrderName = "№" + CRows[0]["OrderNumber"].ToString() + "-" + MainOrderID;
                    }
                    if (DecorAssemblyDT.Rows.Count > 0)
                    {
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                             Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                             WorkAssignmentID, BatchName, ClientName, string.Empty, OrderName, Notes, ref RowIndex);
                        RowIndex++;
                        GridsDecorAssemblyToExcelSingly(ref hssfworkbook, ref sheet1,
                            Calibri11CS, CalibriBold11CS, CalibriBold11F, TableHeaderCS, TableHeaderDecCS, DecorAssemblyDT,
                            WorkAssignmentID, BatchName, ClientName, "ДУБЛЬ", OrderName, Notes, ref RowIndex);
                    }
                    RowIndex++;
                }
            }
        }

        public void GridsDecorAssemblyToExcelSingly(ref HSSFWorkbook hssfworkbook, ref HSSFSheet sheet1,
            HSSFCellStyle Calibri11CS, HSSFCellStyle CalibriBold11CS, HSSFFont CalibriBold11F, HSSFCellStyle TableHeaderCS, HSSFCellStyle TableHeaderDecCS,
            DataTable DT, int WorkAssignmentID, string BatchName, string ClientName, string OperationName, string OrderName, string Notes, ref int RowIndex)
        {
            HSSFCell cell = null;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Задание №" + WorkAssignmentID.ToString());
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, BatchName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Клиент:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, ClientName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Заказ:");
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, OrderName);
            cell.CellStyle = CalibriBold11CS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 4, OperationName);
            cell.CellStyle = CalibriBold11CS;
            if (Notes.Length > 0)
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Примечание: " + Notes);
                cell.CellStyle = CalibriBold11CS;
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Цвет");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Длин./Выс.");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Ширина");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Кол-во");
            cell.CellStyle = TableHeaderCS;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Прим.");
            cell.CellStyle = TableHeaderCS;
            RowIndex++;

            int DecorID = -1;
            int AllTotalAmount = 0;
            int TotalAmount = 0;
            int DifferentDecorCount = 0;

            using (DataView DV = new DataView(DT))
            {
                DifferentDecorCount = DV.ToTable(true, new string[] { "DecorID" }).Rows.Count;
            }

            if (DT.Rows.Count > 0)
            {
                DecorID = Convert.ToInt32(DT.Rows[0]["DecorID"]);
            }

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                if (DT.Rows[x]["Count"] != DBNull.Value)
                {
                    AllTotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                    TotalAmount += Convert.ToInt32(DT.Rows[x]["Count"]);
                }
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    if (DT.Columns[y].ColumnName == "DecorID")
                        continue;

                    Type t = DT.Rows[x][y].GetType();

                    if (t.Name == "Decimal")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderDecCS;
                        continue;
                    }
                    if (t.Name == "Int32")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(Convert.ToInt32(DT.Rows[x][y]));
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    if (t.Name == "String" || t.Name == "DBNull")
                    {
                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }
                }

                if (x + 1 <= DT.Rows.Count - 1)
                {
                    if (DecorID != Convert.ToInt32(DT.Rows[x + 1]["DecorID"]))
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;

                        DecorID = Convert.ToInt32(DT.Rows[x + 1]["DecorID"]);
                        TotalAmount = 0;
                        RowIndex++;
                    }
                }

                if (x == DT.Rows.Count - 1)
                {
                    if (DifferentDecorCount > 1)
                    {
                        RowIndex++;
                        for (int y = 0; y < DT.Columns.Count; y++)
                        {
                            if (DT.Columns[y].ColumnName == "DecorID")
                                continue;

                            cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(string.Empty);
                            cell.CellStyle = TableHeaderCS;
                            continue;
                        }

                        cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                        cell.SetCellValue("Итого:");
                        cell.CellStyle = TableHeaderCS;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                        cell.SetCellValue(TotalAmount);
                        cell.CellStyle = TableHeaderCS;
                    }
                    RowIndex++;

                    for (int y = 0; y < DT.Columns.Count; y++)
                    {
                        if (DT.Columns[y].ColumnName == "DecorID")
                            continue;

                        cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                        cell.SetCellValue(string.Empty);
                        cell.CellStyle = TableHeaderCS;
                        continue;
                    }

                    cell = sheet1.CreateRow(RowIndex).CreateCell(0);
                    cell.SetCellValue("Всего:");
                    cell.CellStyle = TableHeaderCS;

                    cell = sheet1.CreateRow(RowIndex).CreateCell(4);
                    cell.SetCellValue(AllTotalAmount);
                    cell.CellStyle = TableHeaderCS;
                }
                RowIndex++;
            }
        }

    }





    public class FrontsProdCapacity
    {
        int TechStoreID, InsetTypeID, PatinaID, Height, Width = 0;

        DataTable DataTable1;
        DataTable ResultDT;
        DataTable SummaryDT;
        DataTable MaterialDT;
        DataTable FixedMaterialDT;

        DataTable FrontsOrdersDT;
        DataTable FrontsConfigDT;
        DataTable OperationsDetailDT;
        DataTable StoreDetailDT;
        DataTable SumOperationsDetailDT;
        DataTable SumStoreDetailDT;
        DataTable OperationsTermsDT;
        
        public BindingSource ResultBS;
        public BindingSource SummaryBS;
        public BindingSource MaterialBS;

        public FrontsProdCapacity(int iTechStoreID, int iInsetTypeID, int iPatinaID, int iHeight, int iWidth)
        {
            TechStoreID = iTechStoreID;
            InsetTypeID = iInsetTypeID;
            PatinaID = iPatinaID;
            Height = iHeight;
            Width = iWidth;
        }

        public void Initialize()
        {
            Create();

            string SelectCommand = @"SELECT TechCatalogOperationsDetail.*, TechCatalogOperationsGroups.TechStoreID, TechCatalogOperationsGroups.GroupName, 
                MachinesOperations.MachinesOperationName, MachinesOperations.Norm, MachinesOperations.PreparatoryNorm, MachinesOperations.MeasureID, 
                Machines.MachineID, Machines.MachineName, SubSectors.SubSectorID, SubSectors.SubSectorName, Sectors.SectorID, Sectors.SectorName FROM TechCatalogOperationsDetail
                INNER JOIN TechCatalogOperationsGroups ON TechCatalogOperationsDetail.TechCatalogOperationsGroupID=TechCatalogOperationsGroups.TechCatalogOperationsGroupID AND GroupNumber=1
                INNER JOIN MachinesOperations ON TechCatalogOperationsDetail.MachinesOperationID = MachinesOperations.MachinesOperationID
                INNER JOIN Machines ON MachinesOperations.MachineID = Machines.MachineID
                INNER JOIN SubSectors ON Machines.SubSectorID = SubSectors.SubSectorID
                INNER JOIN Sectors ON SubSectors.SectorID = Sectors.SectorID ORDER BY SerialNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                OperationsDetailDT.Clear();
                DA.Fill(OperationsDetailDT);
                SumOperationsDetailDT = OperationsDetailDT.Clone();
                SumOperationsDetailDT.Columns.Add(new DataColumn("NestedLevel", Type.GetType("System.Int32")));
                SumOperationsDetailDT.Columns.Add(new DataColumn("PrevTechCatalogOperationsDetailID", Type.GetType("System.Int32")));
                SumOperationsDetailDT.Columns.Add(new DataColumn("OperationsDetail", Type.GetType("System.String")));
            }
            SelectCommand = @"SELECT TechCatalogStoreDetail.*, TechStore.TechStoreName FROM TechCatalogStoreDetail
                INNER JOIN TechStore ON TechCatalogStoreDetail.TechStoreID = TechStore.TechStoreID ORDER BY GroupA, GroupB, GroupC";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                StoreDetailDT.Clear();
                DA.Fill(StoreDetailDT);
                SumStoreDetailDT = StoreDetailDT.Clone();
                SumStoreDetailDT.Columns.Add(new DataColumn("NestedLevel", Type.GetType("System.Int32")));
            }
            SelectCommand = @"SELECT * FROM TechCatalogOperationsTerms";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                OperationsTermsDT.Clear();
                DA.Fill(OperationsTermsDT);
            }
        }

        private void Create()
        {
            ResultDT = new DataTable();
            ResultDT.Columns.Add(new DataColumn("SerialNumber", Type.GetType("System.Int32")));
            ResultDT.Columns.Add(new DataColumn("GroupName", Type.GetType("System.String")));
            ResultDT.Columns.Add(new DataColumn("TechCatalogOperationsGroupID", Type.GetType("System.Int32")));
            ResultDT.Columns.Add(new DataColumn("PrevTechCatalogOperationsDetailID", Type.GetType("System.Int32")));
            ResultDT.Columns.Add(new DataColumn("TechCatalogOperationsDetailID", Type.GetType("System.Int32")));

            DataTable1 = new DataTable();
            DataTable1.Columns.Add(new DataColumn("TechCatalogOperationsGroupID", Type.GetType("System.Int32")));
            DataTable1.Columns.Add(new DataColumn("PrevTechCatalogOperationsDetailID", Type.GetType("System.Int32")));
            DataTable1.Columns.Add(new DataColumn("TechCatalogOperationsDetailID", Type.GetType("System.Int32")));
            DataTable1.Columns.Add(new DataColumn("TechStoreID", Type.GetType("System.Int32")));
            DataTable1.Columns.Add(new DataColumn("SerialNumber", Type.GetType("System.Int32")));
            DataTable1.Columns.Add(new DataColumn("GroupName", Type.GetType("System.String")));
            DataTable1.Columns.Add(new DataColumn("MachinesOperationName", Type.GetType("System.String")));
            DataTable1.Columns.Add(new DataColumn("TechStoreName", Type.GetType("System.String")));
            DataTable1.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            DataTable1.Columns.Add(new DataColumn("Measure", Type.GetType("System.String")));
            DataTable1.Columns.Add(new DataColumn("check", Type.GetType("System.Boolean")));

            SummaryDT = new DataTable();
            SummaryDT.Columns.Add(new DataColumn("TechCatalogOperationsGroupID", Type.GetType("System.Int32")));
            SummaryDT.Columns.Add(new DataColumn("PrevTechCatalogOperationsDetailID", Type.GetType("System.Int32")));
            SummaryDT.Columns.Add(new DataColumn("TechCatalogOperationsDetailID", Type.GetType("System.Int32")));
            SummaryDT.Columns.Add(new DataColumn("TechStoreID", Type.GetType("System.Int32")));
            SummaryDT.Columns.Add(new DataColumn("SerialNumber", Type.GetType("System.Int32")));
            SummaryDT.Columns.Add(new DataColumn("GroupName", Type.GetType("System.String")));
            SummaryDT.Columns.Add(new DataColumn("MachinesOperationName", Type.GetType("System.String")));
            SummaryDT.Columns.Add(new DataColumn("TechStoreName", Type.GetType("System.String")));
            SummaryDT.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            SummaryDT.Columns.Add(new DataColumn("Measure", Type.GetType("System.String")));
            SummaryDT.Columns.Add(new DataColumn("check", Type.GetType("System.Boolean")));

            MaterialDT = new DataTable();
            MaterialDT.Columns.Add(new DataColumn("TechCatalogStoreDetailID", Type.GetType("System.Int32")));
            MaterialDT.Columns.Add(new DataColumn("TechCatalogOperationsDetailID", Type.GetType("System.Int32")));
            MaterialDT.Columns.Add(new DataColumn("TechStoreID", Type.GetType("System.Int32")));
            MaterialDT.Columns.Add(new DataColumn("SectorName", Type.GetType("System.String")));
            MaterialDT.Columns.Add(new DataColumn("MachinesOperationName", Type.GetType("System.String")));
            MaterialDT.Columns.Add(new DataColumn("TechStoreName", Type.GetType("System.String")));
            MaterialDT.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            MaterialDT.Columns.Add(new DataColumn("Measure", Type.GetType("System.String")));
            MaterialDT.Columns.Add(new DataColumn("PanelCounter", Type.GetType("System.Int32")));
            FixedMaterialDT = MaterialDT.Clone();

            FrontsOrdersDT = new DataTable();
            FrontsConfigDT = new DataTable();
            OperationsDetailDT = new DataTable();
            StoreDetailDT = new DataTable();
            OperationsTermsDT = new DataTable();

            ResultBS = new BindingSource()
            {
                DataSource = ResultDT
            };
            SummaryBS = new BindingSource()
            {
                DataSource = SummaryDT
            };
            MaterialBS = new BindingSource()
            {
                DataSource = MaterialDT
            };
        }

        public void DeleteMaterial(int PanelCounter)
        {
            DataRow[] rows = MaterialDT.Select("PanelCounter=" + PanelCounter);
            for (int i = rows.Count() - 1; i >= 0; i--)
                rows[i].Delete();
        }

        int NestedLevel = 1;

        public void FF()
        {
            SumOperationsDetailDT.Clear();
            string SelectCommand = @"SELECT TechCatalogOperationsDetail.*, TechCatalogOperationsGroups.TechStoreID, TechCatalogOperationsGroups.GroupName, 
                MachinesOperations.MachinesOperationName, MachinesOperations.Norm, MachinesOperations.PreparatoryNorm, MachinesOperations.MeasureID, 
                Machines.MachineID, Machines.MachineName, SubSectors.SubSectorID, SubSectors.SubSectorName, Sectors.SectorID, Sectors.SectorName FROM TechCatalogOperationsDetail
                INNER JOIN TechCatalogOperationsGroups ON TechCatalogOperationsDetail.TechCatalogOperationsGroupID=TechCatalogOperationsGroups.TechCatalogOperationsGroupID AND GroupNumber=1
                INNER JOIN MachinesOperations ON TechCatalogOperationsDetail.MachinesOperationID = MachinesOperations.MachinesOperationID
                INNER JOIN Machines ON MachinesOperations.MachineID = Machines.MachineID
                INNER JOIN SubSectors ON Machines.SubSectorID = SubSectors.SubSectorID
                INNER JOIN Sectors ON SubSectors.SectorID = Sectors.SectorID
                WHERE TechStoreID=" + TechStoreID + " ORDER BY SerialNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = SumOperationsDetailDT.NewRow();
                        NewRow.ItemArray = DT.Rows[i].ItemArray;
                        NewRow["NestedLevel"] = NestedLevel;
                        SumOperationsDetailDT.Rows.Add(NewRow);
                    }
                }
            }

            for (int i = 0; i < SumOperationsDetailDT.Rows.Count; i++)
            {
                if (NestedLevel == 0)
                    break;
                //if (NestedLevel != Convert.ToInt32(SumOperationsDetailDT.Rows[i]["NestedLevel"]))
                //    continue;
                int TechCatalogOperationsDetailID = Convert.ToInt32(SumOperationsDetailDT.Rows[i]["TechCatalogOperationsDetailID"]);
                if (!CheckConditions(TechCatalogOperationsDetailID, InsetTypeID, PatinaID, Height, Width))
                    continue;
                GetStoreDetail(TechCatalogOperationsDetailID, Convert.ToInt32(SumOperationsDetailDT.Rows[i]["NestedLevel"]), SumOperationsDetailDT.Rows[i]);
            }
        }

        public bool GetOperationsDetail(int PrevTechCatalogOperationsDetailID, int NestedLevel, DataRow Row)
        {
            int TechStoreID = Convert.ToInt32(Row["TechStoreID"]);

            string TechStoreName = Row["TechStoreName"].ToString();
            bool BreakChain = Convert.ToBoolean(Row["BreakChain"]);
            if (BreakChain)
                return false;
            DataRow[] rows = OperationsDetailDT.Select("TechStoreID=" + Convert.ToInt32(Row["TechStoreID"]));
            if (rows.Count() == 0)
            {
            }
            else
            {
                foreach (DataRow item in rows)
                {
                    int TechCatalogOperationsDetailID = Convert.ToInt32(item["TechCatalogOperationsDetailID"]);
                    if (!CheckConditions(Convert.ToInt32(item["TechCatalogOperationsDetailID"]), InsetTypeID, PatinaID, Height, Width))
                        continue;
                    //if (SumOperationsDetailDT.Select("TechCatalogOperationsDetailID=" + TechCatalogOperationsDetailID).Count() > 0)
                    //    continue;
                    if (TechCatalogOperationsDetailID == PrevTechCatalogOperationsDetailID)
                        continue;
                    DataRow NewRow = SumOperationsDetailDT.NewRow();
                    NewRow.ItemArray = item.ItemArray;
                    NewRow["PrevTechCatalogOperationsDetailID"] = PrevTechCatalogOperationsDetailID;
                    NewRow["NestedLevel"] = NestedLevel;
                    SumOperationsDetailDT.Rows.Add(NewRow);
                }
            }
            NestedLevel--;

            return rows.Count() > 0;
        }

        public bool GetStoreDetail(int PrevTechCatalogOperationsDetailID, int NestedLevel, DataRow Row)
        {
            int TechCatalogOperationsDetailID = Convert.ToInt32(Row["TechCatalogOperationsDetailID"]);
            DataRow[] rows = StoreDetailDT.Select("TechCatalogOperationsDetailID=" + Convert.ToInt32(Row["TechCatalogOperationsDetailID"]));
            if (rows.Count() == 0)
            {
                //if (SumOperationsDetailDT.Select("TechCatalogOperationsDetailID=" + TechCatalogOperationsDetailID).Count() > 0)
                //    return false;
                if (TechCatalogOperationsDetailID == PrevTechCatalogOperationsDetailID)
                    return false;
                DataRow NewRow = SumOperationsDetailDT.NewRow();
                NewRow.ItemArray = Row.ItemArray;
                NewRow["PrevTechCatalogOperationsDetailID"] = PrevTechCatalogOperationsDetailID;
                NewRow["NestedLevel"] = NestedLevel;
                SumOperationsDetailDT.Rows.Add(NewRow);
            }
            else
            {
                NestedLevel++;
                int iNedtedLevel = NestedLevel;
                foreach (DataRow item in rows)
                {
                    DataRow NewRow = SumStoreDetailDT.NewRow();
                    NewRow.ItemArray = item.ItemArray;
                    NewRow["NestedLevel"] = iNedtedLevel - 1;
                    SumStoreDetailDT.Rows.Add(NewRow);
                    GetOperationsDetail(PrevTechCatalogOperationsDetailID, iNedtedLevel, item);
                }
            }
            NestedLevel--;

            return rows.Count() > 0;
        }

        private bool CheckConditions(int TechCatalogOperationsDetailID, int InsetTypeID, int PatinaID, int Height, int Width)
        {
            DataRow[] rows = OperationsTermsDT.Select("TechCatalogOperationsDetailID=" + TechCatalogOperationsDetailID);
            if (rows.Count() == 0)
            {
                return true;
            }
            foreach (DataRow row in rows)
            {
                int Term = Convert.ToInt32(row["Term"]);
                string Parameter = row["Parameter"].ToString();
                switch (Parameter)
                {
                    case "CoverID":
                        break;
                    case "InsetTypeID":
                        if (row["MathSymbol"].ToString().Equals("="))
                        {
                            if (InsetTypeID == Term)
                            { }
                            else
                                return false;
                        }
                        if (row["MathSymbol"].ToString().Equals("!="))
                        {
                            if (InsetTypeID != Term)
                            { }
                            else
                                return false;
                        }
                        if (row["MathSymbol"].ToString().Equals(">="))
                        {
                            if (InsetTypeID >= Term)
                            { }
                            else
                                return false;
                        }
                        if (row["MathSymbol"].ToString().Equals("<="))
                        {
                            if (InsetTypeID <= Term)
                            { }
                            else
                                return false;
                        }
                        break;
                    case "InsetColorID":
                        break;
                    case "ColorID":
                        break;
                    case "PatinaID":
                        if (row["MathSymbol"].ToString().Equals("="))
                        {
                            if (PatinaID == Term)
                            { }
                            else
                                return false;
                        }
                        if (row["MathSymbol"].ToString().Equals("!="))
                        {
                            if (PatinaID != Term)
                            { }
                            else
                                return false;
                        }
                        if (row["MathSymbol"].ToString().Equals(">="))
                        {
                            if (PatinaID >= Term)
                            { }
                            else
                                return false;
                        }
                        if (row["MathSymbol"].ToString().Equals("<="))
                        {
                            if (PatinaID <= Term)
                            { }
                            else
                                return false;
                        }
                        break;
                    case "Diameter":
                        break;
                    case "Thickness":
                        break;
                    case "Length":
                        break;
                    case "Height":
                        if (row["MathSymbol"].ToString().Equals("="))
                        {
                            if (Height == Term)
                            { }
                            else
                                return false;
                        }
                        if (row["MathSymbol"].ToString().Equals("!="))
                        {
                            if (Height != Term)
                            { }
                            else
                                return false;
                        }
                        if (row["MathSymbol"].ToString().Equals(">="))
                        {
                            if (Height >= Term)
                            { }
                            else
                                return false;
                        }
                        if (row["MathSymbol"].ToString().Equals("<="))
                        {
                            if (Height <= Term)
                            { }
                            else
                                return false;
                        }
                        break;
                    case "Width":
                        if (row["MathSymbol"].ToString().Equals("="))
                        {
                            if (Width == Term)
                            { }
                            else
                                return false;
                        }
                        if (row["MathSymbol"].ToString().Equals("!="))
                        {
                            if (Width != Term)
                            { }
                            else
                                return false;
                        }
                        if (row["MathSymbol"].ToString().Equals(">="))
                        {
                            if (Width >= Term)
                            { }
                            else
                                return false;
                        }
                        if (row["MathSymbol"].ToString().Equals("<="))
                        {
                            if (Width <= Term)
                            { }
                            else
                                return false;
                        }
                        break;
                    case "Admission":
                        break;
                    case "InsetHeightAdmission":
                        break;
                    case "InsetWidthAdmission":
                        break;
                    case "Capacity":
                        break;
                    case "Weight":
                        break;
                }
            }
            return true;
        }
    }
}
